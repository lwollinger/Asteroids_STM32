
teste_2_jogo_pilha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000969c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  0800983c  0800983c  0000a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a214  0800a214  0000c50c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a214  0800a214  0000b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a21c  0800a21c  0000c50c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a21c  0800a21c  0000b21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a220  0800a220  0000b220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000050c  20000000  0800a224  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d34  2000050c  0800a730  0000c50c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005240  0800a730  0000d240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c50c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019db2  00000000  00000000  0000c53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5c  00000000  00000000  000262ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004167  00000000  00000000  0002b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000196a2  00000000  00000000  0002f637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a55c9  00000000  00000000  00048cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ee2a2  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000113e  00000000  00000000  000ee2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000630c  00000000  00000000  000ef424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000f5730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000050c 	.word	0x2000050c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009824 	.word	0x08009824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000510 	.word	0x20000510
 80001dc:	08009824 	.word	0x08009824

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Função para pegar valor do buffer do joystick
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	    valor_ADC[0] = ADC_buffer[0];
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_ADC_ConvCpltCallback+0x24>)
 80005b6:	881a      	ldrh	r2, [r3, #0]
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_ADC_ConvCpltCallback+0x28>)
 80005ba:	801a      	strh	r2, [r3, #0]
		valor_ADC[1] = ADC_buffer[1];
 80005bc:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <HAL_ADC_ConvCpltCallback+0x24>)
 80005be:	885a      	ldrh	r2, [r3, #2]
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <HAL_ADC_ConvCpltCallback+0x28>)
 80005c2:	805a      	strh	r2, [r3, #2]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200006b8 	.word	0x200006b8
 80005d4:	200006bc 	.word	0x200006bc

080005d8 <vTask_Contar_Tempo>:
void Asteroide_Construtor_Basico(Asteroide_Struct *, uint8_t);



void vTask_Contar_Tempo() // Contador de tempo para controle do jogo
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	while(1)
	{
		for (uint8_t nr_tasks = 0; nr_tasks < NR_TASKS_USANDO_TEMPO; nr_tasks++){
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	e00a      	b.n	80005fa <vTask_Contar_Tempo+0x22>
			xQueueSendToBack(fila_tempo,&nr_tasks,0);
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <vTask_Contar_Tempo+0x30>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	1df9      	adds	r1, r7, #7
 80005ea:	2300      	movs	r3, #0
 80005ec:	2200      	movs	r2, #0
 80005ee:	f005 fda3 	bl	8006138 <xQueueGenericSend>
		for (uint8_t nr_tasks = 0; nr_tasks < NR_TASKS_USANDO_TEMPO; nr_tasks++){
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d9f1      	bls.n	80005e4 <vTask_Contar_Tempo+0xc>
		};
		vTaskDelay(PASSO_DE_TEMPO);
 8000600:	2014      	movs	r0, #20
 8000602:	f006 fcef 	bl	8006fe4 <vTaskDelay>
		for (uint8_t nr_tasks = 0; nr_tasks < NR_TASKS_USANDO_TEMPO; nr_tasks++){
 8000606:	e7ea      	b.n	80005de <vTask_Contar_Tempo+0x6>
 8000608:	20000644 	.word	0x20000644

0800060c <vTask_Display>:
	}
}


void vTask_Display(void *pvParameters)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b0ce      	sub	sp, #312	@ 0x138
 8000610:	af02      	add	r7, sp, #8
 8000612:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000616:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800061a:	6018      	str	r0, [r3, #0]
	uint8_t figura_em_display_deletar;

	BaseType_t status_imprimir_objetos;
	BaseType_t status_deletar_objetos;

	int figuras_em_tela[NR_ITENS_DISPLAY] = {0,0,0,0,0,0};
 800061c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f008 fccf 	bl	8008fc8 <memset>
	display figuras_em_tela_display[NR_ITENS_DISPLAY] = {0};
 800062a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800062e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000632:	4618      	mov	r0, r3
 8000634:	23c0      	movs	r3, #192	@ 0xc0
 8000636:	461a      	mov	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f008 fcc5 	bl	8008fc8 <memset>
	int16_t pos_figura_y;
	int16_t altura_figura;
	int16_t tamanho_figura_y;

	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800063e:	f006 ff2b 	bl	8007498 <xTaskGetTickCount>
 8000642:	4602      	mov	r2, r0
 8000644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800064c:	601a      	str	r2, [r3, #0]

	while(1)
	{
		xSemaphoreTake(semaforo_uso_display,portMAX_DELAY);  // <- gambiarra para não colocar outra estrutura só para texto, "depois" arrumo
 800064e:	4bc5      	ldr	r3, [pc, #788]	@ (8000964 <vTask_Display+0x358>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f04f 31ff 	mov.w	r1, #4294967295
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fff0 	bl	800663c <xQueueSemaphoreTake>
		status_imprimir_objetos = xQueueReceive(fila_movimento,&figura_em_display,0);
 800065c:	4bc2      	ldr	r3, [pc, #776]	@ (8000968 <vTask_Display+0x35c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000664:	2200      	movs	r2, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 ff06 	bl	8006478 <xQueueReceive>
 800066c:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		status_deletar_objetos = xQueueReceive(fila_movimento_deletar,&figura_em_display_deletar,0);
 8000670:	4bbe      	ldr	r3, [pc, #760]	@ (800096c <vTask_Display+0x360>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f107 01f3 	add.w	r1, r7, #243	@ 0xf3
 8000678:	2200      	movs	r2, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fefc 	bl	8006478 <xQueueReceive>
 8000680:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

		while (status_imprimir_objetos == pdPASS)
 8000684:	e208      	b.n	8000a98 <vTask_Display+0x48c>
		{
			if(figuras_em_tela[figura_em_display.id] == 0)
 8000686:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000690:	443b      	add	r3, r7
 8000692:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d11d      	bne.n	80006d6 <vTask_Display+0xca>
			{
				figuras_em_tela[figura_em_display.id] = 1;
 800069a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80006a4:	443b      	add	r3, r7
 80006a6:	2201      	movs	r2, #1
 80006a8:	f843 2c60 	str.w	r2, [r3, #-96]
				figuras_em_tela_display[figura_em_display.id] = figura_em_display;
 80006ac:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80006b0:	4619      	mov	r1, r3
 80006b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006b6:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80006ba:	460b      	mov	r3, r1
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	440b      	add	r3, r1
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4413      	add	r3, r2
 80006c4:	461d      	mov	r5, r3
 80006c6:	f107 04f4 	add.w	r4, r7, #244	@ 0xf4
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006d2:	e885 0003 	stmia.w	r5, {r0, r1}
			}



			//apagar a anterior
			if(figura_em_display.posicao[0] < 0)
 80006d6:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 80006da:	2b00      	cmp	r3, #0
 80006dc:	da02      	bge.n	80006e4 <vTask_Display+0xd8>
			{
				figura_em_display.posicao[0] = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
			}
			if(figura_em_display.posicao[1] < 0)
 80006e4:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	da02      	bge.n	80006f2 <vTask_Display+0xe6>
			{
				figura_em_display.posicao[1] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
			}

			if(figura_em_display.pos_anterior[0] < 0)
 80006f2:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	da02      	bge.n	8000700 <vTask_Display+0xf4>
			{
				figura_em_display.pos_anterior[0] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
			}
			if(figura_em_display.pos_anterior[1] < 0)
 8000700:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	@ 0x102
 8000704:	2b00      	cmp	r3, #0
 8000706:	da02      	bge.n	800070e <vTask_Display+0x102>
			{
				figura_em_display.pos_anterior[1] = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
			}

			ST7735_FillRectangle((uint16_t)figura_em_display.pos_anterior[0], (uint16_t)figura_em_display.pos_anterior[1], (uint16_t)figura_em_display.figura.width, (uint16_t)figura_em_display.figura.height, ST7735_BLACK);
 800070e:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8000712:	b298      	uxth	r0, r3
 8000714:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	@ 0x102
 8000718:	b299      	uxth	r1, r3
 800071a:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 800071e:	461a      	mov	r2, r3
 8000720:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8000724:	461c      	mov	r4, r3
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4623      	mov	r3, r4
 800072c:	f002 fa40 	bl	8002bb0 <ST7735_FillRectangle>

			ST7735_draw_figure((uint32_t)figura_em_display.posicao[0], (uint32_t)figura_em_display.posicao[1], figura_em_display.figura, figura_em_display.cor);
 8000730:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 8000734:	4618      	mov	r0, r3
 8000736:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 800073a:	4619      	mov	r1, r3
 800073c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000740:	b29b      	uxth	r3, r3
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000748:	cb0c      	ldmia	r3, {r2, r3}
 800074a:	f002 fad4 	bl	8002cf6 <ST7735_draw_figure>

			// atualiza a antiga imagem do diplay
			figuras_em_tela_display[figura_em_display.id] = figura_em_display;
 800074e:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8000752:	4619      	mov	r1, r3
 8000754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000758:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800075c:	460b      	mov	r3, r1
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	440b      	add	r3, r1
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	4413      	add	r3, r2
 8000766:	461d      	mov	r5, r3
 8000768:	f107 04f4 	add.w	r4, r7, #244	@ 0xf4
 800076c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000774:	e885 0003 	stmia.w	r5, {r0, r1}


			pos_figura_x = figura_em_display.posicao[0];
 8000778:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800077c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			largura_figura = (int16_t)figura_em_display.figura.width;
 8000780:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8000784:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
			tamanho_figura_x = (pos_figura_x + largura_figura);
 8000788:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 800078c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000790:	4413      	add	r3, r2
 8000792:	b29b      	uxth	r3, r3
 8000794:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118

			pos_figura_y = figura_em_display.posicao[1];
 8000798:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800079c:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
			altura_figura = (int16_t)figura_em_display.figura.height;
 80007a0:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 80007a4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
			tamanho_figura_y = (pos_figura_y + altura_figura);
 80007a8:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 80007ac:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80007b0:	4413      	add	r3, r2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112

			for (int camada = 0; camada < NR_CAMADAS_DISPLAY; camada++){
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80007be:	e15c      	b.n	8000a7a <vTask_Display+0x46e>
				for (int j = 0; j < NR_ITENS_DISPLAY; j++){
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80007c6:	e14e      	b.n	8000a66 <vTask_Display+0x45a>
					if(figuras_em_tela[j] == verdadeiro){
 80007c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80007d2:	443b      	add	r3, r7
 80007d4:	f853 3c60 	ldr.w	r3, [r3, #-96]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	f040 813f 	bne.w	8000a5c <vTask_Display+0x450>
						if (figuras_em_tela_display[j].id == figura_em_display.id){
 80007de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007e2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80007e6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	440b      	add	r3, r1
 80007f4:	3315      	adds	r3, #21
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f000 812d 	beq.w	8000a5c <vTask_Display+0x450>
						} else{
							// checa colisão no eixo x INICIO
							uint8_t a = ( pos_figura_x - figuras_em_tela_display[j].posicao[0]) <= (figuras_em_tela_display[j].figura.width);
 8000802:	f9b7 111c 	ldrsh.w	r1, [r7, #284]	@ 0x11c
 8000806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800080a:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 800080e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	4403      	add	r3, r0
 800081c:	3308      	adds	r3, #8
 800081e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000822:	1ac9      	subs	r1, r1, r3
 8000824:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000828:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 800082c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4403      	add	r3, r0
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4299      	cmp	r1, r3
 800083e:	bfd4      	ite	le
 8000840:	2301      	movle	r3, #1
 8000842:	2300      	movgt	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
							uint8_t b = (figuras_em_tela_display[j].posicao[0]) <= (tamanho_figura_x);
 800084a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800084e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000852:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	440b      	add	r3, r1
 8000860:	3308      	adds	r3, #8
 8000862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000866:	f9b7 2118 	ldrsh.w	r2, [r7, #280]	@ 0x118
 800086a:	429a      	cmp	r2, r3
 800086c:	bfac      	ite	ge
 800086e:	2301      	movge	r3, #1
 8000870:	2300      	movlt	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
							uint8_t c = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

							//checa colisão no eixo y INICIO
							uint8_t d = (pos_figura_y - figuras_em_tela_display[j].posicao[1]) <= (figuras_em_tela_display[j].figura.height);
 800087e:	f9b7 1116 	ldrsh.w	r1, [r7, #278]	@ 0x116
 8000882:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000886:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 800088a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4403      	add	r3, r0
 8000898:	330a      	adds	r3, #10
 800089a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80008a4:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 80008a8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4403      	add	r3, r0
 80008b6:	3301      	adds	r3, #1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4299      	cmp	r1, r3
 80008bc:	bfd4      	ite	le
 80008be:	2301      	movle	r3, #1
 80008c0:	2300      	movgt	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
							uint8_t e = (figuras_em_tela_display[j].posicao[1]) <= (tamanho_figura_y);
 80008c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80008cc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80008d0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	440b      	add	r3, r1
 80008de:	330a      	adds	r3, #10
 80008e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008e4:	f9b7 2112 	ldrsh.w	r2, [r7, #274]	@ 0x112
 80008e8:	429a      	cmp	r2, r3
 80008ea:	bfac      	ite	ge
 80008ec:	2301      	movge	r3, #1
 80008ee:	2300      	movlt	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
							uint8_t f = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
							if ((pos_figura_x - figuras_em_tela_display[j].posicao[0]) > 0){
 80008fc:	f9b7 111c 	ldrsh.w	r1, [r7, #284]	@ 0x11c
 8000900:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000904:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 8000908:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4403      	add	r3, r0
 8000916:	3308      	adds	r3, #8
 8000918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800091c:	1acb      	subs	r3, r1, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	dd04      	ble.n	800092c <vTask_Display+0x320>
								c = a;
 8000922:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 8000926:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800092a:	e003      	b.n	8000934 <vTask_Display+0x328>
							} else{
								c = b;
 800092c:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8000930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
							}
							// checa colisão no eixo x FIM

							if ((pos_figura_y - figuras_em_tela_display[j].posicao[1]) > 0){
 8000934:	f9b7 1116 	ldrsh.w	r1, [r7, #278]	@ 0x116
 8000938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800093c:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 8000940:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	4403      	add	r3, r0
 800094e:	330a      	adds	r3, #10
 8000950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000954:	1acb      	subs	r3, r1, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	dd0a      	ble.n	8000970 <vTask_Display+0x364>
								f = d;
 800095a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800095e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000962:	e009      	b.n	8000978 <vTask_Display+0x36c>
 8000964:	20000678 	.word	0x20000678
 8000968:	20000648 	.word	0x20000648
 800096c:	2000064c 	.word	0x2000064c
							} else{
								f = e;
 8000970:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000974:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
							}
							// checa colisão no eixo y FIM
							if (c && f){ // se tem colisão entre figuras
 8000978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800097c:	2b00      	cmp	r3, #0
 800097e:	d06d      	beq.n	8000a5c <vTask_Display+0x450>
 8000980:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000984:	2b00      	cmp	r3, #0
 8000986:	d069      	beq.n	8000a5c <vTask_Display+0x450>
								// as figuras colididas são impressas com base nas suas camadas
								if(figuras_em_tela_display[j].camada == camada){
 8000988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800098c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000990:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	440b      	add	r3, r1
 800099e:	3314      	adds	r3, #20
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d157      	bne.n	8000a5c <vTask_Display+0x450>
									xQueueSendToBack(fila_colisao,&(figura_em_display.id),0);
 80009ac:	4b7c      	ldr	r3, [pc, #496]	@ (8000ba0 <vTask_Display+0x594>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80009b4:	f103 0115 	add.w	r1, r3, #21
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	f005 fbbc 	bl	8006138 <xQueueGenericSend>
									xQueueSendToBack(fila_colisao,&(figuras_em_tela_display[j].id),0);
 80009c0:	4b77      	ldr	r3, [pc, #476]	@ (8000ba0 <vTask_Display+0x594>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f107 0110 	add.w	r1, r7, #16
 80009c8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	3310      	adds	r3, #16
 80009d6:	440b      	add	r3, r1
 80009d8:	1d59      	adds	r1, r3, #5
 80009da:	2300      	movs	r3, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	f005 fbab 	bl	8006138 <xQueueGenericSend>
									ST7735_draw_figure((uint32_t)figuras_em_tela_display[j].posicao[0], (uint32_t)figuras_em_tela_display[j].posicao[1], figuras_em_tela_display[j].figura, figuras_em_tela_display[j].cor);
 80009e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009e6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80009ea:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3308      	adds	r3, #8
 80009fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fe:	461c      	mov	r4, r3
 8000a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a04:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000a08:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	330a      	adds	r3, #10
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	461d      	mov	r5, r3
 8000a1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a22:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000a26:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	3310      	adds	r3, #16
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a3e:	f5a3 7090 	sub.w	r0, r3, #288	@ 0x120
 8000a42:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	4403      	add	r3, r0
 8000a50:	9100      	str	r1, [sp, #0]
 8000a52:	cb0c      	ldmia	r3, {r2, r3}
 8000a54:	4629      	mov	r1, r5
 8000a56:	4620      	mov	r0, r4
 8000a58:	f002 f94d 	bl	8002cf6 <ST7735_draw_figure>
				for (int j = 0; j < NR_ITENS_DISPLAY; j++){
 8000a5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a60:	3301      	adds	r3, #1
 8000a62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000a66:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	f77f aeac 	ble.w	80007c8 <vTask_Display+0x1bc>
			for (int camada = 0; camada < NR_CAMADAS_DISPLAY; camada++){
 8000a70:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a74:	3301      	adds	r3, #1
 8000a76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000a7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	f77f ae9e 	ble.w	80007c0 <vTask_Display+0x1b4>
							}
						}
					}
				}
			}
			status_imprimir_objetos = xQueueReceive(fila_movimento,&figura_em_display,0);
 8000a84:	4b47      	ldr	r3, [pc, #284]	@ (8000ba4 <vTask_Display+0x598>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fcf2 	bl	8006478 <xQueueReceive>
 8000a94:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
		while (status_imprimir_objetos == pdPASS)
 8000a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f43f adf2 	beq.w	8000686 <vTask_Display+0x7a>
		}

		while (status_deletar_objetos == pdPASS){
 8000aa2:	e06a      	b.n	8000b7a <vTask_Display+0x56e>
					ST7735_FillRectangle((uint16_t)figuras_em_tela_display[figura_em_display_deletar].posicao[0], (uint16_t)figuras_em_tela_display[figura_em_display_deletar].posicao[1], (uint16_t)figuras_em_tela_display[figura_em_display_deletar].figura.width, (uint16_t)figuras_em_tela_display[figura_em_display_deletar].figura.height, ST7735_BLACK);
 8000aa4:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000aae:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	440b      	add	r3, r1
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	4413      	add	r3, r2
 8000abc:	3308      	adds	r3, #8
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	b298      	uxth	r0, r3
 8000ac4:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ace:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	440b      	add	r3, r1
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	330a      	adds	r3, #10
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	b299      	uxth	r1, r3
 8000ae4:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000ae8:	461c      	mov	r4, r3
 8000aea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000aee:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000af2:	4623      	mov	r3, r4
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4423      	add	r3, r4
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461d      	mov	r5, r3
 8000b00:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000b04:	461c      	mov	r4, r3
 8000b06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b0a:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000b0e:	4623      	mov	r3, r4
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4423      	add	r3, r4
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	4413      	add	r3, r2
 8000b18:	3301      	adds	r3, #1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4613      	mov	r3, r2
 8000b24:	462a      	mov	r2, r5
 8000b26:	f002 f843 	bl	8002bb0 <ST7735_FillRectangle>
					figuras_em_tela[figura_em_display_deletar] = 0;
 8000b2a:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000b34:	443b      	add	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	f843 2c60 	str.w	r2, [r3, #-96]
					figuras_em_tela_display[figura_em_display_deletar] = zero_tela_;
 8000b3c:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000b40:	4619      	mov	r1, r3
 8000b42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b46:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	440b      	add	r3, r1
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <vTask_Display+0x59c>)
 8000b56:	461c      	mov	r4, r3
 8000b58:	4615      	mov	r5, r2
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b62:	e884 0003 	stmia.w	r4, {r0, r1}
					status_deletar_objetos = xQueueReceive(fila_movimento_deletar,&figura_em_display_deletar,0);
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <vTask_Display+0x5a0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f107 01f3 	add.w	r1, r7, #243	@ 0xf3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f005 fc81 	bl	8006478 <xQueueReceive>
 8000b76:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
		while (status_deletar_objetos == pdPASS){
 8000b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d090      	beq.n	8000aa4 <vTask_Display+0x498>
		}
		xSemaphoreGive(semaforo_uso_display);
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <vTask_Display+0x5a4>)
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f005 fad4 	bl	8006138 <xQueueGenericSend>
		vTaskDelayUntil( &xLastWakeTime,(8 / portTICK_RATE_MS));
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2108      	movs	r1, #8
 8000b96:	4618      	mov	r0, r3
 8000b98:	f006 f9a4 	bl	8006ee4 <vTaskDelayUntil>
		xSemaphoreTake(semaforo_uso_display,portMAX_DELAY);  // <- gambiarra para não colocar outra estrutura só para texto, "depois" arrumo
 8000b9c:	e557      	b.n	800064e <vTask_Display+0x42>
 8000b9e:	bf00      	nop
 8000ba0:	20000650 	.word	0x20000650
 8000ba4:	20000648 	.word	0x20000648
 8000ba8:	20000680 	.word	0x20000680
 8000bac:	2000064c 	.word	0x2000064c
 8000bb0:	20000678 	.word	0x20000678

08000bb4 <vTask_Colisao>:
	}
}

void vTask_Colisao(void *pvParameters){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	uint8_t obj_id_1;
	uint8_t obj_id_2;
	uint8_t mensagem_explosao = MENSAGEM_ASTEROIDE_EXPLOSAO;
 8000bbc:	23ff      	movs	r3, #255	@ 0xff
 8000bbe:	72bb      	strb	r3, [r7, #10]
	uint8_t contar_colisao = verdadeiro;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
	uint8_t conta_tempo_nova_colisao_asteroide_nave = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73bb      	strb	r3, [r7, #14]
	uint8_t nr_tamanho_lista_colisao=0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	737b      	strb	r3, [r7, #13]

	while(xQueueReceive(fila_colisao,&obj_id_1,0) == pdPASS){
 8000bcc:	bf00      	nop
 8000bce:	4b81      	ldr	r3, [pc, #516]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f107 010c 	add.w	r1, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f005 fc4d 	bl	8006478 <xQueueReceive>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d0f4      	beq.n	8000bce <vTask_Colisao+0x1a>

	}

	while(1){
		xQueueReceive(fila_colisao,&obj_id_1,portMAX_DELAY);
 8000be4:	4b7b      	ldr	r3, [pc, #492]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f107 010c 	add.w	r1, r7, #12
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 fc41 	bl	8006478 <xQueueReceive>
		xQueueReceive(fila_colisao,&obj_id_2,portMAX_DELAY);
 8000bf6:	4b77      	ldr	r3, [pc, #476]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f107 010b 	add.w	r1, r7, #11
 8000bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fc38 	bl	8006478 <xQueueReceive>

		if(((obj_id_1 == Nave_obj)||(obj_id_2 == Nave_obj))&&(((obj_id_1 >= Asteroide_1_obj)&&(obj_id_1 <= Asteroide_4_obj))||((obj_id_2 >= Asteroide_1_obj)&&(obj_id_2 <= Asteroide_4_obj)))&&(contar_colisao)){
 8000c08:	7b3b      	ldrb	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <vTask_Colisao+0x62>
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f040 8083 	bne.w	8000d1c <vTask_Colisao+0x168>
 8000c16:	7b3b      	ldrb	r3, [r7, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <vTask_Colisao+0x6e>
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d905      	bls.n	8000c2e <vTask_Colisao+0x7a>
 8000c22:	7afb      	ldrb	r3, [r7, #11]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d079      	beq.n	8000d1c <vTask_Colisao+0x168>
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d876      	bhi.n	8000d1c <vTask_Colisao+0x168>
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d073      	beq.n	8000d1c <vTask_Colisao+0x168>
			if((obj_id_1 >= Asteroide_1_obj)&&(obj_id_1 <= Asteroide_4_obj)){
 8000c34:	7b3b      	ldrb	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d013      	beq.n	8000c62 <vTask_Colisao+0xae>
 8000c3a:	7b3b      	ldrb	r3, [r7, #12]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d810      	bhi.n	8000c62 <vTask_Colisao+0xae>
				xQueueSendToBack(fila_asteroide_atingido,&mensagem_explosao,0);
 8000c40:	4b65      	ldr	r3, [pc, #404]	@ (8000dd8 <vTask_Colisao+0x224>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	f107 010a 	add.w	r1, r7, #10
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f005 fa74 	bl	8006138 <xQueueGenericSend>
				xQueueSendToBack(fila_asteroide_atingido,&obj_id_1,0);
 8000c50:	4b61      	ldr	r3, [pc, #388]	@ (8000dd8 <vTask_Colisao+0x224>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f107 010c 	add.w	r1, r7, #12
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f005 fa6c 	bl	8006138 <xQueueGenericSend>
 8000c60:	e015      	b.n	8000c8e <vTask_Colisao+0xda>
			}
			else if((obj_id_2 >= Asteroide_1_obj)&&(obj_id_2 <= Asteroide_4_obj)){
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d012      	beq.n	8000c8e <vTask_Colisao+0xda>
 8000c68:	7afb      	ldrb	r3, [r7, #11]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d80f      	bhi.n	8000c8e <vTask_Colisao+0xda>
				xQueueSendToBack(fila_asteroide_atingido,&mensagem_explosao,0);
 8000c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <vTask_Colisao+0x224>)
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	f107 010a 	add.w	r1, r7, #10
 8000c76:	2300      	movs	r3, #0
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f005 fa5d 	bl	8006138 <xQueueGenericSend>
				xQueueSendToBack(fila_asteroide_atingido,&obj_id_2,0);
 8000c7e:	4b56      	ldr	r3, [pc, #344]	@ (8000dd8 <vTask_Colisao+0x224>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	f107 010b 	add.w	r1, r7, #11
 8000c86:	2300      	movs	r3, #0
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f005 fa55 	bl	8006138 <xQueueGenericSend>
			}
			xSemaphoreGive(semaforo_nave_bate);
 8000c8e:	4b53      	ldr	r3, [pc, #332]	@ (8000ddc <vTask_Colisao+0x228>)
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	f005 fa4e 	bl	8006138 <xQueueGenericSend>
			contar_colisao = falso;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
			while(nr_tamanho_lista_colisao < NR_MAX_ITENS_COLIDIDOS){
 8000ca0:	e037      	b.n	8000d12 <vTask_Colisao+0x15e>
				xQueueReceive(fila_colisao,&obj_id_1,0);
 8000ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f107 010c 	add.w	r1, r7, #12
 8000caa:	2200      	movs	r2, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f005 fbe3 	bl	8006478 <xQueueReceive>
				xQueueReceive(fila_colisao,&obj_id_2,0);
 8000cb2:	4b48      	ldr	r3, [pc, #288]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f107 010b 	add.w	r1, r7, #11
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 fbdb 	bl	8006478 <xQueueReceive>
				if(((obj_id_1 == Nave_obj)||(obj_id_2 == Nave_obj))&&(((obj_id_1 >= Asteroide_1_obj)&&(obj_id_1 <= Asteroide_4_obj))||((obj_id_2 >= Asteroide_1_obj)&&(obj_id_2 <= Asteroide_4_obj)))&&(contar_colisao)){
 8000cc2:	7b3b      	ldrb	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <vTask_Colisao+0x11a>
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10e      	bne.n	8000cec <vTask_Colisao+0x138>
 8000cce:	7b3b      	ldrb	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <vTask_Colisao+0x126>
 8000cd4:	7b3b      	ldrb	r3, [r7, #12]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d905      	bls.n	8000ce6 <vTask_Colisao+0x132>
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <vTask_Colisao+0x138>
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d802      	bhi.n	8000cec <vTask_Colisao+0x138>
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10f      	bne.n	8000d0c <vTask_Colisao+0x158>

				}
				else{
					xQueueSendToBack(fila_colisao,&obj_id_1,0);
 8000cec:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	f107 010c 	add.w	r1, r7, #12
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f005 fa1e 	bl	8006138 <xQueueGenericSend>
					xQueueSendToBack(fila_colisao,&obj_id_2,0);
 8000cfc:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <vTask_Colisao+0x220>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	f107 010b 	add.w	r1, r7, #11
 8000d04:	2300      	movs	r3, #0
 8000d06:	2200      	movs	r2, #0
 8000d08:	f005 fa16 	bl	8006138 <xQueueGenericSend>
				}
				nr_tamanho_lista_colisao++;
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	737b      	strb	r3, [r7, #13]
			while(nr_tamanho_lista_colisao < NR_MAX_ITENS_COLIDIDOS){
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d9c4      	bls.n	8000ca2 <vTask_Colisao+0xee>
			}
			nr_tamanho_lista_colisao = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	737b      	strb	r3, [r7, #13]
			//
			//ST7735_WriteString(12, 63,"bateu", Font_7x10, ST7735_WHITE, ST7735_BLACK);
		}

		if(((obj_id_2 == Tiro_vertical_obj)|(obj_id_1 == Tiro_horizontal_obj)||(obj_id_1 == Tiro_vertical_obj)||(obj_id_2 == Tiro_horizontal_obj))&&(((obj_id_1 >= Asteroide_1_obj)&&(obj_id_1 <= Asteroide_4_obj))||((obj_id_2 >= Asteroide_1_obj)&&(obj_id_2 <= Asteroide_4_obj)))){
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	bf0c      	ite	eq
 8000d22:	2301      	moveq	r3, #1
 8000d24:	2300      	movne	r3, #0
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	7b3b      	ldrb	r3, [r7, #12]
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	bf0c      	ite	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	2300      	movne	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d106      	bne.n	8000d4a <vTask_Colisao+0x196>
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d003      	beq.n	8000d4a <vTask_Colisao+0x196>
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	f040 809c 	bne.w	8000e82 <vTask_Colisao+0x2ce>
 8000d4a:	7b3b      	ldrb	r3, [r7, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <vTask_Colisao+0x1a2>
 8000d50:	7b3b      	ldrb	r3, [r7, #12]
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d907      	bls.n	8000d66 <vTask_Colisao+0x1b2>
 8000d56:	7afb      	ldrb	r3, [r7, #11]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8092 	beq.w	8000e82 <vTask_Colisao+0x2ce>
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	f200 808e 	bhi.w	8000e82 <vTask_Colisao+0x2ce>
			xSemaphoreGive(semaforo_jogador_ganhou_ponto);
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <vTask_Colisao+0x22c>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f005 f9e2 	bl	8006138 <xQueueGenericSend>
			if((obj_id_2 == Tiro_vertical_obj)||(obj_id_2 == Tiro_horizontal_obj)){
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d002      	beq.n	8000d80 <vTask_Colisao+0x1cc>
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d108      	bne.n	8000d92 <vTask_Colisao+0x1de>
				xQueueSendToBack(fila_tiro_antigiu,&obj_id_2,0);
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <vTask_Colisao+0x230>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	f107 010b 	add.w	r1, r7, #11
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f005 f9d4 	bl	8006138 <xQueueGenericSend>
 8000d90:	e007      	b.n	8000da2 <vTask_Colisao+0x1ee>
			} else{
				xQueueSendToBack(fila_asteroide_atingido,&obj_id_2,0);
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <vTask_Colisao+0x224>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f107 010b 	add.w	r1, r7, #11
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f005 f9cb 	bl	8006138 <xQueueGenericSend>
			}
			if((obj_id_1 == Tiro_vertical_obj)||(obj_id_1 == Tiro_horizontal_obj)){
 8000da2:	7b3b      	ldrb	r3, [r7, #12]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d002      	beq.n	8000dae <vTask_Colisao+0x1fa>
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d108      	bne.n	8000dc0 <vTask_Colisao+0x20c>
				xQueueSendToBack(fila_tiro_antigiu,&obj_id_1,0);
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <vTask_Colisao+0x230>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f107 010c 	add.w	r1, r7, #12
 8000db6:	2300      	movs	r3, #0
 8000db8:	2200      	movs	r2, #0
 8000dba:	f005 f9bd 	bl	8006138 <xQueueGenericSend>
 8000dbe:	e007      	b.n	8000dd0 <vTask_Colisao+0x21c>
			} else{
				xQueueSendToBack(fila_asteroide_atingido,&obj_id_1,0);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <vTask_Colisao+0x224>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	f107 010c 	add.w	r1, r7, #12
 8000dc8:	2300      	movs	r3, #0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f005 f9b4 	bl	8006138 <xQueueGenericSend>
			}
			while(nr_tamanho_lista_colisao < NR_MAX_ITENS_COLIDIDOS){ //teste inicio
 8000dd0:	e052      	b.n	8000e78 <vTask_Colisao+0x2c4>
 8000dd2:	bf00      	nop
 8000dd4:	20000650 	.word	0x20000650
 8000dd8:	2000065c 	.word	0x2000065c
 8000ddc:	2000066c 	.word	0x2000066c
 8000de0:	20000674 	.word	0x20000674
 8000de4:	20000660 	.word	0x20000660
				xQueueReceive(fila_colisao,&obj_id_1,0);
 8000de8:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <vTask_Colisao+0x2f8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f107 010c 	add.w	r1, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 fb40 	bl	8006478 <xQueueReceive>
				xQueueReceive(fila_colisao,&obj_id_2,0);
 8000df8:	4b2c      	ldr	r3, [pc, #176]	@ (8000eac <vTask_Colisao+0x2f8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f107 010b 	add.w	r1, r7, #11
 8000e00:	2200      	movs	r2, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fb38 	bl	8006478 <xQueueReceive>
				if(((obj_id_2 == Tiro_vertical_obj)|(obj_id_1 == Tiro_horizontal_obj)||(obj_id_1 == Tiro_vertical_obj)||(obj_id_2 == Tiro_horizontal_obj))&&(((obj_id_1 >= 1)&&(obj_id_1 <= 4))||((obj_id_2 >= 1)&&(obj_id_2 <= 4)))&&(contar_colisao)){
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2301      	moveq	r3, #1
 8000e10:	2300      	movne	r3, #0
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	7b3b      	ldrb	r3, [r7, #12]
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <vTask_Colisao+0x280>
 8000e28:	7b3b      	ldrb	r3, [r7, #12]
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d002      	beq.n	8000e34 <vTask_Colisao+0x280>
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d10e      	bne.n	8000e52 <vTask_Colisao+0x29e>
 8000e34:	7b3b      	ldrb	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <vTask_Colisao+0x28c>
 8000e3a:	7b3b      	ldrb	r3, [r7, #12]
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d905      	bls.n	8000e4c <vTask_Colisao+0x298>
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <vTask_Colisao+0x29e>
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d802      	bhi.n	8000e52 <vTask_Colisao+0x29e>
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <vTask_Colisao+0x2be>

				}
				else{
					xQueueSendToBack(fila_colisao,&obj_id_1,0);
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <vTask_Colisao+0x2f8>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f005 f96b 	bl	8006138 <xQueueGenericSend>
					xQueueSendToBack(fila_colisao,&obj_id_2,0);
 8000e62:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <vTask_Colisao+0x2f8>)
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	f107 010b 	add.w	r1, r7, #11
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f005 f963 	bl	8006138 <xQueueGenericSend>
				}
				nr_tamanho_lista_colisao++;
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	3301      	adds	r3, #1
 8000e76:	737b      	strb	r3, [r7, #13]
			while(nr_tamanho_lista_colisao < NR_MAX_ITENS_COLIDIDOS){ //teste inicio
 8000e78:	7b7b      	ldrb	r3, [r7, #13]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	d9b4      	bls.n	8000de8 <vTask_Colisao+0x234>
			}
			nr_tamanho_lista_colisao = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	737b      	strb	r3, [r7, #13]
		} //teste fim


		// cronômetro para a próxima ação de colisão
		xQueueReceive(fila_tempo,&obj_id_1,portMAX_DELAY);
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <vTask_Colisao+0x2fc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f107 010c 	add.w	r1, r7, #12
 8000e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 faf2 	bl	8006478 <xQueueReceive>
		conta_tempo_nova_colisao_asteroide_nave++;
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	3301      	adds	r3, #1
 8000e98:	73bb      	strb	r3, [r7, #14]
		if(conta_tempo_nova_colisao_asteroide_nave == 30){
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	2b1e      	cmp	r3, #30
 8000e9e:	f47f aea1 	bne.w	8000be4 <vTask_Colisao+0x30>
			conta_tempo_nova_colisao_asteroide_nave = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73bb      	strb	r3, [r7, #14]
			contar_colisao = verdadeiro;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
		xQueueReceive(fila_colisao,&obj_id_1,portMAX_DELAY);
 8000eaa:	e69b      	b.n	8000be4 <vTask_Colisao+0x30>
 8000eac:	20000650 	.word	0x20000650
 8000eb0:	20000644 	.word	0x20000644

08000eb4 <vTask_Nave_Mover>:
	}

}

void vTask_Nave_Mover(void *pvParameters)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	uint8_t x = Nave.Nave_display.posicao[0];
 8000ebc:	4b54      	ldr	r3, [pc, #336]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000ebe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ec2:	75fb      	strb	r3, [r7, #23]
	uint8_t y = Nave.Nave_display.posicao[1];
 8000ec4:	4b52      	ldr	r3, [pc, #328]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000ec6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000eca:	75bb      	strb	r3, [r7, #22]
	uint32_t dif_eixoX;
	uint32_t dif_eixoY;
	uint8_t enviar = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	757b      	strb	r3, [r7, #21]

	xQueueSendToBack(fila_movimento, &(Nave.Nave_display), portMAX_DELAY);
 8000ed0:	4b50      	ldr	r3, [pc, #320]	@ (8001014 <vTask_Nave_Mover+0x160>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eda:	494f      	ldr	r1, [pc, #316]	@ (8001018 <vTask_Nave_Mover+0x164>)
 8000edc:	f005 f92c 	bl	8006138 <xQueueGenericSend>

	while(1)
	{

		dif_eixoX = (1<<12) - valor_ADC[1];// media_eixoX;
 8000ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800101c <vTask_Nave_Mover+0x168>)
 8000ee2:	885b      	ldrh	r3, [r3, #2]
 8000ee4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000ee8:	613b      	str	r3, [r7, #16]
		dif_eixoY = (1<<12) - valor_ADC[0];//media_eixoY;
 8000eea:	4b4c      	ldr	r3, [pc, #304]	@ (800101c <vTask_Nave_Mover+0x168>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000ef2:	60fb      	str	r3, [r7, #12]

		Nave.Nave_display.pos_anterior[0] = x;
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	4b45      	ldr	r3, [pc, #276]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000efa:	821a      	strh	r2, [r3, #16]
		Nave.Nave_display.pos_anterior[1] = y;
 8000efc:	7dbb      	ldrb	r3, [r7, #22]
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	4b43      	ldr	r3, [pc, #268]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f02:	825a      	strh	r2, [r3, #18]

		if(dif_eixoX < 1800)   // aprox. 200 de segurança
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8000f0a:	d214      	bcs.n	8000f36 <vTask_Nave_Mover+0x82>
		{
			if(x>=0)
			{
				x--;
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
				Nave.Nave_display.figura = tela_nave_180;
 8000f12:	4b3f      	ldr	r3, [pc, #252]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f14:	4a42      	ldr	r2, [pc, #264]	@ (8001020 <vTask_Nave_Mover+0x16c>)
 8000f16:	3304      	adds	r3, #4
 8000f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1c:	e883 0003 	stmia.w	r3, {r0, r1}
				Nave.direcao = horizontal_negativo;
 8000f20:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	771a      	strb	r2, [r3, #28]
			}
			if (x<=0)
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <vTask_Nave_Mover+0x7c>
			{
				x = 150;
 8000f2c:	2396      	movs	r3, #150	@ 0x96
 8000f2e:	75fb      	strb	r3, [r7, #23]
			}
			enviar = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	757b      	strb	r3, [r7, #21]
 8000f34:	e01b      	b.n	8000f6e <vTask_Nave_Mover+0xba>
		}
		else if(dif_eixoX > 3800)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	f640 62d8 	movw	r2, #3800	@ 0xed8
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d916      	bls.n	8000f6e <vTask_Nave_Mover+0xba>
		{
			if(x<=150)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b96      	cmp	r3, #150	@ 0x96
 8000f44:	d80c      	bhi.n	8000f60 <vTask_Nave_Mover+0xac>
			{
				x++;
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	75fb      	strb	r3, [r7, #23]
				Nave.Nave_display.figura  = tela_nave_0;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f4e:	4a35      	ldr	r2, [pc, #212]	@ (8001024 <vTask_Nave_Mover+0x170>)
 8000f50:	3304      	adds	r3, #4
 8000f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f56:	e883 0003 	stmia.w	r3, {r0, r1}
				Nave.direcao = horizontal_positivo;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	771a      	strb	r2, [r3, #28]
			}
			if(x>=151)
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b96      	cmp	r3, #150	@ 0x96
 8000f64:	d901      	bls.n	8000f6a <vTask_Nave_Mover+0xb6>
			{
				x = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
			}
			enviar = 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	757b      	strb	r3, [r7, #21]
		}
		if(dif_eixoY < 1800)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8000f74:	d217      	bcs.n	8000fa6 <vTask_Nave_Mover+0xf2>
		{
			if(y>0)
 8000f76:	7dbb      	ldrb	r3, [r7, #22]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00c      	beq.n	8000f96 <vTask_Nave_Mover+0xe2>
			{
				y--;
 8000f7c:	7dbb      	ldrb	r3, [r7, #22]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	75bb      	strb	r3, [r7, #22]
				Nave.Nave_display.figura  = tela_nave_90;
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f84:	4a28      	ldr	r2, [pc, #160]	@ (8001028 <vTask_Nave_Mover+0x174>)
 8000f86:	3304      	adds	r3, #4
 8000f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f8c:	e883 0003 	stmia.w	r3, {r0, r1}
				Nave.direcao = vertical_negativo;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	771a      	strb	r2, [r3, #28]
			}
			if (y<=0)
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <vTask_Nave_Mover+0xec>
			{
				y = 119;
 8000f9c:	2377      	movs	r3, #119	@ 0x77
 8000f9e:	75bb      	strb	r3, [r7, #22]
			}
			enviar = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	757b      	strb	r3, [r7, #21]
 8000fa4:	e01b      	b.n	8000fde <vTask_Nave_Mover+0x12a>
		}
		else if(dif_eixoY > 3800)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f640 62d8 	movw	r2, #3800	@ 0xed8
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d916      	bls.n	8000fde <vTask_Nave_Mover+0x12a>
		{
			if(y<=121)
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	2b79      	cmp	r3, #121	@ 0x79
 8000fb4:	d80c      	bhi.n	8000fd0 <vTask_Nave_Mover+0x11c>
			{
				y++;
 8000fb6:	7dbb      	ldrb	r3, [r7, #22]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	75bb      	strb	r3, [r7, #22]
				Nave.Nave_display.figura  = tela_nave_270;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800102c <vTask_Nave_Mover+0x178>)
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc6:	e883 0003 	stmia.w	r3, {r0, r1}
				Nave.direcao = vertical_positivo;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	771a      	strb	r2, [r3, #28]
			}
			if(y>=120)
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	2b77      	cmp	r3, #119	@ 0x77
 8000fd4:	d901      	bls.n	8000fda <vTask_Nave_Mover+0x126>
			{
				y = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75bb      	strb	r3, [r7, #22]
			}
			enviar = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	757b      	strb	r3, [r7, #21]
		}

		Nave.Nave_display.posicao[0] = x;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000fe4:	819a      	strh	r2, [r3, #12]
		Nave.Nave_display.posicao[1] = y;
 8000fe6:	7dbb      	ldrb	r3, [r7, #22]
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <vTask_Nave_Mover+0x15c>)
 8000fec:	81da      	strh	r2, [r3, #14]

		if(enviar)
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <vTask_Nave_Mover+0x150>
		{
			xQueueSendToBack(fila_movimento, &(Nave.Nave_display), portMAX_DELAY);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <vTask_Nave_Mover+0x160>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffe:	4906      	ldr	r1, [pc, #24]	@ (8001018 <vTask_Nave_Mover+0x164>)
 8001000:	f005 f89a 	bl	8006138 <xQueueGenericSend>
		}
		enviar = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	757b      	strb	r3, [r7, #21]

		vTaskDelay(20);
 8001008:	2014      	movs	r0, #20
 800100a:	f005 ffeb 	bl	8006fe4 <vTaskDelay>
		dif_eixoX = (1<<12) - valor_ADC[1];// media_eixoX;
 800100e:	e767      	b.n	8000ee0 <vTask_Nave_Mover+0x2c>
 8001010:	20000698 	.word	0x20000698
 8001014:	20000648 	.word	0x20000648
 8001018:	2000069c 	.word	0x2000069c
 800101c:	200006bc 	.word	0x200006bc
 8001020:	2000045c 	.word	0x2000045c
 8001024:	2000040c 	.word	0x2000040c
 8001028:	20000434 	.word	0x20000434
 800102c:	20000484 	.word	0x20000484

08001030 <vTask_Asteroide_Mover>:
	}
}


void vTask_Asteroide_Mover(void *pvParameters)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0aa      	sub	sp, #168	@ 0xa8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint16_t nr_aleatorio = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	BaseType_t status_fila_tempo;
	BaseType_t status_fila_atingido;
	uint16_t tempo = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2


	//importante, cópia dos asteroides para muda-los de posição.
	Asteroide_Struct asteroide_vtask[NR_MAX_ASTEROIDE];

	xQueueReceive(fila_obj_Asteroide, &asteroide_vtask, portMAX_DELAY);
 8001044:	4bbc      	ldr	r3, [pc, #752]	@ (8001338 <vTask_Asteroide_Mover+0x308>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f107 0108 	add.w	r1, r7, #8
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	4618      	mov	r0, r3
 8001052:	f005 fa11 	bl	8006478 <xQueueReceive>

	xQueueSendToBack(fila_movimento, &(asteroide_vtask[0]), portMAX_DELAY);
 8001056:	4bb9      	ldr	r3, [pc, #740]	@ (800133c <vTask_Asteroide_Mover+0x30c>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f107 0108 	add.w	r1, r7, #8
 800105e:	2300      	movs	r3, #0
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	f005 f868 	bl	8006138 <xQueueGenericSend>
	xQueueSendToBack(fila_movimento, &(asteroide_vtask[1]), portMAX_DELAY);
 8001068:	4bb4      	ldr	r3, [pc, #720]	@ (800133c <vTask_Asteroide_Mover+0x30c>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	f103 0120 	add.w	r1, r3, #32
 8001074:	2300      	movs	r3, #0
 8001076:	f04f 32ff 	mov.w	r2, #4294967295
 800107a:	f005 f85d 	bl	8006138 <xQueueGenericSend>
	xQueueSendToBack(fila_movimento, &(asteroide_vtask[2]), portMAX_DELAY);
 800107e:	4baf      	ldr	r3, [pc, #700]	@ (800133c <vTask_Asteroide_Mover+0x30c>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800108a:	2300      	movs	r3, #0
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	f005 f852 	bl	8006138 <xQueueGenericSend>
	xQueueSendToBack(fila_movimento, &(asteroide_vtask[3]), portMAX_DELAY);
 8001094:	4ba9      	ldr	r3, [pc, #676]	@ (800133c <vTask_Asteroide_Mover+0x30c>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80010a0:	2300      	movs	r3, #0
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	f005 f847 	bl	8006138 <xQueueGenericSend>

	while(1)
	{
		status_fila_atingido = xQueueReceive(fila_asteroide_atingido,&asteroide_colidido,0);
 80010aa:	4ba5      	ldr	r3, [pc, #660]	@ (8001340 <vTask_Asteroide_Mover+0x310>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80010b2:	2200      	movs	r2, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 f9df 	bl	8006478 <xQueueReceive>
 80010ba:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		if(status_fila_atingido == pdPASS){
 80010be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d14d      	bne.n	8001162 <vTask_Asteroide_Mover+0x132>
			if(asteroide_colidido == MENSAGEM_ASTEROIDE_EXPLOSAO){ //debug
 80010c6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80010ca:	2bff      	cmp	r3, #255	@ 0xff
 80010cc:	d111      	bne.n	80010f2 <vTask_Asteroide_Mover+0xc2>
				xQueueReceive(fila_asteroide_atingido,&asteroide_colidido,portMAX_DELAY);
 80010ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001340 <vTask_Asteroide_Mover+0x310>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 f9cc 	bl	8006478 <xQueueReceive>
				asteroide_vtask[asteroide_colidido - 1].vida = 1;
 80010e0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80010e4:	3b01      	subs	r3, #1
 80010e6:	015b      	lsls	r3, r3, #5
 80010e8:	33a8      	adds	r3, #168	@ 0xa8
 80010ea:	443b      	add	r3, r7
 80010ec:	3ba0      	subs	r3, #160	@ 0xa0
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
			}


			asteroide_vtask[asteroide_colidido - 1].vida = asteroide_vtask[asteroide_colidido - 1].vida - 1;
 80010f2:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80010f6:	3b01      	subs	r3, #1
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	33a8      	adds	r3, #168	@ 0xa8
 80010fc:	443b      	add	r3, r7
 80010fe:	3ba0      	subs	r3, #160	@ 0xa0
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001106:	3b01      	subs	r3, #1
 8001108:	3a01      	subs	r2, #1
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	015b      	lsls	r3, r3, #5
 800110e:	33a8      	adds	r3, #168	@ 0xa8
 8001110:	443b      	add	r3, r7
 8001112:	3ba0      	subs	r3, #160	@ 0xa0
 8001114:	701a      	strb	r2, [r3, #0]
			if(asteroide_vtask[asteroide_colidido - 1].vida == 1<<8){
				asteroide_vtask[asteroide_colidido - 1].vida = 0;
			}
			if (asteroide_vtask[asteroide_colidido - 1].vida == 0){
 8001116:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800111a:	3b01      	subs	r3, #1
 800111c:	015b      	lsls	r3, r3, #5
 800111e:	33a8      	adds	r3, #168	@ 0xa8
 8001120:	443b      	add	r3, r7
 8001122:	3ba0      	subs	r3, #160	@ 0xa0
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d11b      	bne.n	8001162 <vTask_Asteroide_Mover+0x132>
				asteroide_vtask[asteroide_colidido - 1].habilitado = 0; // o -1 se deve porque o id dos asteroides começa depois do id da nave e no vetor de asteroides eles começam do 0
 800112a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800112e:	3b01      	subs	r3, #1
 8001130:	015b      	lsls	r3, r3, #5
 8001132:	33a8      	adds	r3, #168	@ 0xa8
 8001134:	443b      	add	r3, r7
 8001136:	3b9e      	subs	r3, #158	@ 0x9e
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
				id_asteroide = asteroide_vtask[asteroide_colidido - 1].Asteroide_display.id;
 800113c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001140:	3b01      	subs	r3, #1
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	33a8      	adds	r3, #168	@ 0xa8
 8001146:	443b      	add	r3, r7
 8001148:	3b83      	subs	r3, #131	@ 0x83
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
				xQueueSendToBack(fila_movimento_deletar,&(id_asteroide),portMAX_DELAY);
 8001150:	4b7c      	ldr	r3, [pc, #496]	@ (8001344 <vTask_Asteroide_Mover+0x314>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f107 0191 	add.w	r1, r7, #145	@ 0x91
 8001158:	2300      	movs	r3, #0
 800115a:	f04f 32ff 	mov.w	r2, #4294967295
 800115e:	f004 ffeb 	bl	8006138 <xQueueGenericSend>
			}
		}

		status_fila_tempo = xQueueReceive(fila_tempo,&(nr_aleatorio),0); 	// recebe um tick de tempo
 8001162:	4b79      	ldr	r3, [pc, #484]	@ (8001348 <vTask_Asteroide_Mover+0x318>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f107 0192 	add.w	r1, r7, #146	@ 0x92
 800116a:	2200      	movs	r2, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f005 f983 	bl	8006478 <xQueueReceive>
 8001172:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		if (status_fila_tempo == pdPASS){
 8001176:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800117a:	2b01      	cmp	r3, #1
 800117c:	d104      	bne.n	8001188 <vTask_Asteroide_Mover+0x158>
			tempo++;
 800117e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001182:	3301      	adds	r3, #1
 8001184:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
		}

		if(tempo == 10){ 													// a cada 20 segundos habilita um novo asteroide
 8001188:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800118c:	2b0a      	cmp	r3, #10
 800118e:	f040 8183 	bne.w	8001498 <vTask_Asteroide_Mover+0x468>
			tempo = 0; 														// reset
 8001192:	2300      	movs	r3, #0
 8001194:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
			for (uint8_t i = 0; i< NR_MAX_ASTEROIDE; i++) {					// checa todos os asteroides
 8001198:	2300      	movs	r3, #0
 800119a:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 800119e:	e176      	b.n	800148e <vTask_Asteroide_Mover+0x45e>

				if (asteroide_vtask[i].habilitado == 0) { // se nao tiver criado ainda
 80011a0:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 80011a4:	015b      	lsls	r3, r3, #5
 80011a6:	33a8      	adds	r3, #168	@ 0xa8
 80011a8:	443b      	add	r3, r7
 80011aa:	3b9e      	subs	r3, #158	@ 0x9e
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 8168 	bne.w	8001484 <vTask_Asteroide_Mover+0x454>
					Asteroide_Construtor_Basico(&(asteroide_vtask[i]),i+Asteroide_1_obj);
 80011b4:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	441a      	add	r2, r3
 80011c0:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f000 fa2e 	bl	800162c <Asteroide_Construtor_Basico>
					asteroide_vtask[i].habilitado = 1;						// habilita-o
 80011d0:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	33a8      	adds	r3, #168	@ 0xa8
 80011d8:	443b      	add	r3, r7
 80011da:	3b9e      	subs	r3, #158	@ 0x9e
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]

					// Valores da nave atual (ADC), para criar um novo asteroide.
					nr_aleatorio = valor_ADC[0]*10 - valor_ADC[1]*7;
 80011e0:	4b5a      	ldr	r3, [pc, #360]	@ (800134c <vTask_Asteroide_Mover+0x31c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b57      	ldr	r3, [pc, #348]	@ (800134c <vTask_Asteroide_Mover+0x31c>)
 80011f0:	885b      	ldrh	r3, [r3, #2]
 80011f2:	4619      	mov	r1, r3
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1acb      	subs	r3, r1, r3
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
					/*
					 * valores aleatórios para criação de um novo asteroide.
					 *
					 * Problema!!! -> Caso a nave se manter parada, os asteroides vao sair do mesmo ponto!!! (Arrumar se quiser)
					 */
					switch(nr_aleatorio%4){
 8001202:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	f200 80de 	bhi.w	80013cc <vTask_Asteroide_Mover+0x39c>
 8001210:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <vTask_Asteroide_Mover+0x1e8>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	08001229 	.word	0x08001229
 800121c:	08001281 	.word	0x08001281
 8001220:	080012d3 	.word	0x080012d3
 8001224:	08001361 	.word	0x08001361
						case(horizontal_positivo):
							posicao_x = 159;
 8001228:	239f      	movs	r3, #159	@ 0x9f
 800122a:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
							posicao_y = nr_aleatorio%128;
 800122e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001238:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							velocidade_x = nr_aleatorio%2 - 2;
 800123c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3b02      	subs	r3, #2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
							velocidade_y = nr_aleatorio%3 - 1;
 8001250:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8001254:	4b3e      	ldr	r3, [pc, #248]	@ (8001350 <vTask_Asteroide_Mover+0x320>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	0859      	lsrs	r1, r3, #1
 800125c:	460b      	mov	r3, r1
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	440b      	add	r3, r1
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3b01      	subs	r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
							figura = tela_asteroide_1;
 8001270:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <vTask_Asteroide_Mover+0x324>)
 8001272:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127a:	e883 0003 	stmia.w	r3, {r0, r1}
							break;
 800127e:	e0b9      	b.n	80013f4 <vTask_Asteroide_Mover+0x3c4>
						case(horizontal_negativo):
							posicao_x = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
							posicao_y = nr_aleatorio%128;
 8001286:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001290:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							velocidade_x = nr_aleatorio%2;
 8001294:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001298:	b25b      	sxtb	r3, r3
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
							velocidade_y = nr_aleatorio%3 - 1;
 80012a2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80012a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <vTask_Asteroide_Mover+0x320>)
 80012a8:	fba3 1302 	umull	r1, r3, r3, r2
 80012ac:	0859      	lsrs	r1, r3, #1
 80012ae:	460b      	mov	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	440b      	add	r3, r1
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
							figura = tela_asteroide_2;
 80012c2:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <vTask_Asteroide_Mover+0x328>)
 80012c4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80012c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012cc:	e883 0003 	stmia.w	r3, {r0, r1}
							break;
 80012d0:	e090      	b.n	80013f4 <vTask_Asteroide_Mover+0x3c4>
						case(vertical_positivo):
							posicao_x = nr_aleatorio%160;
 80012d2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80012d6:	4b21      	ldr	r3, [pc, #132]	@ (800135c <vTask_Asteroide_Mover+0x32c>)
 80012d8:	fba3 1302 	umull	r1, r3, r3, r2
 80012dc:	09d9      	lsrs	r1, r3, #7
 80012de:	460b      	mov	r3, r1
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
							posicao_y = 124;
 80012ee:	237c      	movs	r3, #124	@ 0x7c
 80012f0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							velocidade_x = nr_aleatorio%3 - 1;
 80012f4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <vTask_Asteroide_Mover+0x320>)
 80012fa:	fba3 1302 	umull	r1, r3, r3, r2
 80012fe:	0859      	lsrs	r1, r3, #1
 8001300:	460b      	mov	r3, r1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	440b      	add	r3, r1
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
							velocidade_y = nr_aleatorio%2 - 2;
 8001314:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3b02      	subs	r3, #2
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
							figura = tela_asteroide_2;
 8001328:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <vTask_Asteroide_Mover+0x328>)
 800132a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800132e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001332:	e883 0003 	stmia.w	r3, {r0, r1}
							break;
 8001336:	e05d      	b.n	80013f4 <vTask_Asteroide_Mover+0x3c4>
 8001338:	20000658 	.word	0x20000658
 800133c:	20000648 	.word	0x20000648
 8001340:	2000065c 	.word	0x2000065c
 8001344:	2000064c 	.word	0x2000064c
 8001348:	20000644 	.word	0x20000644
 800134c:	200006bc 	.word	0x200006bc
 8001350:	aaaaaaab 	.word	0xaaaaaaab
 8001354:	20000304 	.word	0x20000304
 8001358:	20000374 	.word	0x20000374
 800135c:	cccccccd 	.word	0xcccccccd
						case(vertical_negativo):
							posicao_x = nr_aleatorio%160;
 8001360:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8001364:	4bac      	ldr	r3, [pc, #688]	@ (8001618 <vTask_Asteroide_Mover+0x5e8>)
 8001366:	fba3 1302 	umull	r1, r3, r3, r2
 800136a:	09d9      	lsrs	r1, r3, #7
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	015b      	lsls	r3, r3, #5
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
							posicao_y = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							velocidade_x = nr_aleatorio%3 - 1;
 8001382:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8001386:	4ba5      	ldr	r3, [pc, #660]	@ (800161c <vTask_Asteroide_Mover+0x5ec>)
 8001388:	fba3 1302 	umull	r1, r3, r3, r2
 800138c:	0859      	lsrs	r1, r3, #1
 800138e:	460b      	mov	r3, r1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	440b      	add	r3, r1
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3b01      	subs	r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
							velocidade_y = nr_aleatorio%3;
 80013a2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80013a6:	4b9d      	ldr	r3, [pc, #628]	@ (800161c <vTask_Asteroide_Mover+0x5ec>)
 80013a8:	fba3 1302 	umull	r1, r3, r3, r2
 80013ac:	0859      	lsrs	r1, r3, #1
 80013ae:	460b      	mov	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
							figura = tela_asteroide_4;
 80013bc:	4a98      	ldr	r2, [pc, #608]	@ (8001620 <vTask_Asteroide_Mover+0x5f0>)
 80013be:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80013c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c6:	e883 0003 	stmia.w	r3, {r0, r1}
							break;
 80013ca:	e013      	b.n	80013f4 <vTask_Asteroide_Mover+0x3c4>
						default:
							posicao_x = 3;
 80013cc:	2303      	movs	r3, #3
 80013ce:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
							posicao_y = 120;
 80013d2:	2378      	movs	r3, #120	@ 0x78
 80013d4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							velocidade_x = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
							velocidade_y = -2;
 80013de:	23fe      	movs	r3, #254	@ 0xfe
 80013e0:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
							figura = tela_asteroide_4;
 80013e4:	4a8e      	ldr	r2, [pc, #568]	@ (8001620 <vTask_Asteroide_Mover+0x5f0>)
 80013e6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80013ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ee:	e883 0003 	stmia.w	r3, {r0, r1}
							break;
 80013f2:	bf00      	nop
					}
					// definindo valores do asteroide
					asteroide_vtask[i].Asteroide_display.figura = figura;
 80013f4:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	33a8      	adds	r3, #168	@ 0xa8
 80013fc:	443b      	add	r3, r7
 80013fe:	3b98      	subs	r3, #152	@ 0x98
 8001400:	461a      	mov	r2, r3
 8001402:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001406:	e893 0003 	ldmia.w	r3, {r0, r1}
 800140a:	e882 0003 	stmia.w	r2, {r0, r1}
					asteroide_vtask[i].Asteroide_display.posicao[0] = posicao_x;
 800140e:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8001412:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 8001416:	b212      	sxth	r2, r2
 8001418:	015b      	lsls	r3, r3, #5
 800141a:	33a8      	adds	r3, #168	@ 0xa8
 800141c:	443b      	add	r3, r7
 800141e:	3b90      	subs	r3, #144	@ 0x90
 8001420:	801a      	strh	r2, [r3, #0]
					asteroide_vtask[i].Asteroide_display.posicao[1] = posicao_y;
 8001422:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8001426:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800142a:	b212      	sxth	r2, r2
 800142c:	015b      	lsls	r3, r3, #5
 800142e:	33a8      	adds	r3, #168	@ 0xa8
 8001430:	443b      	add	r3, r7
 8001432:	3b8e      	subs	r3, #142	@ 0x8e
 8001434:	801a      	strh	r2, [r3, #0]
					asteroide_vtask[i].Asteroide_display.pos_anterior[0] = posicao_x;
 8001436:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800143a:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 800143e:	b212      	sxth	r2, r2
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	33a8      	adds	r3, #168	@ 0xa8
 8001444:	443b      	add	r3, r7
 8001446:	3b8c      	subs	r3, #140	@ 0x8c
 8001448:	801a      	strh	r2, [r3, #0]
					asteroide_vtask[i].Asteroide_display.pos_anterior[0] = posicao_y;
 800144a:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800144e:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8001452:	b212      	sxth	r2, r2
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	33a8      	adds	r3, #168	@ 0xa8
 8001458:	443b      	add	r3, r7
 800145a:	3b8c      	subs	r3, #140	@ 0x8c
 800145c:	801a      	strh	r2, [r3, #0]
					asteroide_vtask[i].velocidade[0] = velocidade_x;
 800145e:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	33a8      	adds	r3, #168	@ 0xa8
 8001466:	443b      	add	r3, r7
 8001468:	3b9d      	subs	r3, #157	@ 0x9d
 800146a:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 800146e:	701a      	strb	r2, [r3, #0]
					asteroide_vtask[i].velocidade[1] = velocidade_y;
 8001470:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8001474:	015b      	lsls	r3, r3, #5
 8001476:	33a8      	adds	r3, #168	@ 0xa8
 8001478:	443b      	add	r3, r7
 800147a:	3b9c      	subs	r3, #156	@ 0x9c
 800147c:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 8001480:	701a      	strb	r2, [r3, #0]
					break;
 8001482:	e009      	b.n	8001498 <vTask_Asteroide_Mover+0x468>
			for (uint8_t i = 0; i< NR_MAX_ASTEROIDE; i++) {					// checa todos os asteroides
 8001484:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8001488:	3301      	adds	r3, #1
 800148a:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 800148e:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8001492:	2b03      	cmp	r3, #3
 8001494:	f67f ae84 	bls.w	80011a0 <vTask_Asteroide_Mover+0x170>
			}
		}

		// parte de movimentar os asteroides

		for(uint8_t i = 0; i< NR_MAX_ASTEROIDE; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800149e:	e0b2      	b.n	8001606 <vTask_Asteroide_Mover+0x5d6>
		{

			if(asteroide_vtask[i].habilitado)
 80014a0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	33a8      	adds	r3, #168	@ 0xa8
 80014a8:	443b      	add	r3, r7
 80014aa:	3b9e      	subs	r3, #158	@ 0x9e
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80a4 	beq.w	80015fc <vTask_Asteroide_Mover+0x5cc>
			{
				asteroide_vtask[i].Asteroide_display.pos_anterior[0] = asteroide_vtask[i].Asteroide_display.posicao[0];
 80014b4:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80014b8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80014bc:	0152      	lsls	r2, r2, #5
 80014be:	32a8      	adds	r2, #168	@ 0xa8
 80014c0:	443a      	add	r2, r7
 80014c2:	3a90      	subs	r2, #144	@ 0x90
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	33a8      	adds	r3, #168	@ 0xa8
 80014cc:	443b      	add	r3, r7
 80014ce:	3b8c      	subs	r3, #140	@ 0x8c
 80014d0:	801a      	strh	r2, [r3, #0]
				asteroide_vtask[i].Asteroide_display.pos_anterior[1] = asteroide_vtask[i].Asteroide_display.posicao[1];
 80014d2:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80014d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80014da:	0152      	lsls	r2, r2, #5
 80014dc:	32a8      	adds	r2, #168	@ 0xa8
 80014de:	443a      	add	r2, r7
 80014e0:	3a8e      	subs	r2, #142	@ 0x8e
 80014e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	33a8      	adds	r3, #168	@ 0xa8
 80014ea:	443b      	add	r3, r7
 80014ec:	3b8a      	subs	r3, #138	@ 0x8a
 80014ee:	801a      	strh	r2, [r3, #0]
				asteroide_vtask[i].Asteroide_display.posicao[0] = asteroide_vtask[i].Asteroide_display.posicao[0] + asteroide_vtask[i].velocidade[0];
 80014f0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	33a8      	adds	r3, #168	@ 0xa8
 80014f8:	443b      	add	r3, r7
 80014fa:	3b90      	subs	r3, #144	@ 0x90
 80014fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001500:	b29a      	uxth	r2, r3
 8001502:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	33a8      	adds	r3, #168	@ 0xa8
 800150a:	443b      	add	r3, r7
 800150c:	3b9d      	subs	r3, #157	@ 0x9d
 800150e:	f993 3000 	ldrsb.w	r3, [r3]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800151c:	b212      	sxth	r2, r2
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	33a8      	adds	r3, #168	@ 0xa8
 8001522:	443b      	add	r3, r7
 8001524:	3b90      	subs	r3, #144	@ 0x90
 8001526:	801a      	strh	r2, [r3, #0]
				asteroide_vtask[i].Asteroide_display.posicao[1] = asteroide_vtask[i].Asteroide_display.posicao[1] + asteroide_vtask[i].velocidade[1];
 8001528:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	33a8      	adds	r3, #168	@ 0xa8
 8001530:	443b      	add	r3, r7
 8001532:	3b8e      	subs	r3, #142	@ 0x8e
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800153e:	015b      	lsls	r3, r3, #5
 8001540:	33a8      	adds	r3, #168	@ 0xa8
 8001542:	443b      	add	r3, r7
 8001544:	3b9c      	subs	r3, #156	@ 0x9c
 8001546:	f993 3000 	ldrsb.w	r3, [r3]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
 8001550:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001554:	b212      	sxth	r2, r2
 8001556:	015b      	lsls	r3, r3, #5
 8001558:	33a8      	adds	r3, #168	@ 0xa8
 800155a:	443b      	add	r3, r7
 800155c:	3b8e      	subs	r3, #142	@ 0x8e
 800155e:	801a      	strh	r2, [r3, #0]

				if ((asteroide_vtask[i].Asteroide_display.posicao[0]  >= 148) || (asteroide_vtask[i].Asteroide_display.posicao[0]  <= 2)|| (asteroide_vtask[i].Asteroide_display.posicao[1] >= 124)||(asteroide_vtask[i].Asteroide_display.posicao[1] <= 2))
 8001560:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	33a8      	adds	r3, #168	@ 0xa8
 8001568:	443b      	add	r3, r7
 800156a:	3b90      	subs	r3, #144	@ 0x90
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	2b93      	cmp	r3, #147	@ 0x93
 8001572:	dc1d      	bgt.n	80015b0 <vTask_Asteroide_Mover+0x580>
 8001574:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	33a8      	adds	r3, #168	@ 0xa8
 800157c:	443b      	add	r3, r7
 800157e:	3b90      	subs	r3, #144	@ 0x90
 8001580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001584:	2b02      	cmp	r3, #2
 8001586:	dd13      	ble.n	80015b0 <vTask_Asteroide_Mover+0x580>
 8001588:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	33a8      	adds	r3, #168	@ 0xa8
 8001590:	443b      	add	r3, r7
 8001592:	3b8e      	subs	r3, #142	@ 0x8e
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	2b7b      	cmp	r3, #123	@ 0x7b
 800159a:	dc09      	bgt.n	80015b0 <vTask_Asteroide_Mover+0x580>
 800159c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80015a0:	015b      	lsls	r3, r3, #5
 80015a2:	33a8      	adds	r3, #168	@ 0xa8
 80015a4:	443b      	add	r3, r7
 80015a6:	3b8e      	subs	r3, #142	@ 0x8e
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	dc17      	bgt.n	80015e0 <vTask_Asteroide_Mover+0x5b0>
				{
					asteroide_vtask[i].habilitado = 0;
 80015b0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80015b4:	015b      	lsls	r3, r3, #5
 80015b6:	33a8      	adds	r3, #168	@ 0xa8
 80015b8:	443b      	add	r3, r7
 80015ba:	3b9e      	subs	r3, #158	@ 0x9e
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
					id_asteroide = i + Asteroide_1_obj;
 80015c0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
					xQueueSendToBack(fila_movimento_deletar,&(id_asteroide),portMAX_DELAY);
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <vTask_Asteroide_Mover+0x5f4>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	f107 0191 	add.w	r1, r7, #145	@ 0x91
 80015d4:	2300      	movs	r3, #0
 80015d6:	f04f 32ff 	mov.w	r2, #4294967295
 80015da:	f004 fdad 	bl	8006138 <xQueueGenericSend>
 80015de:	e00d      	b.n	80015fc <vTask_Asteroide_Mover+0x5cc>
				}
				else
				{
					xQueueSendToBack(fila_movimento,&(asteroide_vtask[i].Asteroide_display),portMAX_DELAY);
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <vTask_Asteroide_Mover+0x5f8>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80015e8:	f107 0208 	add.w	r2, r7, #8
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	3308      	adds	r3, #8
 80015f0:	18d1      	adds	r1, r2, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	f004 fd9e 	bl	8006138 <xQueueGenericSend>
		for(uint8_t i = 0; i< NR_MAX_ASTEROIDE; i++)
 80015fc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001600:	3301      	adds	r3, #1
 8001602:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001606:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800160a:	2b03      	cmp	r3, #3
 800160c:	f67f af48 	bls.w	80014a0 <vTask_Asteroide_Mover+0x470>
				}
			}
		}
		vTaskDelay(250);
 8001610:	20fa      	movs	r0, #250	@ 0xfa
 8001612:	f005 fce7 	bl	8006fe4 <vTaskDelay>
		status_fila_atingido = xQueueReceive(fila_asteroide_atingido,&asteroide_colidido,0);
 8001616:	e548      	b.n	80010aa <vTask_Asteroide_Mover+0x7a>
 8001618:	cccccccd 	.word	0xcccccccd
 800161c:	aaaaaaab 	.word	0xaaaaaaab
 8001620:	200003e4 	.word	0x200003e4
 8001624:	2000064c 	.word	0x2000064c
 8001628:	20000648 	.word	0x20000648

0800162c <Asteroide_Construtor_Basico>:
}

// gera os asteroides e qual a figura deles

void Asteroide_Construtor_Basico(Asteroide_Struct *asteroide, uint8_t obj_id)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	switch (obj_id) // tem que ser os mesmos ids anteriormente definidos
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b04      	cmp	r3, #4
 800163c:	d01c      	beq.n	8001678 <Asteroide_Construtor_Basico+0x4c>
 800163e:	2b04      	cmp	r3, #4
 8001640:	dc25      	bgt.n	800168e <Asteroide_Construtor_Basico+0x62>
 8001642:	2b01      	cmp	r3, #1
 8001644:	d002      	beq.n	800164c <Asteroide_Construtor_Basico+0x20>
 8001646:	2b02      	cmp	r3, #2
 8001648:	d00b      	beq.n	8001662 <Asteroide_Construtor_Basico+0x36>
 800164a:	e020      	b.n	800168e <Asteroide_Construtor_Basico+0x62>
	{
		case (Asteroide_1_obj):
			asteroide->Asteroide_display.figura = tela_asteroide_1;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a24      	ldr	r2, [pc, #144]	@ (80016e0 <Asteroide_Construtor_Basico+0xb4>)
 8001650:	3308      	adds	r3, #8
 8001652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001656:	e883 0003 	stmia.w	r3, {r0, r1}
			asteroide->Asteroide_display.id = Asteroide_1_obj;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	775a      	strb	r2, [r3, #29]
			//asteroide->Asteroide_display.cor = ST7735_CYAN;
			break;
 8001660:	e015      	b.n	800168e <Asteroide_Construtor_Basico+0x62>
		case (Asteroide_2_obj):
			asteroide->Asteroide_display.figura = tela_asteroide_2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1f      	ldr	r2, [pc, #124]	@ (80016e4 <Asteroide_Construtor_Basico+0xb8>)
 8001666:	3308      	adds	r3, #8
 8001668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166c:	e883 0003 	stmia.w	r3, {r0, r1}
			asteroide->Asteroide_display.id = Asteroide_2_obj;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	775a      	strb	r2, [r3, #29]
			//asteroide->Asteroide_display.cor = ST7735_BLUE;
			break;
 8001676:	e00a      	b.n	800168e <Asteroide_Construtor_Basico+0x62>
			//asteroide->Asteroide_display.figura = tela_asteroide_3;
			//asteroide->Asteroide_display.id = Asteroide_3_obj;
			//asteroide->Asteroide_display.cor = ST7735_RED;
			//break;
		case (Asteroide_4_obj):
			asteroide->Asteroide_display.figura = tela_asteroide_4;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <Asteroide_Construtor_Basico+0xbc>)
 800167c:	3308      	adds	r3, #8
 800167e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001682:	e883 0003 	stmia.w	r3, {r0, r1}
			asteroide->Asteroide_display.id = Asteroide_4_obj;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2204      	movs	r2, #4
 800168a:	775a      	strb	r2, [r3, #29]
			//asteroide->Asteroide_display.cor = ST7735_WHITE;
			break;
 800168c:	bf00      	nop
	}

	asteroide->Asteroide_display.cor = ST7735_WHITE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001694:	619a      	str	r2, [r3, #24]
	asteroide->Asteroide_display.camada = 0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	771a      	strb	r2, [r3, #28]
	asteroide->Asteroide_display.pos_anterior[0] = 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	829a      	strh	r2, [r3, #20]
	asteroide->Asteroide_display.pos_anterior[1] = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	82da      	strh	r2, [r3, #22]
	asteroide->Asteroide_display.posicao[0] = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	821a      	strh	r2, [r3, #16]
	asteroide->Asteroide_display.posicao[1] = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	825a      	strh	r2, [r3, #18]
	asteroide->velocidade[0] = 2;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	70da      	strb	r2, [r3, #3]
	asteroide->velocidade[1] = 2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	711a      	strb	r2, [r3, #4]
	asteroide->dano = 2;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	705a      	strb	r2, [r3, #1]
	asteroide->habilitado = 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	709a      	strb	r2, [r3, #2]
	asteroide->vida = 2;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000304 	.word	0x20000304
 80016e4:	20000374 	.word	0x20000374
 80016e8:	200003e4 	.word	0x200003e4

080016ec <vTask_Tiro>:


/*
 * Task de tiro, tava dando problema, mas adicionei uma fila de tempo e vTaskDelay(14), parou de ficar tiro na tela (Não da de entender!!!!)
 */
void vTask_Tiro(void *pvParameter) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b096      	sub	sp, #88	@ 0x58
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	Tiro_Struct Tiro;

	xQueueReceive(fila_obj_Tiro, &Tiro, portMAX_DELAY);
 80016f4:	4bbf      	ldr	r3, [pc, #764]	@ (80019f4 <vTask_Tiro+0x308>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f107 010c 	add.w	r1, r7, #12
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	4618      	mov	r0, r3
 8001702:	f004 feb9 	bl	8006478 <xQueueReceive>

	uint8_t obj_tiro; // id para tiro excluido da tela
	BaseType_t status_fila_tiro_atingiu;

	// caracteristicas do tiro
	uint8_t tempo_tiro_x = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t tempo_tiro_y = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	uint8_t tiro_tela_x = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	uint8_t tiro_tela_y = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	uint8_t direcao_tiro;

	BaseType_t status_fila_tempo;

	uint8_t x_tiro_horizontal = Tiro.Tiro_display[0].posicao[0];
 800171e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	72bb      	strb	r3, [r7, #10]
	uint8_t y_tiro_horizontal = Tiro.Tiro_display[0].posicao[1];
 8001726:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800172a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	uint8_t x_tiro_vertical = Tiro.Tiro_display[1].posicao[0];
 800172e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001732:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	uint8_t y_tiro_vertical = Tiro.Tiro_display[1].posicao[1];
 8001736:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800173a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[0]), portMAX_DELAY);
 800173e:	4bae      	ldr	r3, [pc, #696]	@ (80019f8 <vTask_Tiro+0x30c>)
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	1d19      	adds	r1, r3, #4
 8001748:	2300      	movs	r3, #0
 800174a:	f04f 32ff 	mov.w	r2, #4294967295
 800174e:	f004 fcf3 	bl	8006138 <xQueueGenericSend>
	xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[1]), portMAX_DELAY);
 8001752:	4ba9      	ldr	r3, [pc, #676]	@ (80019f8 <vTask_Tiro+0x30c>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	f103 011c 	add.w	r1, r3, #28
 800175e:	2300      	movs	r3, #0
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	f004 fce8 	bl	8006138 <xQueueGenericSend>

	while (1) {
		status_fila_tiro_atingiu = xQueueReceive(fila_tiro_antigiu, &obj_tiro, 0);
 8001768:	4ba4      	ldr	r3, [pc, #656]	@ (80019fc <vTask_Tiro+0x310>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f107 010b 	add.w	r1, r7, #11
 8001770:	2200      	movs	r2, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fe80 	bl	8006478 <xQueueReceive>
 8001778:	64f8      	str	r0, [r7, #76]	@ 0x4c
		if (status_fila_tiro_atingiu == pdPASS) {
 800177a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800177c:	2b01      	cmp	r3, #1
 800177e:	d112      	bne.n	80017a6 <vTask_Tiro+0xba>
			if (obj_tiro == Tiro_horizontal_obj) {
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	2b06      	cmp	r3, #6
 8001784:	d103      	bne.n	800178e <vTask_Tiro+0xa2>
				Tiro.tiro_tela[0] = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800178c:	e002      	b.n	8001794 <vTask_Tiro+0xa8>
			} else {
				Tiro.tiro_tela[1] = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
			}
			xQueueSendToBack(fila_movimento_deletar, &(obj_tiro), portMAX_DELAY);
 8001794:	4b9a      	ldr	r3, [pc, #616]	@ (8001a00 <vTask_Tiro+0x314>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	f107 010b 	add.w	r1, r7, #11
 800179c:	2300      	movs	r3, #0
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	f004 fcc9 	bl	8006138 <xQueueGenericSend>
		}

		tiro_tela_x = Tiro.tiro_tela[0];
 80017a6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80017aa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		tiro_tela_y = Tiro.tiro_tela[1];
 80017ae:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80017b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

		if (tiro_tela_x || tiro_tela_y) {
 80017b6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d104      	bne.n	80017c8 <vTask_Tiro+0xdc>
 80017be:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80aa 	beq.w	800191c <vTask_Tiro+0x230>
			if (tiro_tela_x) {
 80017c8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d04a      	beq.n	8001866 <vTask_Tiro+0x17a>
				switch (Tiro.tiro_tela_direcao[0]) {
 80017d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <vTask_Tiro+0xf2>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d01c      	beq.n	8001816 <vTask_Tiro+0x12a>
 80017dc:	e043      	b.n	8001866 <vTask_Tiro+0x17a>
					case (horizontal_positivo): {
						Tiro.Tiro_display[0].pos_anterior[0] = x_tiro_horizontal;
 80017de:	7abb      	ldrb	r3, [r7, #10]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	83bb      	strh	r3, [r7, #28]
						x_tiro_horizontal = x_tiro_horizontal + 1;
 80017e4:	7abb      	ldrb	r3, [r7, #10]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	72bb      	strb	r3, [r7, #10]
						Tiro.Tiro_display[0].posicao[0] = x_tiro_horizontal;
 80017ec:	7abb      	ldrb	r3, [r7, #10]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	833b      	strh	r3, [r7, #24]
						if (x_tiro_horizontal >= 159) {
 80017f2:	7abb      	ldrb	r3, [r7, #10]
 80017f4:	2b9e      	cmp	r3, #158	@ 0x9e
 80017f6:	d903      	bls.n	8001800 <vTask_Tiro+0x114>
							Tiro.tiro_tela[0] = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
						} else {
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[0]), portMAX_DELAY);
						}
						break;
 80017fe:	e032      	b.n	8001866 <vTask_Tiro+0x17a>
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[0]), portMAX_DELAY);
 8001800:	4b7d      	ldr	r3, [pc, #500]	@ (80019f8 <vTask_Tiro+0x30c>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	1d19      	adds	r1, r3, #4
 800180a:	2300      	movs	r3, #0
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	f004 fc92 	bl	8006138 <xQueueGenericSend>
						break;
 8001814:	e027      	b.n	8001866 <vTask_Tiro+0x17a>
					}
					case (horizontal_negativo): {
						Tiro.Tiro_display[0].pos_anterior[0] = x_tiro_horizontal;
 8001816:	7abb      	ldrb	r3, [r7, #10]
 8001818:	b21b      	sxth	r3, r3
 800181a:	83bb      	strh	r3, [r7, #28]
						x_tiro_horizontal = x_tiro_horizontal - 1;
 800181c:	7abb      	ldrb	r3, [r7, #10]
 800181e:	3b01      	subs	r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	72bb      	strb	r3, [r7, #10]
						Tiro.Tiro_display[0].posicao[0] = x_tiro_horizontal;
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	b21b      	sxth	r3, r3
 8001828:	833b      	strh	r3, [r7, #24]
						if (x_tiro_horizontal <= 0) {
 800182a:	7abb      	ldrb	r3, [r7, #10]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10f      	bne.n	8001850 <vTask_Tiro+0x164>
							Tiro.tiro_tela[0] = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
							obj_tiro = Tiro.Tiro_display[0].id;
 8001836:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800183a:	72fb      	strb	r3, [r7, #11]
							xQueueSendToBack(fila_movimento_deletar, &(obj_tiro), portMAX_DELAY);
 800183c:	4b70      	ldr	r3, [pc, #448]	@ (8001a00 <vTask_Tiro+0x314>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	f107 010b 	add.w	r1, r7, #11
 8001844:	2300      	movs	r3, #0
 8001846:	f04f 32ff 	mov.w	r2, #4294967295
 800184a:	f004 fc75 	bl	8006138 <xQueueGenericSend>
						} else {
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[0]), portMAX_DELAY);
						}
						break;
 800184e:	e009      	b.n	8001864 <vTask_Tiro+0x178>
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[0]), portMAX_DELAY);
 8001850:	4b69      	ldr	r3, [pc, #420]	@ (80019f8 <vTask_Tiro+0x30c>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	1d19      	adds	r1, r3, #4
 800185a:	2300      	movs	r3, #0
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	f004 fc6a 	bl	8006138 <xQueueGenericSend>
						break;
 8001864:	bf00      	nop
					}
				}
			}
			if (tiro_tela_y) {
 8001866:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8108 	beq.w	8001a80 <vTask_Tiro+0x394>
				switch (Tiro.tiro_tela_direcao[1]) {
 8001870:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001874:	2b02      	cmp	r3, #2
 8001876:	d002      	beq.n	800187e <vTask_Tiro+0x192>
 8001878:	2b03      	cmp	r3, #3
 800187a:	d021      	beq.n	80018c0 <vTask_Tiro+0x1d4>
			if (tiro_tela_y) {
 800187c:	e100      	b.n	8001a80 <vTask_Tiro+0x394>
					case (vertical_positivo): {
						Tiro.Tiro_display[1].pos_anterior[1] = y_tiro_vertical;
 800187e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001882:	b21b      	sxth	r3, r3
 8001884:	86fb      	strh	r3, [r7, #54]	@ 0x36
						y_tiro_vertical = y_tiro_vertical + 1;
 8001886:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800188a:	3301      	adds	r3, #1
 800188c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
						Tiro.Tiro_display[1].posicao[1] = y_tiro_vertical;
 8001890:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001894:	b21b      	sxth	r3, r3
 8001896:	867b      	strh	r3, [r7, #50]	@ 0x32
						if (y_tiro_vertical == 160) {
 8001898:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800189c:	2ba0      	cmp	r3, #160	@ 0xa0
 800189e:	d103      	bne.n	80018a8 <vTask_Tiro+0x1bc>
							Tiro.tiro_tela[1] = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
						} else {
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[1]), portMAX_DELAY);
						}
						break;
 80018a6:	e038      	b.n	800191a <vTask_Tiro+0x22e>
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[1]), portMAX_DELAY);
 80018a8:	4b53      	ldr	r3, [pc, #332]	@ (80019f8 <vTask_Tiro+0x30c>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	f103 011c 	add.w	r1, r3, #28
 80018b4:	2300      	movs	r3, #0
 80018b6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ba:	f004 fc3d 	bl	8006138 <xQueueGenericSend>
						break;
 80018be:	e02c      	b.n	800191a <vTask_Tiro+0x22e>
					}
					case (vertical_negativo): {
						Tiro.Tiro_display[1].pos_anterior[1] = y_tiro_vertical;
 80018c0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
						y_tiro_vertical = y_tiro_vertical - 1;
 80018c8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018cc:	3b01      	subs	r3, #1
 80018ce:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
						Tiro.Tiro_display[1].posicao[1] = y_tiro_vertical;
 80018d2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	867b      	strh	r3, [r7, #50]	@ 0x32
						if (y_tiro_vertical == 0) {
 80018da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <vTask_Tiro+0x216>
							Tiro.tiro_tela[1] = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
							obj_tiro = Tiro.Tiro_display[1].id;
 80018e8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80018ec:	72fb      	strb	r3, [r7, #11]
							xQueueSendToBack(fila_movimento_deletar, &(obj_tiro), portMAX_DELAY);
 80018ee:	4b44      	ldr	r3, [pc, #272]	@ (8001a00 <vTask_Tiro+0x314>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	f107 010b 	add.w	r1, r7, #11
 80018f6:	2300      	movs	r3, #0
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	f004 fc1c 	bl	8006138 <xQueueGenericSend>
						} else {
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[1]), portMAX_DELAY);
						}
						break;
 8001900:	e00a      	b.n	8001918 <vTask_Tiro+0x22c>
							xQueueSendToBack(fila_movimento, &(Tiro.Tiro_display[1]), portMAX_DELAY);
 8001902:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <vTask_Tiro+0x30c>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	f103 011c 	add.w	r1, r3, #28
 800190e:	2300      	movs	r3, #0
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	f004 fc10 	bl	8006138 <xQueueGenericSend>
						break;
 8001918:	bf00      	nop
			if (tiro_tela_y) {
 800191a:	e0b1      	b.n	8001a80 <vTask_Tiro+0x394>
					}
				}
			}
		} else {
			status_fila_tempo = xQueueReceive(fila_tempo, &(x_tiro_horizontal), 0);  // recebe um tick de tempo
 800191c:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <vTask_Tiro+0x318>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f107 010a 	add.w	r1, r7, #10
 8001924:	2200      	movs	r2, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fda6 	bl	8006478 <xQueueReceive>
 800192c:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (status_fila_tempo == pdPASS) {
 800192e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001930:	2b01      	cmp	r3, #1
 8001932:	d109      	bne.n	8001948 <vTask_Tiro+0x25c>
				tempo_tiro_x++;
 8001934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001938:	3301      	adds	r3, #1
 800193a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				tempo_tiro_y++;
 800193e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001942:	3301      	adds	r3, #1
 8001944:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			}

			if (tempo_tiro_x == 20) {  // 200
 8001948:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800194c:	2b14      	cmp	r3, #20
 800194e:	f040 8097 	bne.w	8001a80 <vTask_Tiro+0x394>
				tempo_tiro_x = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				direcao_tiro = Nave.direcao;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <vTask_Tiro+0x31c>)
 800195a:	7f1b      	ldrb	r3, [r3, #28]
 800195c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				switch (direcao_tiro) {
 8001960:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001964:	2b03      	cmp	r3, #3
 8001966:	f200 808b 	bhi.w	8001a80 <vTask_Tiro+0x394>
 800196a:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <vTask_Tiro+0x284>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	08001981 	.word	0x08001981
 8001974:	080019bb 	.word	0x080019bb
 8001978:	08001a0d 	.word	0x08001a0d
 800197c:	08001a47 	.word	0x08001a47
					case (horizontal_positivo): {
						Tiro.tiro_tela[0] = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
						Tiro.tiro_tela_direcao[0] = horizontal_positivo;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
						x_tiro_horizontal = Nave.Nave_display.posicao[0] + 18;
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <vTask_Tiro+0x31c>)
 800198e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3312      	adds	r3, #18
 8001996:	b2db      	uxtb	r3, r3
 8001998:	72bb      	strb	r3, [r7, #10]
						y_tiro_horizontal = Nave.Nave_display.posicao[1] + 5;
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <vTask_Tiro+0x31c>)
 800199c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3305      	adds	r3, #5
 80019a4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
						Tiro.Tiro_display[0].posicao[1] = y_tiro_horizontal;
 80019a8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	837b      	strh	r3, [r7, #26]
						Tiro.Tiro_display[0].pos_anterior[1] = y_tiro_horizontal;
 80019b0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	83fb      	strh	r3, [r7, #30]
						break;
 80019b8:	e062      	b.n	8001a80 <vTask_Tiro+0x394>
					}
					case (horizontal_negativo): {
						Tiro.tiro_tela[0] = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
						Tiro.tiro_tela_direcao[0] = horizontal_negativo;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
						x_tiro_horizontal = Nave.Nave_display.posicao[0] - 6;
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <vTask_Tiro+0x31c>)
 80019c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3b06      	subs	r3, #6
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	72bb      	strb	r3, [r7, #10]
						y_tiro_horizontal = Nave.Nave_display.posicao[1] + 5;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <vTask_Tiro+0x31c>)
 80019d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3305      	adds	r3, #5
 80019de:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
						Tiro.Tiro_display[0].posicao[1] = y_tiro_horizontal;
 80019e2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	837b      	strh	r3, [r7, #26]
						Tiro.Tiro_display[0].pos_anterior[1] = y_tiro_horizontal;
 80019ea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	83fb      	strh	r3, [r7, #30]
						break;
 80019f2:	e045      	b.n	8001a80 <vTask_Tiro+0x394>
 80019f4:	20000654 	.word	0x20000654
 80019f8:	20000648 	.word	0x20000648
 80019fc:	20000660 	.word	0x20000660
 8001a00:	2000064c 	.word	0x2000064c
 8001a04:	20000644 	.word	0x20000644
 8001a08:	20000698 	.word	0x20000698
					}
					case (vertical_positivo): {
						Tiro.tiro_tela[1] = 1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
						Tiro.tiro_tela_direcao[1] = vertical_positivo;
 8001a12:	2302      	movs	r3, #2
 8001a14:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
						x_tiro_vertical = Nave.Nave_display.posicao[0] + 5;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <vTask_Tiro+0x39c>)
 8001a1a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3305      	adds	r3, #5
 8001a22:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
						y_tiro_vertical = Nave.Nave_display.posicao[1] + 18;
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <vTask_Tiro+0x39c>)
 8001a28:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	3312      	adds	r3, #18
 8001a30:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
						Tiro.Tiro_display[1].posicao[0] = x_tiro_vertical;
 8001a34:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	863b      	strh	r3, [r7, #48]	@ 0x30
						Tiro.Tiro_display[1].pos_anterior[0] = x_tiro_vertical;
 8001a3c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	86bb      	strh	r3, [r7, #52]	@ 0x34
						break;
 8001a44:	e01c      	b.n	8001a80 <vTask_Tiro+0x394>
					}
					case (vertical_negativo): {
						Tiro.tiro_tela[1] = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
						Tiro.tiro_tela_direcao[1] = vertical_negativo;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
						x_tiro_vertical = Nave.Nave_display.posicao[0] + 5;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <vTask_Tiro+0x39c>)
 8001a54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3305      	adds	r3, #5
 8001a5c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
						y_tiro_vertical = Nave.Nave_display.posicao[1] - 9;
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <vTask_Tiro+0x39c>)
 8001a62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3b09      	subs	r3, #9
 8001a6a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
						Tiro.Tiro_display[1].posicao[0] = x_tiro_vertical;
 8001a6e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	863b      	strh	r3, [r7, #48]	@ 0x30
						Tiro.Tiro_display[1].pos_anterior[0] = x_tiro_vertical;
 8001a76:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
						break;
 8001a7e:	bf00      	nop
					}
				}
			}
		}
		vTaskDelay(14);
 8001a80:	200e      	movs	r0, #14
 8001a82:	f005 faaf 	bl	8006fe4 <vTaskDelay>
		status_fila_tiro_atingiu = xQueueReceive(fila_tiro_antigiu, &obj_tiro, 0);
 8001a86:	e66f      	b.n	8001768 <vTask_Tiro+0x7c>
 8001a88:	20000698 	.word	0x20000698

08001a8c <vTask_Placar_Vida>:
	}
}


void vTask_Placar_Vida()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af04      	add	r7, sp, #16
	uint8_t vivo;

	//ST7735_WriteString(0, 0,"Vida:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
	//ST7735_write_nr(40, 0, Nave.vida_nave, Font_7x10, ST7735_WHITE, ST7735_BLACK);

	status_semaforo_nave_bate = xSemaphoreTake(semaforo_nave_bate,portMAX_DELAY);
 8001a92:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <vTask_Placar_Vida+0x118>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 fdce 	bl	800663c <xQueueSemaphoreTake>
 8001aa0:	60b8      	str	r0, [r7, #8]

	while(1)
	{
		Nave.vida_nave = 2;
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <vTask_Placar_Vida+0x11c>)
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	701a      	strb	r2, [r3, #0]
		pontuacao = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	70fb      	strb	r3, [r7, #3]
		vivo = verdadeiro;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]

		while(vivo)
 8001ab0:	e073      	b.n	8001b9a <vTask_Placar_Vida+0x10e>
		{
			ST7735_WriteString(0, 0,"Vida:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bac <vTask_Placar_Vida+0x120>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	9202      	str	r2, [sp, #8]
 8001ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001abc:	9201      	str	r2, [sp, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	9200      	str	r2, [sp, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb0 <vTask_Placar_Vida+0x124>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f001 f841 	bl	8002b50 <ST7735_WriteString>
			ST7735_write_nr(40, 0, Nave.vida_nave, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <vTask_Placar_Vida+0x11c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4b35      	ldr	r3, [pc, #212]	@ (8001bac <vTask_Placar_Vida+0x120>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	9202      	str	r2, [sp, #8]
 8001ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ade:	9201      	str	r2, [sp, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2028      	movs	r0, #40	@ 0x28
 8001aec:	f001 f976 	bl	8002ddc <ST7735_write_nr>
			//ST7735_WriteString(0, 25,"Placar:   ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
			ST7735_write_nr(0, 150, pontuacao, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <vTask_Placar_Vida+0x120>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	9202      	str	r2, [sp, #8]
 8001afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001afe:	9201      	str	r2, [sp, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	9200      	str	r2, [sp, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	460a      	mov	r2, r1
 8001b08:	2196      	movs	r1, #150	@ 0x96
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f001 f966 	bl	8002ddc <ST7735_write_nr>
			xSemaphoreTake(semaforo_uso_display,portMAX_DELAY);
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <vTask_Placar_Vida+0x128>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fd8f 	bl	800663c <xQueueSemaphoreTake>
			status_semaforo_jogador_ganhou_ponto = xSemaphoreTake(semaforo_jogador_ganhou_ponto,0);
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <vTask_Placar_Vida+0x12c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fd89 	bl	800663c <xQueueSemaphoreTake>
 8001b2a:	6078      	str	r0, [r7, #4]
			if(status_semaforo_jogador_ganhou_ponto == pdPASS)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d103      	bne.n	8001b3a <vTask_Placar_Vida+0xae>
			{
				pontuacao++;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	3301      	adds	r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	70fb      	strb	r3, [r7, #3]
			}

			// aqui, colocar um semáforo para uma função que ve uma colisão de nave e asteroide (Ajustada!!!)
			status_semaforo_nave_bate = xSemaphoreTake(semaforo_nave_bate,0);
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <vTask_Placar_Vida+0x118>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 fd7b 	bl	800663c <xQueueSemaphoreTake>
 8001b46:	60b8      	str	r0, [r7, #8]
			if (status_semaforo_nave_bate ==pdPASS)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <vTask_Placar_Vida+0xce>
			{
				Nave.vida_nave--;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <vTask_Placar_Vida+0x11c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <vTask_Placar_Vida+0x11c>)
 8001b58:	701a      	strb	r2, [r3, #0]

			}
			//ST7735_WriteString(0, 0,"Vida: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
			//ST7735_write_nr(63, 0, Nave.vida_nave, Font_7x10, ST7735_WHITE, ST7735_BLACK);
			if (Nave.vida_nave  == 0)
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <vTask_Placar_Vida+0x11c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d110      	bne.n	8001b84 <vTask_Placar_Vida+0xf8>
			{
				//xQueueSendToFront(fila_mensagens,&mensagens_enviar,portMAX_DELAY);
				xQueueSendToBack(fila_pontuacao, &pontuacao,portMAX_DELAY);
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <vTask_Placar_Vida+0x130>)
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	1cf9      	adds	r1, r7, #3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	f004 fae3 	bl	8006138 <xQueueGenericSend>
				xSemaphoreGive(semaforo_nave_explode);
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <vTask_Placar_Vida+0x134>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	f004 fadc 	bl	8006138 <xQueueGenericSend>
				vivo = falso;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
			}
			xSemaphoreGive(semaforo_uso_display); //<- a fazer certo, por agora só gambiarra
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <vTask_Placar_Vida+0x128>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f004 fad3 	bl	8006138 <xQueueGenericSend>
			vTaskDelay(300);
 8001b92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b96:	f005 fa25 	bl	8006fe4 <vTaskDelay>
		while(vivo)
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d188      	bne.n	8001ab2 <vTask_Placar_Vida+0x26>
		Nave.vida_nave = 2;
 8001ba0:	e77f      	b.n	8001aa2 <vTask_Placar_Vida+0x16>
 8001ba2:	bf00      	nop
 8001ba4:	2000066c 	.word	0x2000066c
 8001ba8:	20000698 	.word	0x20000698
 8001bac:	200004a4 	.word	0x200004a4
 8001bb0:	08009848 	.word	0x08009848
 8001bb4:	20000678 	.word	0x20000678
 8001bb8:	20000674 	.word	0x20000674
 8001bbc:	20000664 	.word	0x20000664
 8001bc0:	20000668 	.word	0x20000668

08001bc4 <vTask_Loop_Jogo>:
 */


// Loop principal do jogo, aqui é controlado todos os 3 estados.
void vTask_Loop_Jogo(void *pvPrameters)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	6078      	str	r0, [r7, #4]
	uint8_t estado = Primeiro_Estado;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
	uint8_t placar;

	vTaskSuspend(tarefa_placar_vida);
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <vTask_Loop_Jogo+0x8c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f005 fa3b 	bl	8007050 <vTaskSuspend>
	vTaskSuspend(tarefa_display);
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <vTask_Loop_Jogo+0x90>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fa36 	bl	8007050 <vTaskSuspend>
	vTaskSuspend(tarefa_mov_nave);
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <vTask_Loop_Jogo+0x94>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fa31 	bl	8007050 <vTaskSuspend>

	while(1)
	{
		switch(estado)
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d012      	beq.n	8001c1a <vTask_Loop_Jogo+0x56>
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	dc18      	bgt.n	8001c2a <vTask_Loop_Jogo+0x66>
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <vTask_Loop_Jogo+0x3e>
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d005      	beq.n	8001c0c <vTask_Loop_Jogo+0x48>
 8001c00:	e013      	b.n	8001c2a <vTask_Loop_Jogo+0x66>
		{
			case Primeiro_Estado:
				TelaInicial();
 8001c02:	f000 f82f 	bl	8001c64 <TelaInicial>
				estado = Segundo_Estado;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
				break;
 8001c0a:	e020      	b.n	8001c4e <vTask_Loop_Jogo+0x8a>
			case Segundo_Estado:
				placar = Jogar();
 8001c0c:	f000 f868 	bl	8001ce0 <Jogar>
 8001c10:	4603      	mov	r3, r0
 8001c12:	73bb      	strb	r3, [r7, #14]
				estado = Terceiro_Estado;
 8001c14:	2302      	movs	r3, #2
 8001c16:	73fb      	strb	r3, [r7, #15]
				break;
 8001c18:	e019      	b.n	8001c4e <vTask_Loop_Jogo+0x8a>
			case Terceiro_Estado:
				Tela_de_Morte(placar);
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f966 	bl	8001ef0 <Tela_de_Morte>
				estado = Primeiro_Estado;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
					  //ST7735_FillScreen(ST7735_BLACK);
					//  estado = Primeiro_Estado;
				  //}

				//estado = Primeiro_Estado;
				break;
 8001c28:	e011      	b.n	8001c4e <vTask_Loop_Jogo+0x8a>
			default:
				ST7735_WriteString(48, 59,"Nao era pra passar aqui (BUG)", Font_7x10, ST7735_RED, ST7735_BLACK);
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <vTask_Loop_Jogo+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	9202      	str	r2, [sp, #8]
 8001c30:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	9200      	str	r2, [sp, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <vTask_Loop_Jogo+0x9c>)
 8001c3e:	213b      	movs	r1, #59	@ 0x3b
 8001c40:	2030      	movs	r0, #48	@ 0x30
 8001c42:	f000 ff85 	bl	8002b50 <ST7735_WriteString>
				vTaskDelay(portMAX_DELAY);
 8001c46:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4a:	f005 f9cb 	bl	8006fe4 <vTaskDelay>
		switch(estado)
 8001c4e:	e7ce      	b.n	8001bee <vTask_Loop_Jogo+0x2a>
 8001c50:	20000628 	.word	0x20000628
 8001c54:	2000062c 	.word	0x2000062c
 8001c58:	20000630 	.word	0x20000630
 8001c5c:	200004a4 	.word	0x200004a4
 8001c60:	08009850 	.word	0x08009850

08001c64 <TelaInicial>:



// Figura da tela inicial do jogo LucasRoide
void TelaInicial()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af02      	add	r7, sp, #8
	ST7735_draw_figure(18, 9, tela_asteroide_1 , ST7735_WHITE); 				// 1
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <TelaInicial+0x70>)
 8001c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	cb0c      	ldmia	r3, {r2, r3}
 8001c74:	2109      	movs	r1, #9
 8001c76:	2012      	movs	r0, #18
 8001c78:	f001 f83d 	bl	8002cf6 <ST7735_draw_figure>
	//ST7735_draw_figure(65, 9, tela_asteroide_3 , ST7735_WHITE); 				// 3
	ST7735_draw_figure(112, 9, tela_asteroide_4 , ST7735_WHITE);				// 2
 8001c7c:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <TelaInicial+0x74>)
 8001c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c82:	9200      	str	r2, [sp, #0]
 8001c84:	cb0c      	ldmia	r3, {r2, r3}
 8001c86:	2109      	movs	r1, #9
 8001c88:	2070      	movs	r0, #112	@ 0x70
 8001c8a:	f001 f834 	bl	8002cf6 <ST7735_draw_figure>
	ST7735_draw_figure(0, 46, tela_inicial_figura2, ST7735_WHITE);				// meio
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <TelaInicial+0x78>)
 8001c90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c94:	9200      	str	r2, [sp, #0]
 8001c96:	cb0c      	ldmia	r3, {r2, r3}
 8001c98:	212e      	movs	r1, #46	@ 0x2e
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f001 f82b 	bl	8002cf6 <ST7735_draw_figure>
	ST7735_draw_figure(18, 88, tela_asteroide_4 , ST7735_WHITE);				// 4
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <TelaInicial+0x74>)
 8001ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca6:	9200      	str	r2, [sp, #0]
 8001ca8:	cb0c      	ldmia	r3, {r2, r3}
 8001caa:	2158      	movs	r1, #88	@ 0x58
 8001cac:	2012      	movs	r0, #18
 8001cae:	f001 f822 	bl	8002cf6 <ST7735_draw_figure>
	//ST7735_draw_figure(65, 88, tela_asteroide_3 , ST7735_WHITE);				// 3
	ST7735_draw_figure(112, 88, tela_asteroide_1 , ST7735_WHITE);				// 1
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <TelaInicial+0x70>)
 8001cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb8:	9200      	str	r2, [sp, #0]
 8001cba:	cb0c      	ldmia	r3, {r2, r3}
 8001cbc:	2158      	movs	r1, #88	@ 0x58
 8001cbe:	2070      	movs	r0, #112	@ 0x70
 8001cc0:	f001 f819 	bl	8002cf6 <ST7735_draw_figure>

	vTaskDelay(5000);
 8001cc4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001cc8:	f005 f98c 	bl	8006fe4 <vTaskDelay>
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000304 	.word	0x20000304
 8001cd8:	200003e4 	.word	0x200003e4
 8001cdc:	20000294 	.word	0x20000294

08001ce0 <Jogar>:



uint16_t Jogar()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0b2      	sub	sp, #200	@ 0xc8
 8001ce4:	af02      	add	r7, sp, #8
	uint16_t placar = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

	Nave.vida_nave = 2;
 8001cec:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <Jogar+0x1e8>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	701a      	strb	r2, [r3, #0]

	Nave.Nave_display.camada = 1;
 8001cf2:	4b75      	ldr	r3, [pc, #468]	@ (8001ec8 <Jogar+0x1e8>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	761a      	strb	r2, [r3, #24]
	Nave.Nave_display.cor = ST7735_WHITE;
 8001cf8:	4b73      	ldr	r3, [pc, #460]	@ (8001ec8 <Jogar+0x1e8>)
 8001cfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cfe:	615a      	str	r2, [r3, #20]
	Nave.Nave_display.id = Nave_obj;
 8001d00:	4b71      	ldr	r3, [pc, #452]	@ (8001ec8 <Jogar+0x1e8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	765a      	strb	r2, [r3, #25]

	Nave.Nave_display.figura = tela_nave_0;
 8001d06:	4b70      	ldr	r3, [pc, #448]	@ (8001ec8 <Jogar+0x1e8>)
 8001d08:	4a70      	ldr	r2, [pc, #448]	@ (8001ecc <Jogar+0x1ec>)
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d10:	e883 0003 	stmia.w	r3, {r0, r1}
	Nave.Nave_display.pos_anterior[0] = 0;
 8001d14:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec8 <Jogar+0x1e8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	821a      	strh	r2, [r3, #16]
	Nave.Nave_display.pos_anterior[1] = 0;
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec8 <Jogar+0x1e8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	825a      	strh	r2, [r3, #18]
	Nave.Nave_display.posicao[0] = (160 - Nave.Nave_display.figura.width)/2;
 8001d20:	4b69      	ldr	r3, [pc, #420]	@ (8001ec8 <Jogar+0x1e8>)
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001d28:	0fda      	lsrs	r2, r3, #31
 8001d2a:	4413      	add	r3, r2
 8001d2c:	105b      	asrs	r3, r3, #1
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <Jogar+0x1e8>)
 8001d32:	819a      	strh	r2, [r3, #12]
	Nave.Nave_display.posicao[1] = (128 - Nave.Nave_display.figura.height)/2;
 8001d34:	4b64      	ldr	r3, [pc, #400]	@ (8001ec8 <Jogar+0x1e8>)
 8001d36:	795b      	ldrb	r3, [r3, #5]
 8001d38:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001d3c:	0fda      	lsrs	r2, r3, #31
 8001d3e:	4413      	add	r3, r2
 8001d40:	105b      	asrs	r3, r3, #1
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b60      	ldr	r3, [pc, #384]	@ (8001ec8 <Jogar+0x1e8>)
 8001d46:	81da      	strh	r2, [r3, #14]
	//Nave FIM

	//Tiro INICIO
	Tiro_Struct Tiro;

	Tiro.dano = 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

	Tiro.tiro_tela[0] = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
	Tiro.tiro_tela[1] = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
	Tiro.tiro_tela_direcao[0] = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
	Tiro.tiro_tela_direcao[1] = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb

	Tiro.Tiro_display[0].camada = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
	Tiro.Tiro_display[0].cor = ST7735_GREEN;
 8001d6c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	Tiro.Tiro_display[0].figura = tela_tiro;
 8001d74:	4a56      	ldr	r2, [pc, #344]	@ (8001ed0 <Jogar+0x1f0>)
 8001d76:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d7e:	e883 0003 	stmia.w	r3, {r0, r1}
	Tiro.Tiro_display[0].id = Tiro_horizontal_obj;
 8001d82:	2306      	movs	r3, #6
 8001d84:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	Tiro.Tiro_display[0].pos_anterior[0] = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	Tiro.Tiro_display[0].pos_anterior[1] = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	Tiro.Tiro_display[0].posicao[0] = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
	Tiro.Tiro_display[0].posicao[1] = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	Tiro.Tiro_display[1].camada = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
	Tiro.Tiro_display[1].cor = ST7735_GREEN;
 8001da6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	Tiro.Tiro_display[1].figura = tela_tiro;
 8001dae:	4a48      	ldr	r2, [pc, #288]	@ (8001ed0 <Jogar+0x1f0>)
 8001db0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db8:	e883 0003 	stmia.w	r3, {r0, r1}
	Tiro.Tiro_display[1].id = Tiro_vertical_obj;
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
	Tiro.Tiro_display[1].pos_anterior[0] = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	Tiro.Tiro_display[1].pos_anterior[1] = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	Tiro.Tiro_display[1].posicao[0] = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
	Tiro.Tiro_display[1].posicao[1] = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

	xQueueSendToBack(fila_obj_Tiro,&Tiro,0);
 8001dda:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed4 <Jogar+0x1f4>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001de2:	2300      	movs	r3, #0
 8001de4:	2200      	movs	r2, #0
 8001de6:	f004 f9a7 	bl	8006138 <xQueueGenericSend>
	//Tiro FIM

	// Asteroide INICIO
	Asteroide_Struct Asteroide[NR_MAX_ASTEROIDE];

	Asteroide_Construtor_Basico(&(Asteroide[0]), Asteroide_1_obj);
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2101      	movs	r1, #1
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fc1c 	bl	800162c <Asteroide_Construtor_Basico>
	Asteroide_Construtor_Basico(&(Asteroide[1]), Asteroide_2_obj);
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	3320      	adds	r3, #32
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fc16 	bl	800162c <Asteroide_Construtor_Basico>
	Asteroide_Construtor_Basico(&(Asteroide[2]), Asteroide_3_obj);
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	3340      	adds	r3, #64	@ 0x40
 8001e04:	2103      	movs	r1, #3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fc10 	bl	800162c <Asteroide_Construtor_Basico>
	Asteroide_Construtor_Basico(&(Asteroide[3]), Asteroide_4_obj);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	3360      	adds	r3, #96	@ 0x60
 8001e10:	2104      	movs	r1, #4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fc0a 	bl	800162c <Asteroide_Construtor_Basico>

	xQueueSendToBack(fila_obj_Asteroide,&Asteroide,0);
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <Jogar+0x1f8>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	1d39      	adds	r1, r7, #4
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2200      	movs	r2, #0
 8001e22:	f004 f989 	bl	8006138 <xQueueGenericSend>
	// Asteroide FIM


	ST7735_FillRectangle(18, 9, 130, 33, ST7735_BLACK);
 8001e26:	2300      	movs	r3, #0
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2321      	movs	r3, #33	@ 0x21
 8001e2c:	2282      	movs	r2, #130	@ 0x82
 8001e2e:	2109      	movs	r1, #9
 8001e30:	2012      	movs	r0, #18
 8001e32:	f000 febd 	bl	8002bb0 <ST7735_FillRectangle>
	ST7735_FillRectangle(0, 46, 160, 33, ST7735_BLACK);
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2321      	movs	r3, #33	@ 0x21
 8001e3c:	22a0      	movs	r2, #160	@ 0xa0
 8001e3e:	212e      	movs	r1, #46	@ 0x2e
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 feb5 	bl	8002bb0 <ST7735_FillRectangle>
	ST7735_FillRectangle(18,88, 130, 33, ST7735_BLACK);
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2321      	movs	r3, #33	@ 0x21
 8001e4c:	2282      	movs	r2, #130	@ 0x82
 8001e4e:	2158      	movs	r1, #88	@ 0x58
 8001e50:	2012      	movs	r0, #18
 8001e52:	f000 fead 	bl	8002bb0 <ST7735_FillRectangle>

	vTaskResume(tarefa_mov_nave);
 8001e56:	4b21      	ldr	r3, [pc, #132]	@ (8001edc <Jogar+0x1fc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 f9a0 	bl	80071a0 <vTaskResume>
	vTaskResume(tarefa_placar_vida);
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <Jogar+0x200>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f005 f99b 	bl	80071a0 <vTaskResume>
	vTaskResume(tarefa_display);
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <Jogar+0x204>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 f996 	bl	80071a0 <vTaskResume>

	xQueueReceive(fila_pontuacao,&placar,portMAX_DELAY);
 8001e74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <Jogar+0x208>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f107 01be 	add.w	r1, r7, #190	@ 0xbe
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 faf9 	bl	8006478 <xQueueReceive>
	xSemaphoreTake(semaforo_nave_explode,portMAX_DELAY);
 8001e86:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <Jogar+0x20c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fbd4 	bl	800663c <xQueueSemaphoreTake>

	vTaskSuspend(tarefa_display);
 8001e94:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <Jogar+0x204>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f005 f8d9 	bl	8007050 <vTaskSuspend>
	vTaskSuspend(tarefa_placar_vida);
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <Jogar+0x200>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f005 f8d4 	bl	8007050 <vTaskSuspend>
	vTaskSuspend(tarefa_mov_nave);
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <Jogar+0x1fc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f005 f8cf 	bl	8007050 <vTaskSuspend>


	vTaskDelay(500);
 8001eb2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eb6:	f005 f895 	bl	8006fe4 <vTaskDelay>

	return placar;
 8001eba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	37c0      	adds	r7, #192	@ 0xc0
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000698 	.word	0x20000698
 8001ecc:	2000040c 	.word	0x2000040c
 8001ed0:	2000049c 	.word	0x2000049c
 8001ed4:	20000654 	.word	0x20000654
 8001ed8:	20000658 	.word	0x20000658
 8001edc:	20000630 	.word	0x20000630
 8001ee0:	20000628 	.word	0x20000628
 8001ee4:	2000062c 	.word	0x2000062c
 8001ee8:	20000664 	.word	0x20000664
 8001eec:	20000668 	.word	0x20000668

08001ef0 <Tela_de_Morte>:

void Tela_de_Morte(uint16_t placar)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(ST7735_BLACK);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 fecc 	bl	8002c98 <ST7735_FillScreen>
	ST7735_FillRectangle(0, 45, 160, 14, ST7735_BLACK);
 8001f00:	2300      	movs	r3, #0
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	230e      	movs	r3, #14
 8001f06:	22a0      	movs	r2, #160	@ 0xa0
 8001f08:	212d      	movs	r1, #45	@ 0x2d
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 fe50 	bl	8002bb0 <ST7735_FillRectangle>
	ST7735_draw_horizontal_line(0,160,45,ST7735_WHITE);
 8001f10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f14:	222d      	movs	r2, #45	@ 0x2d
 8001f16:	21a0      	movs	r1, #160	@ 0xa0
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 fece 	bl	8002cba <ST7735_draw_horizontal_line>
	vTaskDelay(500);
 8001f1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f22:	f005 f85f 	bl	8006fe4 <vTaskDelay>
	ST7735_WriteString(52, 48,"GAME OVER", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001f26:	4b30      	ldr	r3, [pc, #192]	@ (8001fe8 <Tela_de_Morte+0xf8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	9202      	str	r2, [sp, #8]
 8001f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	9200      	str	r2, [sp, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2c      	ldr	r2, [pc, #176]	@ (8001fec <Tela_de_Morte+0xfc>)
 8001f3a:	2130      	movs	r1, #48	@ 0x30
 8001f3c:	2034      	movs	r0, #52	@ 0x34
 8001f3e:	f000 fe07 	bl	8002b50 <ST7735_WriteString>
	vTaskDelay(500);
 8001f42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f46:	f005 f84d 	bl	8006fe4 <vTaskDelay>
	ST7735_draw_horizontal_line(0,160,59,ST7735_WHITE);
 8001f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f4e:	223b      	movs	r2, #59	@ 0x3b
 8001f50:	21a0      	movs	r1, #160	@ 0xa0
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 feb1 	bl	8002cba <ST7735_draw_horizontal_line>
	ST7735_WriteString(12, 25,"Placar:   ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <Tela_de_Morte+0xf8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	9202      	str	r2, [sp, #8]
 8001f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f62:	9201      	str	r2, [sp, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a21      	ldr	r2, [pc, #132]	@ (8001ff0 <Tela_de_Morte+0x100>)
 8001f6c:	2119      	movs	r1, #25
 8001f6e:	200c      	movs	r0, #12
 8001f70:	f000 fdee 	bl	8002b50 <ST7735_WriteString>
	ST7735_write_nr(68, 25, placar, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001f74:	88f9      	ldrh	r1, [r7, #6]
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <Tela_de_Morte+0xf8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	9202      	str	r2, [sp, #8]
 8001f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	460a      	mov	r2, r1
 8001f8a:	2119      	movs	r1, #25
 8001f8c:	2044      	movs	r0, #68	@ 0x44
 8001f8e:	f000 ff25 	bl	8002ddc <ST7735_write_nr>
	ST7735_draw_figure(0, 65, tela_inicial_figura2, ST7735_WHITE);
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <Tela_de_Morte+0x104>)
 8001f94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	cb0c      	ldmia	r3, {r2, r3}
 8001f9c:	2141      	movs	r1, #65	@ 0x41
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 fea9 	bl	8002cf6 <ST7735_draw_figure>
	//ST7735_draw_figure(18, 95, tela_asteroide_4 , ST7735_WHITE);
	//ST7735_draw_figure(65, 95, tela_asteroide_3 , ST7735_WHITE);
	//ST7735_draw_figure(112, 95, tela_asteroide_1 , ST7735_WHITE);
	vTaskDelay(500);
 8001fa4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fa8:	f005 f81c 	bl	8006fe4 <vTaskDelay>
	ST7735_WriteString(15, 110,"Press to Play Again", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001fac:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <Tela_de_Morte+0xf8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	9202      	str	r2, [sp, #8]
 8001fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	9200      	str	r2, [sp, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff8 <Tela_de_Morte+0x108>)
 8001fc0:	216e      	movs	r1, #110	@ 0x6e
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 fdc4 	bl	8002b50 <ST7735_WriteString>

	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8001fc8:	bf00      	nop
 8001fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fce:	480b      	ldr	r0, [pc, #44]	@ (8001ffc <Tela_de_Morte+0x10c>)
 8001fd0:	f002 fb6a 	bl	80046a8 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f7      	bne.n	8001fca <Tela_de_Morte+0xda>
	{

	};
	ST7735_FillScreen(ST7735_BLACK);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 fe5c 	bl	8002c98 <ST7735_FillScreen>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200004a4 	.word	0x200004a4
 8001fec:	08009870 	.word	0x08009870
 8001ff0:	0800987c 	.word	0x0800987c
 8001ff4:	20000294 	.word	0x20000294
 8001ff8:	08009888 	.word	0x08009888
 8001ffc:	40020800 	.word	0x40020800

08002000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	@ 0x30
 8002004:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002006:	f001 f91b 	bl	8003240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200a:	f000 fa2d 	bl	8002468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200e:	f000 fb49 	bl	80026a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002012:	f000 fb27 	bl	8002664 <MX_DMA_Init>
  MX_SPI1_Init();
 8002016:	f000 faef 	bl	80025f8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800201a:	f000 fa8d 	bl	8002538 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	// inicializa LCD

  HAL_Delay(100);
 800201e:	2064      	movs	r0, #100	@ 0x64
 8002020:	f001 f950 	bl	80032c4 <HAL_Delay>
  ST7735_Init();
 8002024:	f000 fccc 	bl	80029c0 <ST7735_Init>

  ST7735_FillScreen(ST7735_BLACK);
 8002028:	2000      	movs	r0, #0
 800202a:	f000 fe35 	bl	8002c98 <ST7735_FillScreen>

  // --------------------------------------------------------------------------------------

   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_buffer,2);
 800202e:	2202      	movs	r2, #2
 8002030:	49b0      	ldr	r1, [pc, #704]	@ (80022f4 <main+0x2f4>)
 8002032:	48b1      	ldr	r0, [pc, #708]	@ (80022f8 <main+0x2f8>)
 8002034:	f001 f9ae 	bl	8003394 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002038:	f003 fd58 	bl	8005aec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  vSemaphoreCreateBinary(semaforo_nave_explode);
 800203c:	2203      	movs	r2, #3
 800203e:	2100      	movs	r1, #0
 8002040:	2001      	movs	r0, #1
 8002042:	f004 f81a 	bl	800607a <xQueueGenericCreate>
 8002046:	4603      	mov	r3, r0
 8002048:	4aac      	ldr	r2, [pc, #688]	@ (80022fc <main+0x2fc>)
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4bab      	ldr	r3, [pc, #684]	@ (80022fc <main+0x2fc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <main+0x62>
 8002054:	4ba9      	ldr	r3, [pc, #676]	@ (80022fc <main+0x2fc>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	f004 f86b 	bl	8006138 <xQueueGenericSend>
  xSemaphoreTake(semaforo_nave_explode,0);
 8002062:	4ba6      	ldr	r3, [pc, #664]	@ (80022fc <main+0x2fc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fae7 	bl	800663c <xQueueSemaphoreTake>

  vSemaphoreCreateBinary(semaforo_nave_bate);
 800206e:	2203      	movs	r2, #3
 8002070:	2100      	movs	r1, #0
 8002072:	2001      	movs	r0, #1
 8002074:	f004 f801 	bl	800607a <xQueueGenericCreate>
 8002078:	4603      	mov	r3, r0
 800207a:	4aa1      	ldr	r2, [pc, #644]	@ (8002300 <main+0x300>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4ba0      	ldr	r3, [pc, #640]	@ (8002300 <main+0x300>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <main+0x94>
 8002086:	4b9e      	ldr	r3, [pc, #632]	@ (8002300 <main+0x300>)
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	f004 f852 	bl	8006138 <xQueueGenericSend>
  xSemaphoreTake(semaforo_nave_bate,0);
 8002094:	4b9a      	ldr	r3, [pc, #616]	@ (8002300 <main+0x300>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f004 face 	bl	800663c <xQueueSemaphoreTake>

  vSemaphoreCreateBinary(semaforo_nave_mudou_sprite);
 80020a0:	2203      	movs	r2, #3
 80020a2:	2100      	movs	r1, #0
 80020a4:	2001      	movs	r0, #1
 80020a6:	f003 ffe8 	bl	800607a <xQueueGenericCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a95      	ldr	r2, [pc, #596]	@ (8002304 <main+0x304>)
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b94      	ldr	r3, [pc, #592]	@ (8002304 <main+0x304>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <main+0xc6>
 80020b8:	4b92      	ldr	r3, [pc, #584]	@ (8002304 <main+0x304>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	f004 f839 	bl	8006138 <xQueueGenericSend>
  xSemaphoreTake(semaforo_nave_mudou_sprite, 0);
 80020c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002304 <main+0x304>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 fab5 	bl	800663c <xQueueSemaphoreTake>

  vSemaphoreCreateBinary(semaforo_jogador_ganhou_ponto);
 80020d2:	2203      	movs	r2, #3
 80020d4:	2100      	movs	r1, #0
 80020d6:	2001      	movs	r0, #1
 80020d8:	f003 ffcf 	bl	800607a <xQueueGenericCreate>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a8a      	ldr	r2, [pc, #552]	@ (8002308 <main+0x308>)
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b89      	ldr	r3, [pc, #548]	@ (8002308 <main+0x308>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <main+0xf8>
 80020ea:	4b87      	ldr	r3, [pc, #540]	@ (8002308 <main+0x308>)
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	f004 f820 	bl	8006138 <xQueueGenericSend>
  xSemaphoreTake(semaforo_jogador_ganhou_ponto,0);
 80020f8:	4b83      	ldr	r3, [pc, #524]	@ (8002308 <main+0x308>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fa9c 	bl	800663c <xQueueSemaphoreTake>

  vSemaphoreCreateBinary(semaforo_uso_display);
 8002104:	2203      	movs	r2, #3
 8002106:	2100      	movs	r1, #0
 8002108:	2001      	movs	r0, #1
 800210a:	f003 ffb6 	bl	800607a <xQueueGenericCreate>
 800210e:	4603      	mov	r3, r0
 8002110:	4a7e      	ldr	r2, [pc, #504]	@ (800230c <main+0x30c>)
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b7d      	ldr	r3, [pc, #500]	@ (800230c <main+0x30c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <main+0x12a>
 800211c:	4b7b      	ldr	r3, [pc, #492]	@ (800230c <main+0x30c>)
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	2300      	movs	r3, #0
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	f004 f807 	bl	8006138 <xQueueGenericSend>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  fila_tempo = xQueueCreate(NR_TASKS_USANDO_TEMPO, sizeof(uint8_t)); //tempo só funciona para funçoes round-and-robin
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	2003      	movs	r0, #3
 8002130:	f003 ffa3 	bl	800607a <xQueueGenericCreate>
 8002134:	4603      	mov	r3, r0
 8002136:	4a76      	ldr	r2, [pc, #472]	@ (8002310 <main+0x310>)
 8002138:	6013      	str	r3, [r2, #0]
  fila_movimento = xQueueCreate(8, sizeof(display));
 800213a:	2200      	movs	r2, #0
 800213c:	2118      	movs	r1, #24
 800213e:	2008      	movs	r0, #8
 8002140:	f003 ff9b 	bl	800607a <xQueueGenericCreate>
 8002144:	4603      	mov	r3, r0
 8002146:	4a73      	ldr	r2, [pc, #460]	@ (8002314 <main+0x314>)
 8002148:	6013      	str	r3, [r2, #0]
  fila_movimento_deletar = xQueueCreate(8,sizeof(uint8_t)); // id do item deletado
 800214a:	2200      	movs	r2, #0
 800214c:	2101      	movs	r1, #1
 800214e:	2008      	movs	r0, #8
 8002150:	f003 ff93 	bl	800607a <xQueueGenericCreate>
 8002154:	4603      	mov	r3, r0
 8002156:	4a70      	ldr	r2, [pc, #448]	@ (8002318 <main+0x318>)
 8002158:	6013      	str	r3, [r2, #0]
  //fila_movimento_texto_numero = xQueueCreate(1,sizeof(display_txt_nr)); // <-- aqui <- a fazer certo, por agora só gambiarra
  fila_colisao = xQueueCreate(NR_MAX_ITENS_COLIDIDOS,sizeof(uint8_t));
 800215a:	2200      	movs	r2, #0
 800215c:	2101      	movs	r1, #1
 800215e:	2010      	movs	r0, #16
 8002160:	f003 ff8b 	bl	800607a <xQueueGenericCreate>
 8002164:	4603      	mov	r3, r0
 8002166:	4a6d      	ldr	r2, [pc, #436]	@ (800231c <main+0x31c>)
 8002168:	6013      	str	r3, [r2, #0]
  fila_obj_Tiro = xQueueCreate(1,sizeof(Tiro_Struct));
 800216a:	2200      	movs	r2, #0
 800216c:	2138      	movs	r1, #56	@ 0x38
 800216e:	2001      	movs	r0, #1
 8002170:	f003 ff83 	bl	800607a <xQueueGenericCreate>
 8002174:	4603      	mov	r3, r0
 8002176:	4a6a      	ldr	r2, [pc, #424]	@ (8002320 <main+0x320>)
 8002178:	6013      	str	r3, [r2, #0]
  fila_obj_Asteroide = xQueueCreate(1,sizeof(Asteroide_Struct)*NR_MAX_ASTEROIDE);
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	2001      	movs	r0, #1
 8002180:	f003 ff7b 	bl	800607a <xQueueGenericCreate>
 8002184:	4603      	mov	r3, r0
 8002186:	4a67      	ldr	r2, [pc, #412]	@ (8002324 <main+0x324>)
 8002188:	6013      	str	r3, [r2, #0]
  fila_asteroide_atingido = xQueueCreate(2,sizeof(uint8_t));
 800218a:	2200      	movs	r2, #0
 800218c:	2101      	movs	r1, #1
 800218e:	2002      	movs	r0, #2
 8002190:	f003 ff73 	bl	800607a <xQueueGenericCreate>
 8002194:	4603      	mov	r3, r0
 8002196:	4a64      	ldr	r2, [pc, #400]	@ (8002328 <main+0x328>)
 8002198:	6013      	str	r3, [r2, #0]
  fila_tiro_antigiu = xQueueCreate(1,sizeof(uint8_t));
 800219a:	2200      	movs	r2, #0
 800219c:	2101      	movs	r1, #1
 800219e:	2001      	movs	r0, #1
 80021a0:	f003 ff6b 	bl	800607a <xQueueGenericCreate>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a61      	ldr	r2, [pc, #388]	@ (800232c <main+0x32c>)
 80021a8:	6013      	str	r3, [r2, #0]
  fila_pontuacao = xQueueCreate(1,sizeof(uint8_t));
 80021aa:	2200      	movs	r2, #0
 80021ac:	2101      	movs	r1, #1
 80021ae:	2001      	movs	r0, #1
 80021b0:	f003 ff63 	bl	800607a <xQueueGenericCreate>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002330 <main+0x330>)
 80021b8:	6013      	str	r3, [r2, #0]
  	//-----------------------------------------------------------------------------------------//
  	//                              Tarefas Asteroides
    //-----------------------------------------------------------------------------------------//

  // unica task que tem maior prioridade, para printar tudo na tela. (se deixar prioridade igual da problema!!!)
	status_display = xTaskCreate(vTask_Display, "Display com Fila", 1024, NULL, osPriorityAboveNormal2, &tarefa_display);
 80021ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <main+0x334>)
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	2322      	movs	r3, #34	@ 0x22
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021c8:	495b      	ldr	r1, [pc, #364]	@ (8002338 <main+0x338>)
 80021ca:	485c      	ldr	r0, [pc, #368]	@ (800233c <main+0x33c>)
 80021cc:	f004 fd2c 	bl	8006c28 <xTaskCreate>
 80021d0:	61f8      	str	r0, [r7, #28]

	status_loop_jogo = xTaskCreate(vTask_Loop_Jogo, "Loop_de_jogo", 1024, NULL, osPriorityAboveNormal1, NULL);
 80021d2:	2300      	movs	r3, #0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2321      	movs	r3, #33	@ 0x21
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2300      	movs	r3, #0
 80021dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021e0:	4957      	ldr	r1, [pc, #348]	@ (8002340 <main+0x340>)
 80021e2:	4858      	ldr	r0, [pc, #352]	@ (8002344 <main+0x344>)
 80021e4:	f004 fd20 	bl	8006c28 <xTaskCreate>
 80021e8:	61b8      	str	r0, [r7, #24]

    status_placar_vida = xTaskCreate(vTask_Placar_Vida, "Placar Vida", 128, NULL, osPriorityAboveNormal, &tarefa_placar_vida);
 80021ea:	4b57      	ldr	r3, [pc, #348]	@ (8002348 <main+0x348>)
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2320      	movs	r3, #32
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	4955      	ldr	r1, [pc, #340]	@ (800234c <main+0x34c>)
 80021f8:	4855      	ldr	r0, [pc, #340]	@ (8002350 <main+0x350>)
 80021fa:	f004 fd15 	bl	8006c28 <xTaskCreate>
 80021fe:	6178      	str	r0, [r7, #20]

	status_movimento_asteroide = xTaskCreate(vTask_Asteroide_Mover, "mov. ast.", 128, NULL, osPriorityNormal, &tarefa_mov_aste);
 8002200:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <main+0x354>)
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2318      	movs	r3, #24
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2300      	movs	r3, #0
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	4952      	ldr	r1, [pc, #328]	@ (8002358 <main+0x358>)
 800220e:	4853      	ldr	r0, [pc, #332]	@ (800235c <main+0x35c>)
 8002210:	f004 fd0a 	bl	8006c28 <xTaskCreate>
 8002214:	6138      	str	r0, [r7, #16]

	status_movimento_nave = xTaskCreate(vTask_Nave_Mover, "mov. nav.", 128, NULL, osPriorityNormal, &tarefa_mov_nave);
 8002216:	4b52      	ldr	r3, [pc, #328]	@ (8002360 <main+0x360>)
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2318      	movs	r3, #24
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	2280      	movs	r2, #128	@ 0x80
 8002222:	4950      	ldr	r1, [pc, #320]	@ (8002364 <main+0x364>)
 8002224:	4850      	ldr	r0, [pc, #320]	@ (8002368 <main+0x368>)
 8002226:	f004 fcff 	bl	8006c28 <xTaskCreate>
 800222a:	60f8      	str	r0, [r7, #12]

	status_colisao = xTaskCreate(vTask_Colisao, "coli", 128, NULL, osPriorityNormal, &tarefa_colisao);
 800222c:	4b4f      	ldr	r3, [pc, #316]	@ (800236c <main+0x36c>)
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	2318      	movs	r3, #24
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	2280      	movs	r2, #128	@ 0x80
 8002238:	494d      	ldr	r1, [pc, #308]	@ (8002370 <main+0x370>)
 800223a:	484e      	ldr	r0, [pc, #312]	@ (8002374 <main+0x374>)
 800223c:	f004 fcf4 	bl	8006c28 <xTaskCreate>
 8002240:	60b8      	str	r0, [r7, #8]

	status_movimento_tiro = xTaskCreate(vTask_Tiro, "mov. tiro", 128, NULL, osPriorityNormal, &tarefa_mov_tiro);
 8002242:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <main+0x378>)
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2318      	movs	r3, #24
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2300      	movs	r3, #0
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	494b      	ldr	r1, [pc, #300]	@ (800237c <main+0x37c>)
 8002250:	484b      	ldr	r0, [pc, #300]	@ (8002380 <main+0x380>)
 8002252:	f004 fce9 	bl	8006c28 <xTaskCreate>
 8002256:	6078      	str	r0, [r7, #4]

	status_contar_tempo = xTaskCreate(vTask_Contar_Tempo, "tempo tir.", 128, NULL, osPriorityNormal, &tarefa_contar_tempo);
 8002258:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <main+0x384>)
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2318      	movs	r3, #24
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	4948      	ldr	r1, [pc, #288]	@ (8002388 <main+0x388>)
 8002266:	4849      	ldr	r0, [pc, #292]	@ (800238c <main+0x38c>)
 8002268:	f004 fcde 	bl	8006c28 <xTaskCreate>
 800226c:	6038      	str	r0, [r7, #0]


	// flags para debug
	if (status_placar_vida != pdTRUE)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d00d      	beq.n	8002290 <main+0x290>
	{
		ST7735_WriteString(0, 0,"Deu Merda Placar.", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002274:	4b46      	ldr	r3, [pc, #280]	@ (8002390 <main+0x390>)
 8002276:	2200      	movs	r2, #0
 8002278:	9202      	str	r2, [sp, #8]
 800227a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800227e:	9201      	str	r2, [sp, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a43      	ldr	r2, [pc, #268]	@ (8002394 <main+0x394>)
 8002288:	2100      	movs	r1, #0
 800228a:	2000      	movs	r0, #0
 800228c:	f000 fc60 	bl	8002b50 <ST7735_WriteString>
	}
	if (status_display != pdTRUE)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d00d      	beq.n	80022b2 <main+0x2b2>
	{
		ST7735_WriteString(0, 24,"Deu Merda Display.", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002296:	4b3e      	ldr	r3, [pc, #248]	@ (8002390 <main+0x390>)
 8002298:	2200      	movs	r2, #0
 800229a:	9202      	str	r2, [sp, #8]
 800229c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80022a0:	9201      	str	r2, [sp, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002398 <main+0x398>)
 80022aa:	2118      	movs	r1, #24
 80022ac:	2000      	movs	r0, #0
 80022ae:	f000 fc4f 	bl	8002b50 <ST7735_WriteString>
	}
	if (status_movimento_asteroide != pdTRUE)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00d      	beq.n	80022d4 <main+0x2d4>
	{
		ST7735_WriteString(0, 36,"Deu Merda Asteroide.", Font_7x10, ST7735_RED, ST7735_BLACK);
 80022b8:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <main+0x390>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	9202      	str	r2, [sp, #8]
 80022be:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80022c2:	9201      	str	r2, [sp, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	9200      	str	r2, [sp, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a34      	ldr	r2, [pc, #208]	@ (800239c <main+0x39c>)
 80022cc:	2124      	movs	r1, #36	@ 0x24
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 fc3e 	bl	8002b50 <ST7735_WriteString>
	}
	if (status_movimento_nave != pdTRUE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d066      	beq.n	80023a8 <main+0x3a8>
	{
		ST7735_WriteString(0, 48,"Deu Merda Navo.", Font_7x10, ST7735_RED, ST7735_BLACK);
 80022da:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <main+0x390>)
 80022dc:	2200      	movs	r2, #0
 80022de:	9202      	str	r2, [sp, #8]
 80022e0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	9200      	str	r2, [sp, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2c      	ldr	r2, [pc, #176]	@ (80023a0 <main+0x3a0>)
 80022ee:	2130      	movs	r1, #48	@ 0x30
 80022f0:	2000      	movs	r0, #0
 80022f2:	e057      	b.n	80023a4 <main+0x3a4>
 80022f4:	200006b8 	.word	0x200006b8
 80022f8:	20000528 	.word	0x20000528
 80022fc:	20000668 	.word	0x20000668
 8002300:	2000066c 	.word	0x2000066c
 8002304:	20000670 	.word	0x20000670
 8002308:	20000674 	.word	0x20000674
 800230c:	20000678 	.word	0x20000678
 8002310:	20000644 	.word	0x20000644
 8002314:	20000648 	.word	0x20000648
 8002318:	2000064c 	.word	0x2000064c
 800231c:	20000650 	.word	0x20000650
 8002320:	20000654 	.word	0x20000654
 8002324:	20000658 	.word	0x20000658
 8002328:	2000065c 	.word	0x2000065c
 800232c:	20000660 	.word	0x20000660
 8002330:	20000664 	.word	0x20000664
 8002334:	2000062c 	.word	0x2000062c
 8002338:	0800989c 	.word	0x0800989c
 800233c:	0800060d 	.word	0x0800060d
 8002340:	080098b0 	.word	0x080098b0
 8002344:	08001bc5 	.word	0x08001bc5
 8002348:	20000628 	.word	0x20000628
 800234c:	080098c0 	.word	0x080098c0
 8002350:	08001a8d 	.word	0x08001a8d
 8002354:	20000634 	.word	0x20000634
 8002358:	080098cc 	.word	0x080098cc
 800235c:	08001031 	.word	0x08001031
 8002360:	20000630 	.word	0x20000630
 8002364:	080098d8 	.word	0x080098d8
 8002368:	08000eb5 	.word	0x08000eb5
 800236c:	20000640 	.word	0x20000640
 8002370:	080098e4 	.word	0x080098e4
 8002374:	08000bb5 	.word	0x08000bb5
 8002378:	20000638 	.word	0x20000638
 800237c:	080098ec 	.word	0x080098ec
 8002380:	080016ed 	.word	0x080016ed
 8002384:	2000063c 	.word	0x2000063c
 8002388:	080098f8 	.word	0x080098f8
 800238c:	080005d9 	.word	0x080005d9
 8002390:	200004a4 	.word	0x200004a4
 8002394:	08009904 	.word	0x08009904
 8002398:	08009918 	.word	0x08009918
 800239c:	0800992c 	.word	0x0800992c
 80023a0:	08009944 	.word	0x08009944
 80023a4:	f000 fbd4 	bl	8002b50 <ST7735_WriteString>
	}
	if (status_movimento_tiro != pdTRUE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d00d      	beq.n	80023ca <main+0x3ca>
	{
		ST7735_WriteString(0, 60,"Deu Merda Tiro.", Font_7x10, ST7735_RED, ST7735_BLACK);
 80023ae:	4b26      	ldr	r3, [pc, #152]	@ (8002448 <main+0x448>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	9202      	str	r2, [sp, #8]
 80023b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	9200      	str	r2, [sp, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a22      	ldr	r2, [pc, #136]	@ (800244c <main+0x44c>)
 80023c2:	213c      	movs	r1, #60	@ 0x3c
 80023c4:	2000      	movs	r0, #0
 80023c6:	f000 fbc3 	bl	8002b50 <ST7735_WriteString>
	}
	if(status_contar_tempo != pdTRUE)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d00d      	beq.n	80023ec <main+0x3ec>
	{
		ST7735_WriteString(0, 72,"Deu Merda Tempo.", Font_7x10, ST7735_RED, ST7735_BLACK);
 80023d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <main+0x448>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	9202      	str	r2, [sp, #8]
 80023d6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80023da:	9201      	str	r2, [sp, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	9200      	str	r2, [sp, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <main+0x450>)
 80023e4:	2148      	movs	r1, #72	@ 0x48
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 fbb2 	bl	8002b50 <ST7735_WriteString>
	}
	if (status_loop_jogo != pdTRUE)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d00d      	beq.n	800240e <main+0x40e>
	{
		ST7735_WriteString(0, 84,"Deu Merda Jogo.", Font_7x10, ST7735_RED, ST7735_BLACK);
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <main+0x448>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	9202      	str	r2, [sp, #8]
 80023f8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <main+0x454>)
 8002406:	2154      	movs	r1, #84	@ 0x54
 8002408:	2000      	movs	r0, #0
 800240a:	f000 fba1 	bl	8002b50 <ST7735_WriteString>
	}
	if (status_colisao != pdTRUE)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d00d      	beq.n	8002430 <main+0x430>
	{
		ST7735_WriteString(0, 84,"Deu Merda Colisao.", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <main+0x448>)
 8002416:	2200      	movs	r2, #0
 8002418:	9202      	str	r2, [sp, #8]
 800241a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800241e:	9201      	str	r2, [sp, #4]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	9200      	str	r2, [sp, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <main+0x458>)
 8002428:	2154      	movs	r1, #84	@ 0x54
 800242a:	2000      	movs	r0, #0
 800242c:	f000 fb90 	bl	8002b50 <ST7735_WriteString>
	}



    // se não tiver memória disponível o led azul do stm não pisca
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <main+0x45c>)
 8002432:	2100      	movs	r1, #0
 8002434:	480a      	ldr	r0, [pc, #40]	@ (8002460 <main+0x460>)
 8002436:	f003 fba3 	bl	8005b80 <osThreadNew>
 800243a:	4603      	mov	r3, r0
 800243c:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <main+0x464>)
 800243e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002440:	f003 fb78 	bl	8005b34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <main+0x444>
 8002448:	200004a4 	.word	0x200004a4
 800244c:	08009954 	.word	0x08009954
 8002450:	08009964 	.word	0x08009964
 8002454:	08009978 	.word	0x08009978
 8002458:	08009988 	.word	0x08009988
 800245c:	0800a124 	.word	0x0800a124
 8002460:	080027ad 	.word	0x080027ad
 8002464:	2000067c 	.word	0x2000067c

08002468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b094      	sub	sp, #80	@ 0x50
 800246c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246e:	f107 0320 	add.w	r3, r7, #32
 8002472:	2230      	movs	r2, #48	@ 0x30
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f006 fda6 	bl	8008fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <SystemClock_Config+0xc8>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	4a26      	ldr	r2, [pc, #152]	@ (8002530 <SystemClock_Config+0xc8>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	@ 0x40
 800249c:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <SystemClock_Config+0xc8>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <SystemClock_Config+0xcc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a20      	ldr	r2, [pc, #128]	@ (8002534 <SystemClock_Config+0xcc>)
 80024b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <SystemClock_Config+0xcc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024cc:	2310      	movs	r3, #16
 80024ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d0:	2302      	movs	r3, #2
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d4:	2300      	movs	r3, #0
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024d8:	2310      	movs	r3, #16
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80024dc:	23c0      	movs	r3, #192	@ 0xc0
 80024de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e0:	2302      	movs	r3, #2
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024e4:	2304      	movs	r3, #4
 80024e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e8:	f107 0320 	add.w	r3, r7, #32
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 f927 	bl	8004740 <HAL_RCC_OscConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024f8:	f000 f97a 	bl	80027f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fc:	230f      	movs	r3, #15
 80024fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002500:	2302      	movs	r3, #2
 8002502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800250c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	2103      	movs	r1, #3
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fb89 	bl	8004c30 <HAL_RCC_ClockConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002524:	f000 f964 	bl	80027f0 <Error_Handler>
  }
}
 8002528:	bf00      	nop
 800252a:	3750      	adds	r7, #80	@ 0x50
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	40007000 	.word	0x40007000

08002538 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800253e:	463b      	mov	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800254a:	4b28      	ldr	r3, [pc, #160]	@ (80025ec <MX_ADC1_Init+0xb4>)
 800254c:	4a28      	ldr	r2, [pc, #160]	@ (80025f0 <MX_ADC1_Init+0xb8>)
 800254e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002550:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002552:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002556:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002558:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <MX_ADC1_Init+0xb4>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002560:	2201      	movs	r2, #1
 8002562:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002564:	4b21      	ldr	r3, [pc, #132]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002566:	2201      	movs	r2, #1
 8002568:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <MX_ADC1_Init+0xb4>)
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002572:	4b1e      	ldr	r3, [pc, #120]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002574:	2200      	movs	r2, #0
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002578:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <MX_ADC1_Init+0xb4>)
 800257a:	4a1e      	ldr	r2, [pc, #120]	@ (80025f4 <MX_ADC1_Init+0xbc>)
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002584:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002586:	2202      	movs	r2, #2
 8002588:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <MX_ADC1_Init+0xb4>)
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002592:	4b16      	ldr	r3, [pc, #88]	@ (80025ec <MX_ADC1_Init+0xb4>)
 8002594:	2201      	movs	r2, #1
 8002596:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002598:	4814      	ldr	r0, [pc, #80]	@ (80025ec <MX_ADC1_Init+0xb4>)
 800259a:	f000 feb7 	bl	800330c <HAL_ADC_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80025a4:	f000 f924 	bl	80027f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80025b0:	2307      	movs	r3, #7
 80025b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025b4:	463b      	mov	r3, r7
 80025b6:	4619      	mov	r1, r3
 80025b8:	480c      	ldr	r0, [pc, #48]	@ (80025ec <MX_ADC1_Init+0xb4>)
 80025ba:	f000 ffef 	bl	800359c <HAL_ADC_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025c4:	f000 f914 	bl	80027f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80025cc:	2302      	movs	r3, #2
 80025ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025d0:	463b      	mov	r3, r7
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	@ (80025ec <MX_ADC1_Init+0xb4>)
 80025d6:	f000 ffe1 	bl	800359c <HAL_ADC_ConfigChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80025e0:	f000 f906 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000528 	.word	0x20000528
 80025f0:	40012000 	.word	0x40012000
 80025f4:	0f000001 	.word	0x0f000001

080025f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <MX_SPI1_Init+0x64>)
 80025fe:	4a18      	ldr	r2, [pc, #96]	@ (8002660 <MX_SPI1_Init+0x68>)
 8002600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <MX_SPI1_Init+0x64>)
 8002604:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <MX_SPI1_Init+0x64>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002610:	4b12      	ldr	r3, [pc, #72]	@ (800265c <MX_SPI1_Init+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <MX_SPI1_Init+0x64>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <MX_SPI1_Init+0x64>)
 800261e:	2200      	movs	r2, #0
 8002620:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <MX_SPI1_Init+0x64>)
 8002624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002628:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <MX_SPI1_Init+0x64>)
 800262c:	2210      	movs	r2, #16
 800262e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002630:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <MX_SPI1_Init+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <MX_SPI1_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800263c:	4b07      	ldr	r3, [pc, #28]	@ (800265c <MX_SPI1_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <MX_SPI1_Init+0x64>)
 8002644:	220a      	movs	r2, #10
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002648:	4804      	ldr	r0, [pc, #16]	@ (800265c <MX_SPI1_Init+0x64>)
 800264a:	f002 fcef 	bl	800502c <HAL_SPI_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002654:	f000 f8cc 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200005d0 	.word	0x200005d0
 8002660:	40013000 	.word	0x40013000

08002664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <MX_DMA_Init+0x3c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a0b      	ldr	r2, [pc, #44]	@ (80026a0 <MX_DMA_Init+0x3c>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <MX_DMA_Init+0x3c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	2038      	movs	r0, #56	@ 0x38
 800268c:	f001 faee 	bl	8003c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002690:	2038      	movs	r0, #56	@ 0x38
 8002692:	f001 fb07 	bl	8003ca4 <HAL_NVIC_EnableIRQ>

}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	@ 0x28
 80026a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a37      	ldr	r2, [pc, #220]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b35      	ldr	r3, [pc, #212]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b31      	ldr	r3, [pc, #196]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b2a      	ldr	r3, [pc, #168]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a29      	ldr	r2, [pc, #164]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a22      	ldr	r2, [pc, #136]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <MX_GPIO_Init+0xfc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002730:	481c      	ldr	r0, [pc, #112]	@ (80027a4 <MX_GPIO_Init+0x100>)
 8002732:	f001 ffd1 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800273c:	481a      	ldr	r0, [pc, #104]	@ (80027a8 <MX_GPIO_Init+0x104>)
 800273e:	f001 ffcb 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002742:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002748:	2301      	movs	r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4812      	ldr	r0, [pc, #72]	@ (80027a4 <MX_GPIO_Init+0x100>)
 800275c:	f001 fe20 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002760:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	480b      	ldr	r0, [pc, #44]	@ (80027a4 <MX_GPIO_Init+0x100>)
 8002776:	f001 fe13 	bl	80043a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 800277a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800277e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002780:	2301      	movs	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	4805      	ldr	r0, [pc, #20]	@ (80027a8 <MX_GPIO_Init+0x104>)
 8002794:	f001 fe04 	bl	80043a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	@ 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020400 	.word	0x40020400

080027ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	while(1)
	{
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80027b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027b8:	4803      	ldr	r0, [pc, #12]	@ (80027c8 <StartDefaultTask+0x1c>)
 80027ba:	f001 ffa6 	bl	800470a <HAL_GPIO_TogglePin>
		  osDelay(200);
 80027be:	20c8      	movs	r0, #200	@ 0xc8
 80027c0:	f003 fa70 	bl	8005ca4 <osDelay>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80027c4:	bf00      	nop
 80027c6:	e7f5      	b.n	80027b4 <StartDefaultTask+0x8>
 80027c8:	40020800 	.word	0x40020800

080027cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027de:	f000 fd51 	bl	8003284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40000800 	.word	0x40000800

080027f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f4:	b672      	cpsid	i
}
 80027f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <Error_Handler+0x8>

080027fc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002806:	4802      	ldr	r0, [pc, #8]	@ (8002810 <ST7735_Select+0x14>)
 8002808:	f001 ff66 	bl	80046d8 <HAL_GPIO_WritePin>
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40020400 	.word	0x40020400

08002814 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002818:	2201      	movs	r2, #1
 800281a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800281e:	4802      	ldr	r0, [pc, #8]	@ (8002828 <ST7735_Unselect+0x14>)
 8002820:	f001 ff5a 	bl	80046d8 <HAL_GPIO_WritePin>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020400 	.word	0x40020400

0800282c <ST7735_Reset>:

static void ST7735_Reset() {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002836:	4807      	ldr	r0, [pc, #28]	@ (8002854 <ST7735_Reset+0x28>)
 8002838:	f001 ff4e 	bl	80046d8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800283c:	2005      	movs	r0, #5
 800283e:	f000 fd41 	bl	80032c4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002842:	2201      	movs	r2, #1
 8002844:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <ST7735_Reset+0x28>)
 800284a:	f001 ff45 	bl	80046d8 <HAL_GPIO_WritePin>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40020400 	.word	0x40020400

08002858 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002868:	4806      	ldr	r0, [pc, #24]	@ (8002884 <ST7735_WriteCommand+0x2c>)
 800286a:	f001 ff35 	bl	80046d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800286e:	1df9      	adds	r1, r7, #7
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	2201      	movs	r2, #1
 8002876:	4804      	ldr	r0, [pc, #16]	@ (8002888 <ST7735_WriteCommand+0x30>)
 8002878:	f002 fc61 	bl	800513e <HAL_SPI_Transmit>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40020400 	.word	0x40020400
 8002888:	200005d0 	.word	0x200005d0

0800288c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800289c:	4807      	ldr	r0, [pc, #28]	@ (80028bc <ST7735_WriteData+0x30>)
 800289e:	f001 ff1b 	bl	80046d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <ST7735_WriteData+0x34>)
 80028ae:	f002 fc46 	bl	800513e <HAL_SPI_Transmit>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40020400 	.word	0x40020400
 80028c0:	200005d0 	.word	0x200005d0

080028c4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80028d6:	e034      	b.n	8002942 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ffb7 	bl	8002858 <ST7735_WriteCommand>

        numArgs = *addr++;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80028f4:	7abb      	ldrb	r3, [r7, #10]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80028fe:	7abb      	ldrb	r3, [r7, #10]
 8002900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002904:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002906:	7abb      	ldrb	r3, [r7, #10]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800290c:	7abb      	ldrb	r3, [r7, #10]
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ffbb 	bl	800288c <ST7735_WriteData>
            addr += numArgs;
 8002916:	7abb      	ldrb	r3, [r7, #10]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800291e:	89bb      	ldrh	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800292e:	89bb      	ldrh	r3, [r7, #12]
 8002930:	2bff      	cmp	r3, #255	@ 0xff
 8002932:	d102      	bne.n	800293a <ST7735_ExecuteCommandList+0x76>
 8002934:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002938:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800293a:	89bb      	ldrh	r3, [r7, #12]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fcc1 	bl	80032c4 <HAL_Delay>
    while(numCommands--) {
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	73fa      	strb	r2, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1c5      	bne.n	80028d8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002956:	b590      	push	{r4, r7, lr}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	4604      	mov	r4, r0
 800295e:	4608      	mov	r0, r1
 8002960:	4611      	mov	r1, r2
 8002962:	461a      	mov	r2, r3
 8002964:	4623      	mov	r3, r4
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	4603      	mov	r3, r0
 800296a:	71bb      	strb	r3, [r7, #6]
 800296c:	460b      	mov	r3, r1
 800296e:	717b      	strb	r3, [r7, #5]
 8002970:	4613      	mov	r3, r2
 8002972:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002974:	202a      	movs	r0, #42	@ 0x2a
 8002976:	f7ff ff6f 	bl	8002858 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800297a:	2300      	movs	r3, #0
 800297c:	733b      	strb	r3, [r7, #12]
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	737b      	strb	r3, [r7, #13]
 8002982:	2300      	movs	r3, #0
 8002984:	73bb      	strb	r3, [r7, #14]
 8002986:	797b      	ldrb	r3, [r7, #5]
 8002988:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	2104      	movs	r1, #4
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff7b 	bl	800288c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002996:	202b      	movs	r0, #43	@ 0x2b
 8002998:	f7ff ff5e 	bl	8002858 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800299c:	79bb      	ldrb	r3, [r7, #6]
 800299e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80029a0:	793b      	ldrb	r3, [r7, #4]
 80029a2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	2104      	movs	r1, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff6e 	bl	800288c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80029b0:	202c      	movs	r0, #44	@ 0x2c
 80029b2:	f7ff ff51 	bl	8002858 <ST7735_WriteCommand>
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
	...

080029c0 <ST7735_Init>:

void ST7735_Init() {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80029c4:	f7ff ff1a 	bl	80027fc <ST7735_Select>
    ST7735_Reset();
 80029c8:	f7ff ff30 	bl	800282c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80029cc:	4806      	ldr	r0, [pc, #24]	@ (80029e8 <ST7735_Init+0x28>)
 80029ce:	f7ff ff79 	bl	80028c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80029d2:	4806      	ldr	r0, [pc, #24]	@ (80029ec <ST7735_Init+0x2c>)
 80029d4:	f7ff ff76 	bl	80028c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80029d8:	4805      	ldr	r0, [pc, #20]	@ (80029f0 <ST7735_Init+0x30>)
 80029da:	f7ff ff73 	bl	80028c4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80029de:	f7ff ff19 	bl	8002814 <ST7735_Unselect>
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	0800a148 	.word	0x0800a148
 80029ec:	0800a184 	.word	0x0800a184
 80029f0:	0800a194 	.word	0x0800a194

080029f4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
 80029fe:	460b      	mov	r3, r1
 8002a00:	80bb      	strh	r3, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b9f      	cmp	r3, #159	@ 0x9f
 8002a0a:	d823      	bhi.n	8002a54 <ST7735_DrawPixel+0x60>
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a10:	d820      	bhi.n	8002a54 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8002a12:	f7ff fef3 	bl	80027fc <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	b2d8      	uxtb	r0, r3
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	b2d9      	uxtb	r1, r3
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	88bb      	ldrh	r3, [r7, #4]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f7ff ff92 	bl	8002956 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	733b      	strb	r3, [r7, #12]
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff1f 	bl	800288c <ST7735_WriteData>

    ST7735_Unselect();
 8002a4e:	f7ff fee1 	bl	8002814 <ST7735_Unselect>
 8002a52:	e000      	b.n	8002a56 <ST7735_DrawPixel+0x62>
        return;
 8002a54:	bf00      	nop
}
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	b590      	push	{r4, r7, lr}
 8002a60:	b089      	sub	sp, #36	@ 0x24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	80bb      	strh	r3, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_Select();
 8002a72:	f7ff fec3 	bl	80027fc <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	b2d8      	uxtb	r0, r3
 8002a7a:	88bb      	ldrh	r3, [r7, #4]
 8002a7c:	b2d9      	uxtb	r1, r3
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a86:	4413      	add	r3, r2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b2dc      	uxtb	r4, r3
 8002a8e:	88bb      	ldrh	r3, [r7, #4]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002a96:	4413      	add	r3, r2
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	f7ff ff59 	bl	8002956 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	e043      	b.n	8002b32 <ST7735_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 8002aaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	3b20      	subs	r3, #32
 8002ab0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	440b      	add	r3, r1
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e029      	b.n	8002b20 <ST7735_WriteChar+0xc4>
            if((b << j) & 0x8000)  {
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <ST7735_WriteChar+0x9e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002adc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	743b      	strb	r3, [r7, #16]
 8002ae6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	2102      	movs	r1, #2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff feca 	bl	800288c <ST7735_WriteData>
 8002af8:	e00f      	b.n	8002b1a <ST7735_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	733b      	strb	r3, [r7, #12]
 8002b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff feb9 	bl	800288c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b24:	461a      	mov	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d3cf      	bcc.n	8002acc <ST7735_WriteChar+0x70>
    for(i = 0; i < font.height; i++) {
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b36:	461a      	mov	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d3b5      	bcc.n	8002aaa <ST7735_WriteChar+0x4e>
            }
        }
    }

    ST7735_Unselect();
 8002b3e:	f7ff fe69 	bl	8002814 <ST7735_Unselect>
}
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	@ 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002b4c:	b002      	add	sp, #8
 8002b4e:	4770      	bx	lr

08002b50 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002b50:	b082      	sub	sp, #8
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af04      	add	r7, sp, #16
 8002b58:	603a      	str	r2, [r7, #0]
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	80fb      	strh	r3, [r7, #6]
 8002b60:	460b      	mov	r3, r1
 8002b62:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002b64:	f7ff fe4a 	bl	80027fc <ST7735_Select>

    while(*str)
 8002b68:	e014      	b.n	8002b94 <ST7735_WriteString+0x44>
    {

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	88b9      	ldrh	r1, [r7, #4]
 8002b70:	88f8      	ldrh	r0, [r7, #6]
 8002b72:	8c3b      	ldrh	r3, [r7, #32]
 8002b74:	9302      	str	r3, [sp, #8]
 8002b76:	8bbb      	ldrh	r3, [r7, #28]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f7ff ff6c 	bl	8002a5c <ST7735_WriteChar>
        x += font.width;
 8002b84:	7d3b      	ldrb	r3, [r7, #20]
 8002b86:	461a      	mov	r2, r3
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
        str++;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
    while(*str)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e6      	bne.n	8002b6a <ST7735_WriteString+0x1a>
    }

    ST7735_Unselect();
 8002b9c:	f7ff fe3a 	bl	8002814 <ST7735_Unselect>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002baa:	b002      	add	sp, #8
 8002bac:	4770      	bx	lr
	...

08002bb0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	80fb      	strh	r3, [r7, #6]
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80bb      	strh	r3, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	807b      	strh	r3, [r7, #2]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b9f      	cmp	r3, #159	@ 0x9f
 8002bd2:	d858      	bhi.n	8002c86 <ST7735_FillRectangle+0xd6>
 8002bd4:	88bb      	ldrh	r3, [r7, #4]
 8002bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd8:	d855      	bhi.n	8002c86 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	4413      	add	r3, r2
 8002be0:	2ba0      	cmp	r3, #160	@ 0xa0
 8002be2:	dd03      	ble.n	8002bec <ST7735_FillRectangle+0x3c>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8002bea:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002bec:	88ba      	ldrh	r2, [r7, #4]
 8002bee:	883b      	ldrh	r3, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	dd03      	ble.n	8002bfe <ST7735_FillRectangle+0x4e>
 8002bf6:	88bb      	ldrh	r3, [r7, #4]
 8002bf8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002bfc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002bfe:	f7ff fdfd 	bl	80027fc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	b2d8      	uxtb	r0, r3
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	b2d9      	uxtb	r1, r3
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b2dc      	uxtb	r4, r3
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	883b      	ldrh	r3, [r7, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	f7ff fe93 	bl	8002956 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002c30:	8c3b      	ldrh	r3, [r7, #32]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	733b      	strb	r3, [r7, #12]
 8002c3a:	8c3b      	ldrh	r3, [r7, #32]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c46:	4812      	ldr	r0, [pc, #72]	@ (8002c90 <ST7735_FillRectangle+0xe0>)
 8002c48:	f001 fd46 	bl	80046d8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002c4c:	883b      	ldrh	r3, [r7, #0]
 8002c4e:	80bb      	strh	r3, [r7, #4]
 8002c50:	e013      	b.n	8002c7a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	80fb      	strh	r3, [r7, #6]
 8002c56:	e00a      	b.n	8002c6e <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002c58:	f107 010c 	add.w	r1, r7, #12
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	2202      	movs	r2, #2
 8002c62:	480c      	ldr	r0, [pc, #48]	@ (8002c94 <ST7735_FillRectangle+0xe4>)
 8002c64:	f002 fa6b 	bl	800513e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	80fb      	strh	r3, [r7, #6]
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f1      	bne.n	8002c58 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002c74:	88bb      	ldrh	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	80bb      	strh	r3, [r7, #4]
 8002c7a:	88bb      	ldrh	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e8      	bne.n	8002c52 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002c80:	f7ff fdc8 	bl	8002814 <ST7735_Unselect>
 8002c84:	e000      	b.n	8002c88 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002c86:	bf00      	nop
}
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020400 	.word	0x40020400
 8002c94:	200005d0 	.word	0x200005d0

08002c98 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2380      	movs	r3, #128	@ 0x80
 8002ca8:	22a0      	movs	r2, #160	@ 0xa0
 8002caa:	2100      	movs	r1, #0
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7ff ff7f 	bl	8002bb0 <ST7735_FillRectangle>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ST7735_draw_horizontal_line>:

//------------------------------------------------------------------------------
// Minhas funcoes
//------------------------------------------------------------------------------
void ST7735_draw_horizontal_line(uint32_t x_init, uint32_t x_end, uint32_t y, uint16_t color)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	807b      	strh	r3, [r7, #2]
	uint32_t x;
	for(x = x_init; x < x_end; x++)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e00a      	b.n	8002ce4 <ST7735_draw_horizontal_line+0x2a>
		ST7735_DrawPixel(x, y, color);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	b291      	uxth	r1, r2
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fe8b 	bl	80029f4 <ST7735_DrawPixel>
	for(x = x_init; x < x_end; x++)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3f0      	bcc.n	8002cce <ST7735_draw_horizontal_line+0x14>
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <ST7735_draw_figure>:
}
//------------------------------------------------------------------------------
// desenha figura com uma unica cor
//------------------------------------------------------------------------------
void ST7735_draw_figure(uint32_t x, uint32_t y, FigDef fig, uint16_t color)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b08c      	sub	sp, #48	@ 0x30
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	4639      	mov	r1, r7
 8002d02:	e881 000c 	stmia.w	r1, {r2, r3}
    uint32_t i,j,k,l,m=0, resto_w, nr_colunas, nr_rot;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]

    resto_w = fig.width%16; 			// resto para uso caso nao tenha um nr multiplo de 16 pixels de largura
 8002d0a:	783b      	ldrb	r3, [r7, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	613b      	str	r3, [r7, #16]

    nr_colunas = fig.width/16;
 8002d12:	783b      	ldrb	r3, [r7, #0]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	61bb      	str	r3, [r7, #24]

    if (resto_w!=0)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <ST7735_draw_figure+0x30>
    	nr_colunas++;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	3301      	adds	r3, #1
 8002d24:	61bb      	str	r3, [r7, #24]

    for(k=0; k<(fig.height*nr_colunas); k+=nr_colunas)	// varre as linhas
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e04a      	b.n	8002dc2 <ST7735_draw_figure+0xcc>
    {
    	nr_rot = 16;			// 16 bits para uma linha de informação da figura
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	617b      	str	r3, [r7, #20]
    	l = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]


    	for(j=0; j<nr_colunas; j++) // varre as colunas
 8002d34:	2300      	movs	r3, #0
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d38:	e038      	b.n	8002dac <ST7735_draw_figure+0xb6>
    	{

    		if((j==(nr_colunas-1))&& (resto_w!=0)) // na ultima coluna muda nr de bits para rotacao se necessario
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d104      	bne.n	8002d4e <ST7735_draw_figure+0x58>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <ST7735_draw_figure+0x58>
    			  nr_rot = resto_w;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	617b      	str	r3, [r7, #20]

    		for(i=0; i<nr_rot; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d52:	e024      	b.n	8002d9e <ST7735_draw_figure+0xa8>
    		{
    			if(fig.data[k+j]<<i & 0x8000) 			//if (bit == 1)
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	440b      	add	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00f      	beq.n	8002d92 <ST7735_draw_figure+0x9c>
    				ST7735_DrawPixel(x+l, y+m, color);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7ff fe31 	bl	80029f4 <ST7735_DrawPixel>
    			l++;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	3301      	adds	r3, #1
 8002d96:	623b      	str	r3, [r7, #32]
    		for(i=0; i<nr_rot; i++)
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3d6      	bcc.n	8002d54 <ST7735_draw_figure+0x5e>
    	for(j=0; j<nr_colunas; j++) // varre as colunas
 8002da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da8:	3301      	adds	r3, #1
 8002daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3c2      	bcc.n	8002d3a <ST7735_draw_figure+0x44>
    		}
    	}
    	m++;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
    for(k=0; k<(fig.height*nr_colunas); k+=nr_colunas)	// varre as linhas
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc2:	787b      	ldrb	r3, [r7, #1]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3ac      	bcc.n	8002d2c <ST7735_draw_figure+0x36>
  	}
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	3730      	adds	r7, #48	@ 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <ST7735_write_nr>:
//------------------------------------------------------------------------------
void ST7735_write_nr(uint32_t x, uint32_t y, int nr, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002ddc:	b082      	sub	sp, #8
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08c      	sub	sp, #48	@ 0x30
 8002de2:	af04      	add	r7, sp, #16
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char string_nr[10];

	sprintf(string_nr, "%d",nr);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	490d      	ldr	r1, [pc, #52]	@ (8002e28 <ST7735_write_nr+0x4c>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f006 f8c5 	bl	8008f84 <siprintf>
	ST7735_WriteString(x, y, string_nr, font, color, bgcolor);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	b298      	uxth	r0, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	b299      	uxth	r1, r3
 8002e02:	f107 0214 	add.w	r2, r7, #20
 8002e06:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	f7ff fe9c 	bl	8002b50 <ST7735_WriteString>
}
 8002e18:	bf00      	nop
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e22:	b002      	add	sp, #8
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	0800999c 	.word	0x0800999c

08002e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <HAL_MspInit+0x54>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <HAL_MspInit+0x54>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <HAL_MspInit+0x54>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_MspInit+0x54>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <HAL_MspInit+0x54>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <HAL_MspInit+0x54>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	f06f 0001 	mvn.w	r0, #1
 8002e72:	f000 fefb 	bl	8003c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800

08002e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f60 <HAL_ADC_MspInit+0xdc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d157      	bne.n	8002f56 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <HAL_ADC_MspInit+0xe0>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	4a2d      	ldr	r2, [pc, #180]	@ (8002f64 <HAL_ADC_MspInit+0xe0>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_ADC_MspInit+0xe0>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_ADC_MspInit+0xe0>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a26      	ldr	r2, [pc, #152]	@ (8002f64 <HAL_ADC_MspInit+0xe0>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_ADC_MspInit+0xe0>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	481d      	ldr	r0, [pc, #116]	@ (8002f68 <HAL_ADC_MspInit+0xe4>)
 8002ef2:	f001 fa55 	bl	80043a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_ADC_MspInit+0xec>)
 8002efa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f34:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f3a:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f3c:	f000 fec0 	bl	8003cc0 <HAL_DMA_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002f46:	f7ff fc53 	bl	80027f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f50:	4a06      	ldr	r2, [pc, #24]	@ (8002f6c <HAL_ADC_MspInit+0xe8>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f56:	bf00      	nop
 8002f58:	3728      	adds	r7, #40	@ 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40012000 	.word	0x40012000
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	20000570 	.word	0x20000570
 8002f70:	40026410 	.word	0x40026410

08002f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_SPI_MspInit+0x84>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d12b      	bne.n	8002fee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a10      	ldr	r2, [pc, #64]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fce:	23a0      	movs	r3, #160	@ 0xa0
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fde:	2305      	movs	r3, #5
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4805      	ldr	r0, [pc, #20]	@ (8003000 <HAL_SPI_MspInit+0x8c>)
 8002fea:	f001 f9d9 	bl	80043a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	@ 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020000 	.word	0x40020000

08003004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08e      	sub	sp, #56	@ 0x38
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <HAL_InitTick+0xe4>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	4a32      	ldr	r2, [pc, #200]	@ (80030e8 <HAL_InitTick+0xe4>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6413      	str	r3, [r2, #64]	@ 0x40
 8003024:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <HAL_InitTick+0xe4>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003030:	f107 0210 	add.w	r2, r7, #16
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 ffc4 	bl	8004fc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800304a:	f001 ffa9 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 800304e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003050:	e004      	b.n	800305c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003052:	f001 ffa5 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8003056:	4603      	mov	r3, r0
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <HAL_InitTick+0xe8>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	0c9b      	lsrs	r3, r3, #18
 8003066:	3b01      	subs	r3, #1
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800306a:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <HAL_InitTick+0xec>)
 800306c:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <HAL_InitTick+0xf0>)
 800306e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <HAL_InitTick+0xec>)
 8003072:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003076:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_InitTick+0xec>)
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800307e:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <HAL_InitTick+0xec>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003084:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <HAL_InitTick+0xec>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308a:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_InitTick+0xec>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003090:	4817      	ldr	r0, [pc, #92]	@ (80030f0 <HAL_InitTick+0xec>)
 8003092:	f002 fa73 	bl	800557c <HAL_TIM_Base_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800309c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11b      	bne.n	80030dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80030a4:	4812      	ldr	r0, [pc, #72]	@ (80030f0 <HAL_InitTick+0xec>)
 80030a6:	f002 fac3 	bl	8005630 <HAL_TIM_Base_Start_IT>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80030b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030b8:	201e      	movs	r0, #30
 80030ba:	f000 fdf3 	bl	8003ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b0f      	cmp	r3, #15
 80030c2:	d808      	bhi.n	80030d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80030c4:	2200      	movs	r2, #0
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	201e      	movs	r0, #30
 80030ca:	f000 fdcf 	bl	8003c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030ce:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <HAL_InitTick+0xf4>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e002      	b.n	80030dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80030dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3738      	adds	r7, #56	@ 0x38
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	200006c0 	.word	0x200006c0
 80030f4:	40000800 	.word	0x40000800
 80030f8:	200004b0 	.word	0x200004b0

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <NMI_Handler+0x4>

08003104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <MemManage_Handler+0x4>

08003114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <UsageFault_Handler+0x4>

08003124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003138:	4802      	ldr	r0, [pc, #8]	@ (8003144 <TIM4_IRQHandler+0x10>)
 800313a:	f002 fadb 	bl	80056f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200006c0 	.word	0x200006c0

08003148 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <DMA2_Stream0_IRQHandler+0x10>)
 800314e:	f000 febd 	bl	8003ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000570 	.word	0x20000570

0800315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003164:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <_sbrk+0x5c>)
 8003166:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <_sbrk+0x60>)
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <_sbrk+0x64>)
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <_sbrk+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800318c:	f005 ff92 	bl	80090b4 <__errno>
 8003190:	4603      	mov	r3, r0
 8003192:	220c      	movs	r2, #12
 8003194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e009      	b.n	80031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a2:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <_sbrk+0x64>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a05      	ldr	r2, [pc, #20]	@ (80031c0 <_sbrk+0x64>)
 80031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20020000 	.word	0x20020000
 80031bc:	00000400 	.word	0x00000400
 80031c0:	20000708 	.word	0x20000708
 80031c4:	20005240 	.word	0x20005240

080031c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <SystemInit+0x20>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d2:	4a05      	ldr	r2, [pc, #20]	@ (80031e8 <SystemInit+0x20>)
 80031d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 80031ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003224 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031f0:	f7ff ffea 	bl	80031c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f4:	480c      	ldr	r0, [pc, #48]	@ (8003228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031f6:	490d      	ldr	r1, [pc, #52]	@ (800322c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800320c:	4c0a      	ldr	r4, [pc, #40]	@ (8003238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800321a:	f005 ff51 	bl	80090c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800321e:	f7fe feef 	bl	8002000 <main>
  bx  lr    
 8003222:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8003224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800322c:	2000050c 	.word	0x2000050c
  ldr r2, =_sidata
 8003230:	0800a224 	.word	0x0800a224
  ldr r2, =_sbss
 8003234:	2000050c 	.word	0x2000050c
  ldr r4, =_ebss
 8003238:	20005240 	.word	0x20005240

0800323c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800323c:	e7fe      	b.n	800323c <ADC_IRQHandler>
	...

08003240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003244:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <HAL_Init+0x40>)
 800324a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800324e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	@ (8003280 <HAL_Init+0x40>)
 8003256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800325a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800325c:	4b08      	ldr	r3, [pc, #32]	@ (8003280 <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a07      	ldr	r2, [pc, #28]	@ (8003280 <HAL_Init+0x40>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003268:	2003      	movs	r0, #3
 800326a:	f000 fcf4 	bl	8003c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326e:	200f      	movs	r0, #15
 8003270:	f7ff fec8 	bl	8003004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003274:	f7ff fdda 	bl	8002e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00

08003284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003288:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_IncTick+0x20>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_IncTick+0x24>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <HAL_IncTick+0x24>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	200004b4 	.word	0x200004b4
 80032a8:	2000070c 	.word	0x2000070c

080032ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return uwTick;
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <HAL_GetTick+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	2000070c 	.word	0x2000070c

080032c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff ffee 	bl	80032ac <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d005      	beq.n	80032ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <HAL_Delay+0x44>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ea:	bf00      	nop
 80032ec:	f7ff ffde 	bl	80032ac <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d8f7      	bhi.n	80032ec <HAL_Delay+0x28>
  {
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200004b4 	.word	0x200004b4

0800330c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e033      	b.n	800338a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fdaa 	bl	8002e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003352:	f023 0302 	bic.w	r3, r3, #2
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa4e 	bl	8003800 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	@ 0x40
 800337a:	e001      	b.n	8003380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Start_DMA+0x1e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0ce      	b.n	8003550 <HAL_ADC_Start_DMA+0x1bc>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d018      	beq.n	80033fa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033d8:	4b5f      	ldr	r3, [pc, #380]	@ (8003558 <HAL_ADC_Start_DMA+0x1c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5f      	ldr	r2, [pc, #380]	@ (800355c <HAL_ADC_Start_DMA+0x1c8>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9a      	lsrs	r2, r3, #18
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80033ec:	e002      	b.n	80033f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f9      	bne.n	80033ee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003408:	d107      	bne.n	800341a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003418:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 8086 	bne.w	8003536 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003454:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003468:	d106      	bne.n	8003478 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	f023 0206 	bic.w	r2, r3, #6
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44
 8003476:	e002      	b.n	800347e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003486:	4b36      	ldr	r3, [pc, #216]	@ (8003560 <HAL_ADC_Start_DMA+0x1cc>)
 8003488:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <HAL_ADC_Start_DMA+0x1d0>)
 8003490:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <HAL_ADC_Start_DMA+0x1d4>)
 8003498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	4a33      	ldr	r2, [pc, #204]	@ (800356c <HAL_ADC_Start_DMA+0x1d8>)
 80034a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80034aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80034ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	334c      	adds	r3, #76	@ 0x4c
 80034d6:	4619      	mov	r1, r3
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f000 fc9e 	bl	8003e1c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d129      	bne.n	800354e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	e020      	b.n	800354e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <HAL_ADC_Start_DMA+0x1dc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d11b      	bne.n	800354e <HAL_ADC_Start_DMA+0x1ba>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d114      	bne.n	800354e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	e00b      	b.n	800354e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f043 0210 	orr.w	r2, r3, #16
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200004ac 	.word	0x200004ac
 800355c:	431bde83 	.word	0x431bde83
 8003560:	40012300 	.word	0x40012300
 8003564:	080039f9 	.word	0x080039f9
 8003568:	08003ab3 	.word	0x08003ab3
 800356c:	08003acf 	.word	0x08003acf
 8003570:	40012000 	.word	0x40012000

08003574 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x1c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e113      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x244>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	d925      	bls.n	8003614 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	3b1e      	subs	r3, #30
 80035de:	2207      	movs	r2, #7
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43da      	mvns	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	400a      	ands	r2, r1
 80035ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68d9      	ldr	r1, [r3, #12]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	4603      	mov	r3, r0
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4403      	add	r3, r0
 8003606:	3b1e      	subs	r3, #30
 8003608:	409a      	lsls	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	e022      	b.n	800365a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6919      	ldr	r1, [r3, #16]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	2207      	movs	r2, #7
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6919      	ldr	r1, [r3, #16]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	4618      	mov	r0, r3
 800364a:	4603      	mov	r3, r0
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4403      	add	r3, r0
 8003650:	409a      	lsls	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d824      	bhi.n	80036ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	3b05      	subs	r3, #5
 8003674:	221f      	movs	r2, #31
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	400a      	ands	r2, r1
 8003682:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b05      	subs	r3, #5
 800369e:	fa00 f203 	lsl.w	r2, r0, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036aa:	e04c      	b.n	8003746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d824      	bhi.n	80036fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	3b23      	subs	r3, #35	@ 0x23
 80036c6:	221f      	movs	r2, #31
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43da      	mvns	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	400a      	ands	r2, r1
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4618      	mov	r0, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	3b23      	subs	r3, #35	@ 0x23
 80036f0:	fa00 f203 	lsl.w	r2, r0, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80036fc:	e023      	b.n	8003746 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b41      	subs	r3, #65	@ 0x41
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	400a      	ands	r2, r1
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	3b41      	subs	r3, #65	@ 0x41
 800373a:	fa00 f203 	lsl.w	r2, r0, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003746:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <HAL_ADC_ConfigChannel+0x250>)
 8003748:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a28      	ldr	r2, [pc, #160]	@ (80037f0 <HAL_ADC_ConfigChannel+0x254>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10f      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x1d8>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b12      	cmp	r3, #18
 800375a:	d10b      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <HAL_ADC_ConfigChannel+0x254>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d12b      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x23a>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1c      	ldr	r2, [pc, #112]	@ (80037f4 <HAL_ADC_ConfigChannel+0x258>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <HAL_ADC_ConfigChannel+0x1f4>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b11      	cmp	r3, #17
 800378e:	d122      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a11      	ldr	r2, [pc, #68]	@ (80037f4 <HAL_ADC_ConfigChannel+0x258>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d111      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <HAL_ADC_ConfigChannel+0x25c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a11      	ldr	r2, [pc, #68]	@ (80037fc <HAL_ADC_ConfigChannel+0x260>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	0c9a      	lsrs	r2, r3, #18
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80037c8:	e002      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f9      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012300 	.word	0x40012300
 80037f0:	40012000 	.word	0x40012000
 80037f4:	10000012 	.word	0x10000012
 80037f8:	200004ac 	.word	0x200004ac
 80037fc:	431bde83 	.word	0x431bde83

08003800 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003808:	4b79      	ldr	r3, [pc, #484]	@ (80039f0 <ADC_Init+0x1f0>)
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	021a      	lsls	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003858:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800387a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	4a58      	ldr	r2, [pc, #352]	@ (80039f4 <ADC_Init+0x1f4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	e00f      	b.n	80038fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0202 	bic.w	r2, r2, #2
 800390c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7e1b      	ldrb	r3, [r3, #24]
 8003918:	005a      	lsls	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800393a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800394a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	3b01      	subs	r3, #1
 8003958:	035a      	lsls	r2, r3, #13
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e007      	b.n	8003974 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	3b01      	subs	r3, #1
 8003990:	051a      	lsls	r2, r3, #20
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039b6:	025a      	lsls	r2, r3, #9
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	029a      	lsls	r2, r3, #10
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40012300 	.word	0x40012300
 80039f4:	0f000001 	.word	0x0f000001

080039f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d13c      	bne.n	8003a8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d12b      	bne.n	8003a84 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d127      	bne.n	8003a84 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d119      	bne.n	8003a84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0220 	bic.w	r2, r2, #32
 8003a5e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7fc fd91 	bl	80005ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a8a:	e00e      	b.n	8003aaa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fd75 	bl	8003588 <HAL_ADC_ErrorCallback>
}
 8003a9e:	e004      	b.n	8003aaa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fd57 	bl	8003574 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2240      	movs	r2, #64	@ 0x40
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff fd4a 	bl	8003588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <__NVIC_SetPriorityGrouping+0x44>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <__NVIC_SetPriorityGrouping+0x44>)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	60d3      	str	r3, [r2, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b48:	4b04      	ldr	r3, [pc, #16]	@ (8003b5c <__NVIC_GetPriorityGrouping+0x18>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	f003 0307 	and.w	r3, r3, #7
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	db0b      	blt.n	8003b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	f003 021f 	and.w	r2, r3, #31
 8003b78:	4907      	ldr	r1, [pc, #28]	@ (8003b98 <__NVIC_EnableIRQ+0x38>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2001      	movs	r0, #1
 8003b82:	fa00 f202 	lsl.w	r2, r0, r2
 8003b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000e100 	.word	0xe000e100

08003b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	db0a      	blt.n	8003bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	490c      	ldr	r1, [pc, #48]	@ (8003be8 <__NVIC_SetPriority+0x4c>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	0112      	lsls	r2, r2, #4
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc4:	e00a      	b.n	8003bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4908      	ldr	r1, [pc, #32]	@ (8003bec <__NVIC_SetPriority+0x50>)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3b04      	subs	r3, #4
 8003bd4:	0112      	lsls	r2, r2, #4
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	440b      	add	r3, r1
 8003bda:	761a      	strb	r2, [r3, #24]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000e100 	.word	0xe000e100
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f1c3 0307 	rsb	r3, r3, #7
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	bf28      	it	cs
 8003c0e:	2304      	movcs	r3, #4
 8003c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d902      	bls.n	8003c20 <NVIC_EncodePriority+0x30>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3b03      	subs	r3, #3
 8003c1e:	e000      	b.n	8003c22 <NVIC_EncodePriority+0x32>
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	401a      	ands	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c38:	f04f 31ff 	mov.w	r1, #4294967295
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43d9      	mvns	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	4313      	orrs	r3, r2
         );
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ff4c 	bl	8003afc <__NVIC_SetPriorityGrouping>
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7e:	f7ff ff61 	bl	8003b44 <__NVIC_GetPriorityGrouping>
 8003c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	6978      	ldr	r0, [r7, #20]
 8003c8a:	f7ff ffb1 	bl	8003bf0 <NVIC_EncodePriority>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff80 	bl	8003b9c <__NVIC_SetPriority>
}
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff54 	bl	8003b60 <__NVIC_EnableIRQ>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff faee 	bl	80032ac <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e099      	b.n	8003e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfc:	e00f      	b.n	8003d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cfe:	f7ff fad5 	bl	80032ac <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d908      	bls.n	8003d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e078      	b.n	8003e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e8      	bne.n	8003cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4b38      	ldr	r3, [pc, #224]	@ (8003e18 <HAL_DMA_Init+0x158>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	4313      	orrs	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d117      	bne.n	8003de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa6f 	bl	80042a8 <DMA_CheckFifoParam>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dde:	2301      	movs	r3, #1
 8003de0:	e016      	b.n	8003e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa26 	bl	800423c <DMA_CalcBaseAndBitshift>
 8003df0:	4603      	mov	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	223f      	movs	r2, #63	@ 0x3f
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	f010803f 	.word	0xf010803f

08003e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA_Start_IT+0x26>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e040      	b.n	8003ec4 <HAL_DMA_Start_IT+0xa8>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d12f      	bne.n	8003eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f9b8 	bl	80041e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	223f      	movs	r2, #63	@ 0x3f
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0216 	orr.w	r2, r2, #22
 8003e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0208 	orr.w	r2, r2, #8
 8003ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e005      	b.n	8003ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8004114 <HAL_DMA_IRQHandler+0x248>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a8e      	ldr	r2, [pc, #568]	@ (8004118 <HAL_DMA_IRQHandler+0x24c>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01a      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0204 	bic.w	r2, r2, #4
 8003f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	2208      	movs	r2, #8
 8003f26:	409a      	lsls	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	f043 0202 	orr.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	2204      	movs	r2, #4
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	2204      	movs	r2, #4
 8003f92:	409a      	lsls	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	f043 0204 	orr.w	r2, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	2210      	movs	r2, #16
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d043      	beq.n	800403c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d03c      	beq.n	800403c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc6:	2210      	movs	r2, #16
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d108      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d024      	beq.n	800403c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
 8003ffa:	e01f      	b.n	800403c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
 800400c:	e016      	b.n	800403c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0208 	bic.w	r2, r2, #8
 800402a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	2220      	movs	r2, #32
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 808f 	beq.w	800416c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8087 	beq.w	800416c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	2220      	movs	r2, #32
 8004064:	409a      	lsls	r2, r3
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b05      	cmp	r3, #5
 8004074:	d136      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0216 	bic.w	r2, r2, #22
 8004084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x1da>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0208 	bic.w	r2, r2, #8
 80040b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	223f      	movs	r2, #63	@ 0x3f
 80040bc:	409a      	lsls	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d07e      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
        }
        return;
 80040e2:	e079      	b.n	80041d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01d      	beq.n	800412e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10d      	bne.n	800411c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	2b00      	cmp	r3, #0
 8004106:	d031      	beq.n	800416c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
 8004110:	e02c      	b.n	800416c <HAL_DMA_IRQHandler+0x2a0>
 8004112:	bf00      	nop
 8004114:	200004ac 	.word	0x200004ac
 8004118:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d023      	beq.n	800416c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e01e      	b.n	800416c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0210 	bic.w	r2, r2, #16
 800414a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	2b00      	cmp	r3, #0
 8004172:	d032      	beq.n	80041da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d022      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2205      	movs	r2, #5
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	3301      	adds	r3, #1
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d307      	bcc.n	80041b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f2      	bne.n	8004198 <HAL_DMA_IRQHandler+0x2cc>
 80041b2:	e000      	b.n	80041b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
 80041d6:	e000      	b.n	80041da <HAL_DMA_IRQHandler+0x30e>
        return;
 80041d8:	bf00      	nop
    }
  }
}
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	d108      	bne.n	8004220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800421e:	e007      	b.n	8004230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3b10      	subs	r3, #16
 800424c:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <DMA_CalcBaseAndBitshift+0x64>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d909      	bls.n	800427e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004272:	f023 0303 	bic.w	r3, r3, #3
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	659a      	str	r2, [r3, #88]	@ 0x58
 800427c:	e007      	b.n	800428e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	aaaaaaab 	.word	0xaaaaaaab
 80042a4:	0800a1d8 	.word	0x0800a1d8

080042a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11f      	bne.n	8004302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d856      	bhi.n	8004376 <DMA_CheckFifoParam+0xce>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <DMA_CheckFifoParam+0x28>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042f3 	.word	0x080042f3
 80042d8:	080042e1 	.word	0x080042e1
 80042dc:	08004377 	.word	0x08004377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d046      	beq.n	800437a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f0:	e043      	b.n	800437a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042fa:	d140      	bne.n	800437e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004300:	e03d      	b.n	800437e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430a:	d121      	bne.n	8004350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b03      	cmp	r3, #3
 8004310:	d837      	bhi.n	8004382 <DMA_CheckFifoParam+0xda>
 8004312:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <DMA_CheckFifoParam+0x70>)
 8004314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004318:	08004329 	.word	0x08004329
 800431c:	0800432f 	.word	0x0800432f
 8004320:	08004329 	.word	0x08004329
 8004324:	08004341 	.word	0x08004341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e030      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d025      	beq.n	8004386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433e:	e022      	b.n	8004386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004348:	d11f      	bne.n	800438a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800434e:	e01c      	b.n	800438a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d903      	bls.n	800435e <DMA_CheckFifoParam+0xb6>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d003      	beq.n	8004364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800435c:	e018      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
      break;
 8004362:	e015      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
      break;
 8004374:	e00b      	b.n	800438e <DMA_CheckFifoParam+0xe6>
      break;
 8004376:	bf00      	nop
 8004378:	e00a      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 800437a:	bf00      	nop
 800437c:	e008      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 800437e:	bf00      	nop
 8004380:	e006      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 8004382:	bf00      	nop
 8004384:	e004      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 8004386:	bf00      	nop
 8004388:	e002      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;   
 800438a:	bf00      	nop
 800438c:	e000      	b.n	8004390 <DMA_CheckFifoParam+0xe8>
      break;
 800438e:	bf00      	nop
    }
  } 
  
  return status; 
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	@ 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e159      	b.n	8004670 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043bc:	2201      	movs	r2, #1
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	f040 8148 	bne.w	800466a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d005      	beq.n	80043f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d130      	bne.n	8004454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2203      	movs	r2, #3
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004428:	2201      	movs	r2, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 0201 	and.w	r2, r3, #1
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b03      	cmp	r3, #3
 800445e:	d017      	beq.n	8004490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d123      	bne.n	80044e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	08da      	lsrs	r2, r3, #3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3208      	adds	r2, #8
 80044a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	220f      	movs	r2, #15
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	08da      	lsrs	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3208      	adds	r2, #8
 80044de:	69b9      	ldr	r1, [r7, #24]
 80044e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	2203      	movs	r2, #3
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0203 	and.w	r2, r3, #3
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80a2 	beq.w	800466a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	4b57      	ldr	r3, [pc, #348]	@ (8004688 <HAL_GPIO_Init+0x2e8>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	4a56      	ldr	r2, [pc, #344]	@ (8004688 <HAL_GPIO_Init+0x2e8>)
 8004530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004534:	6453      	str	r3, [r2, #68]	@ 0x44
 8004536:	4b54      	ldr	r3, [pc, #336]	@ (8004688 <HAL_GPIO_Init+0x2e8>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004542:	4a52      	ldr	r2, [pc, #328]	@ (800468c <HAL_GPIO_Init+0x2ec>)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	3302      	adds	r3, #2
 800454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	220f      	movs	r2, #15
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a49      	ldr	r2, [pc, #292]	@ (8004690 <HAL_GPIO_Init+0x2f0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d019      	beq.n	80045a2 <HAL_GPIO_Init+0x202>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a48      	ldr	r2, [pc, #288]	@ (8004694 <HAL_GPIO_Init+0x2f4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_GPIO_Init+0x1fe>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a47      	ldr	r2, [pc, #284]	@ (8004698 <HAL_GPIO_Init+0x2f8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00d      	beq.n	800459a <HAL_GPIO_Init+0x1fa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a46      	ldr	r2, [pc, #280]	@ (800469c <HAL_GPIO_Init+0x2fc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <HAL_GPIO_Init+0x1f6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a45      	ldr	r2, [pc, #276]	@ (80046a0 <HAL_GPIO_Init+0x300>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_GPIO_Init+0x1f2>
 800458e:	2304      	movs	r3, #4
 8004590:	e008      	b.n	80045a4 <HAL_GPIO_Init+0x204>
 8004592:	2307      	movs	r3, #7
 8004594:	e006      	b.n	80045a4 <HAL_GPIO_Init+0x204>
 8004596:	2303      	movs	r3, #3
 8004598:	e004      	b.n	80045a4 <HAL_GPIO_Init+0x204>
 800459a:	2302      	movs	r3, #2
 800459c:	e002      	b.n	80045a4 <HAL_GPIO_Init+0x204>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_GPIO_Init+0x204>
 80045a2:	2300      	movs	r3, #0
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	f002 0203 	and.w	r2, r2, #3
 80045aa:	0092      	lsls	r2, r2, #2
 80045ac:	4093      	lsls	r3, r2
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b4:	4935      	ldr	r1, [pc, #212]	@ (800468c <HAL_GPIO_Init+0x2ec>)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3302      	adds	r3, #2
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045c2:	4b38      	ldr	r3, [pc, #224]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e6:	4a2f      	ldr	r2, [pc, #188]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045ec:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004610:	4a24      	ldr	r2, [pc, #144]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004616:	4b23      	ldr	r3, [pc, #140]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800463a:	4a1a      	ldr	r2, [pc, #104]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004640:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004664:	4a0f      	ldr	r2, [pc, #60]	@ (80046a4 <HAL_GPIO_Init+0x304>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3301      	adds	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	f67f aea2 	bls.w	80043bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3724      	adds	r7, #36	@ 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800
 800468c:	40013800 	.word	0x40013800
 8004690:	40020000 	.word	0x40020000
 8004694:	40020400 	.word	0x40020400
 8004698:	40020800 	.word	0x40020800
 800469c:	40020c00 	.word	0x40020c00
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40013c00 	.word	0x40013c00

080046a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e001      	b.n	80046ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
 80046e4:	4613      	mov	r3, r2
 80046e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e8:	787b      	ldrb	r3, [r7, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046f4:	e003      	b.n	80046fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046f6:	887b      	ldrh	r3, [r7, #2]
 80046f8:	041a      	lsls	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	619a      	str	r2, [r3, #24]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800471c:	887a      	ldrh	r2, [r7, #2]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4013      	ands	r3, r2
 8004722:	041a      	lsls	r2, r3, #16
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43d9      	mvns	r1, r3
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	400b      	ands	r3, r1
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	619a      	str	r2, [r3, #24]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e267      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d075      	beq.n	800484a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800475e:	4b88      	ldr	r3, [pc, #544]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00c      	beq.n	8004784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476a:	4b85      	ldr	r3, [pc, #532]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004772:	2b08      	cmp	r3, #8
 8004774:	d112      	bne.n	800479c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004776:	4b82      	ldr	r3, [pc, #520]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004782:	d10b      	bne.n	800479c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	4b7e      	ldr	r3, [pc, #504]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05b      	beq.n	8004848 <HAL_RCC_OscConfig+0x108>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d157      	bne.n	8004848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e242      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_OscConfig+0x74>
 80047a6:	4b76      	ldr	r3, [pc, #472]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a75      	ldr	r2, [pc, #468]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e01d      	b.n	80047f0 <HAL_RCC_OscConfig+0xb0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x98>
 80047be:	4b70      	ldr	r3, [pc, #448]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0xb0>
 80047d8:	4b69      	ldr	r3, [pc, #420]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a68      	ldr	r2, [pc, #416]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b66      	ldr	r3, [pc, #408]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a65      	ldr	r2, [pc, #404]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80047ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fe fd58 	bl	80032ac <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004800:	f7fe fd54 	bl	80032ac <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	@ 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e207      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b5b      	ldr	r3, [pc, #364]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0xc0>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe fd44 	bl	80032ac <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004828:	f7fe fd40 	bl	80032ac <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	@ 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1f3      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	4b51      	ldr	r3, [pc, #324]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0xe8>
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d063      	beq.n	800491e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004856:	4b4a      	ldr	r3, [pc, #296]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800486a:	2b08      	cmp	r3, #8
 800486c:	d11c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486e:	4b44      	ldr	r3, [pc, #272]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d116      	bne.n	80048a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487a:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_RCC_OscConfig+0x152>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e1c7      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004892:	4b3b      	ldr	r3, [pc, #236]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4937      	ldr	r1, [pc, #220]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a6:	e03a      	b.n	800491e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b0:	4b34      	ldr	r3, [pc, #208]	@ (8004984 <HAL_RCC_OscConfig+0x244>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fe fcf9 	bl	80032ac <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048be:	f7fe fcf5 	bl	80032ac <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e1a8      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4925      	ldr	r1, [pc, #148]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]
 80048f0:	e015      	b.n	800491e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <HAL_RCC_OscConfig+0x244>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fe fcd8 	bl	80032ac <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004900:	f7fe fcd4 	bl	80032ac <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e187      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d036      	beq.n	8004998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004932:	4b15      	ldr	r3, [pc, #84]	@ (8004988 <HAL_RCC_OscConfig+0x248>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fe fcb8 	bl	80032ac <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004940:	f7fe fcb4 	bl	80032ac <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e167      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_RCC_OscConfig+0x240>)
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x200>
 800495e:	e01b      	b.n	8004998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_OscConfig+0x248>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fe fca1 	bl	80032ac <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	e00e      	b.n	800498c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800496e:	f7fe fc9d 	bl	80032ac <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d907      	bls.n	800498c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e150      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
 8004980:	40023800 	.word	0x40023800
 8004984:	42470000 	.word	0x42470000
 8004988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 800498e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ea      	bne.n	800496e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8097 	beq.w	8004ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049aa:	4b81      	ldr	r3, [pc, #516]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	4b7d      	ldr	r3, [pc, #500]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049c6:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	4b77      	ldr	r3, [pc, #476]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	4b74      	ldr	r3, [pc, #464]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a73      	ldr	r2, [pc, #460]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ee:	f7fe fc5d 	bl	80032ac <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fe fc59 	bl	80032ac <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e10c      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb4 <HAL_RCC_OscConfig+0x474>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2ea>
 8004a1c:	4b64      	ldr	r3, [pc, #400]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a20:	4a63      	ldr	r2, [pc, #396]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a28:	e01c      	b.n	8004a64 <HAL_RCC_OscConfig+0x324>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x30c>
 8004a32:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a38:	f043 0304 	orr.w	r3, r3, #4
 8004a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	4a5b      	ldr	r2, [pc, #364]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0x324>
 8004a4c:	4b58      	ldr	r3, [pc, #352]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a50:	4a57      	ldr	r2, [pc, #348]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a58:	4b55      	ldr	r3, [pc, #340]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5c:	4a54      	ldr	r2, [pc, #336]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	f023 0304 	bic.w	r3, r3, #4
 8004a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fe fc1e 	bl	80032ac <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a74:	f7fe fc1a 	bl	80032ac <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0cb      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ee      	beq.n	8004a74 <HAL_RCC_OscConfig+0x334>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a98:	f7fe fc08 	bl	80032ac <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa0:	f7fe fc04 	bl	80032ac <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0b5      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1ee      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac8:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	4a38      	ldr	r2, [pc, #224]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a1 	beq.w	8004c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ade:	4b34      	ldr	r3, [pc, #208]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d05c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d141      	bne.n	8004b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <HAL_RCC_OscConfig+0x478>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fe fbd8 	bl	80032ac <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fe fbd4 	bl	80032ac <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e087      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b12:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	491b      	ldr	r1, [pc, #108]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x478>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4e:	f7fe fbad 	bl	80032ac <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fe fba9 	bl	80032ac <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e05c      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b68:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x416>
 8004b74:	e054      	b.n	8004c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <HAL_RCC_OscConfig+0x478>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fb96 	bl	80032ac <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fe fb92 	bl	80032ac <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e045      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <HAL_RCC_OscConfig+0x470>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x444>
 8004ba2:	e03d      	b.n	8004c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e038      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40007000 	.word	0x40007000
 8004bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x4ec>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d028      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d121      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d11a      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bec:	4013      	ands	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d111      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	3b01      	subs	r3, #1
 8004c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800

08004c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0cc      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b68      	ldr	r3, [pc, #416]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d90c      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b65      	ldr	r3, [pc, #404]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b63      	ldr	r3, [pc, #396]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0b8      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d020      	beq.n	8004cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c84:	4b59      	ldr	r3, [pc, #356]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a58      	ldr	r2, [pc, #352]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c9c:	4b53      	ldr	r3, [pc, #332]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a52      	ldr	r2, [pc, #328]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b50      	ldr	r3, [pc, #320]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	494d      	ldr	r1, [pc, #308]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d044      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d119      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e07f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b3f      	ldr	r3, [pc, #252]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e06f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e067      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b37      	ldr	r3, [pc, #220]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4934      	ldr	r1, [pc, #208]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fe fac4 	bl	80032ac <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fe fac0 	bl	80032ac <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04f      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d20c      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b22      	ldr	r3, [pc, #136]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e032      	b.n	8004dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d84:	4b19      	ldr	r3, [pc, #100]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4916      	ldr	r1, [pc, #88]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da2:	4b12      	ldr	r3, [pc, #72]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	490e      	ldr	r1, [pc, #56]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004db6:	f000 f821 	bl	8004dfc <HAL_RCC_GetSysClockFreq>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	490a      	ldr	r1, [pc, #40]	@ (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	5ccb      	ldrb	r3, [r1, r3]
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	4a09      	ldr	r2, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dd2:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe f914 	bl	8003004 <HAL_InitTick>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023c00 	.word	0x40023c00
 8004dec:	40023800 	.word	0x40023800
 8004df0:	0800a1c0 	.word	0x0800a1c0
 8004df4:	200004ac 	.word	0x200004ac
 8004df8:	200004b0 	.word	0x200004b0

08004dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e00:	b090      	sub	sp, #64	@ 0x40
 8004e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e14:	4b59      	ldr	r3, [pc, #356]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d00d      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x40>
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	f200 80a1 	bhi.w	8004f68 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x34>
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e2e:	e09b      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e30:	4b53      	ldr	r3, [pc, #332]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004e34:	e09b      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e36:	4b53      	ldr	r3, [pc, #332]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e3a:	e098      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e44:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e46:	4b4d      	ldr	r3, [pc, #308]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e52:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	2200      	movs	r2, #0
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e64:	2100      	movs	r1, #0
 8004e66:	4b47      	ldr	r3, [pc, #284]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e68:	fb03 f201 	mul.w	r2, r3, r1
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	fb00 f303 	mul.w	r3, r0, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	4a43      	ldr	r2, [pc, #268]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e76:	fba0 1202 	umull	r1, r2, r0, r2
 8004e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e82:	4413      	add	r3, r2
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e88:	2200      	movs	r2, #0
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	61fa      	str	r2, [r7, #28]
 8004e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e96:	f7fb f9f3 	bl	8000280 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea2:	e053      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea4:	4b35      	ldr	r3, [pc, #212]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	099b      	lsrs	r3, r3, #6
 8004eaa:	2200      	movs	r2, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	617a      	str	r2, [r7, #20]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eb6:	f04f 0b00 	mov.w	fp, #0
 8004eba:	4652      	mov	r2, sl
 8004ebc:	465b      	mov	r3, fp
 8004ebe:	f04f 0000 	mov.w	r0, #0
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	0159      	lsls	r1, r3, #5
 8004ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ecc:	0150      	lsls	r0, r2, #5
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ed6:	eb63 090b 	sbc.w	r9, r3, fp
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ee6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004eea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004eee:	ebb2 0408 	subs.w	r4, r2, r8
 8004ef2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	00eb      	lsls	r3, r5, #3
 8004f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f04:	00e2      	lsls	r2, r4, #3
 8004f06:	4614      	mov	r4, r2
 8004f08:	461d      	mov	r5, r3
 8004f0a:	eb14 030a 	adds.w	r3, r4, sl
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	eb45 030b 	adc.w	r3, r5, fp
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f22:	4629      	mov	r1, r5
 8004f24:	028b      	lsls	r3, r1, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	028a      	lsls	r2, r1, #10
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f36:	2200      	movs	r2, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	60fa      	str	r2, [r7, #12]
 8004f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f40:	f7fb f99e 	bl	8000280 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	3301      	adds	r3, #1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004f5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3740      	adds	r7, #64	@ 0x40
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	017d7840 	.word	0x017d7840

08004f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	@ (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200004ac 	.word	0x200004ac

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a9b      	lsrs	r3, r3, #10
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	@ (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	0800a1d0 	.word	0x0800a1d0

08004fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	220f      	movs	r2, #15
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fd8:	4b12      	ldr	r3, [pc, #72]	@ (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0203 	and.w	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ffc:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	08db      	lsrs	r3, r3, #3
 8005002:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800500a:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <HAL_RCC_GetClockConfig+0x60>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0207 	and.w	r2, r3, #7
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	601a      	str	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e07b      	b.n	8005136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d108      	bne.n	8005058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800504e:	d009      	beq.n	8005064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	61da      	str	r2, [r3, #28]
 8005056:	e005      	b.n	8005064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fd ff78 	bl	8002f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800509a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e8:	ea42 0103 	orr.w	r1, r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	f003 0104 	and.w	r1, r3, #4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	f003 0210 	and.w	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_SPI_Transmit+0x22>
 800515c:	2302      	movs	r3, #2
 800515e:	e12d      	b.n	80053bc <HAL_SPI_Transmit+0x27e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005168:	f7fe f8a0 	bl	80032ac <HAL_GetTick>
 800516c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d002      	beq.n	8005184 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800517e:	2302      	movs	r3, #2
 8005180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005182:	e116      	b.n	80053b2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_SPI_Transmit+0x52>
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005194:	e10d      	b.n	80053b2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2203      	movs	r2, #3
 800519a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	88fa      	ldrh	r2, [r7, #6]
 80051ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051dc:	d10f      	bne.n	80051fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d007      	beq.n	800521c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005224:	d14f      	bne.n	80052c6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_SPI_Transmit+0xf6>
 800522e:	8afb      	ldrh	r3, [r7, #22]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d142      	bne.n	80052ba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005238:	881a      	ldrh	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005258:	e02f      	b.n	80052ba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d112      	bne.n	800528e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	881a      	ldrh	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	1c9a      	adds	r2, r3, #2
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800528c:	e015      	b.n	80052ba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528e:	f7fe f80d 	bl	80032ac <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d803      	bhi.n	80052a6 <HAL_SPI_Transmit+0x168>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d102      	bne.n	80052ac <HAL_SPI_Transmit+0x16e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80052b8:	e07b      	b.n	80053b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ca      	bne.n	800525a <HAL_SPI_Transmit+0x11c>
 80052c4:	e050      	b.n	8005368 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_SPI_Transmit+0x196>
 80052ce:	8afb      	ldrh	r3, [r7, #22]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d144      	bne.n	800535e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052fa:	e030      	b.n	800535e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d113      	bne.n	8005332 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005330:	e015      	b.n	800535e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005332:	f7fd ffbb 	bl	80032ac <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d803      	bhi.n	800534a <HAL_SPI_Transmit+0x20c>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d102      	bne.n	8005350 <HAL_SPI_Transmit+0x212>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800535c:	e029      	b.n	80053b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1c9      	bne.n	80052fc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f8b1 	bl	80054d4 <SPI_EndRxTxTransaction>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e003      	b.n	80053b2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80053ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053d4:	f7fd ff6a 	bl	80032ac <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	4413      	add	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053e4:	f7fd ff62 	bl	80032ac <HAL_GetTick>
 80053e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ea:	4b39      	ldr	r3, [pc, #228]	@ (80054d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	015b      	lsls	r3, r3, #5
 80053f0:	0d1b      	lsrs	r3, r3, #20
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053fa:	e054      	b.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d050      	beq.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005404:	f7fd ff52 	bl	80032ac <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	429a      	cmp	r2, r3
 8005412:	d902      	bls.n	800541a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d13d      	bne.n	8005496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005432:	d111      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800543c:	d004      	beq.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005446:	d107      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005460:	d10f      	bne.n	8005482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e017      	b.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d19b      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200004ac 	.word	0x200004ac

080054d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2201      	movs	r2, #1
 80054e8:	2102      	movs	r1, #2
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff ff6a 	bl	80053c4 <SPI_WaitFlagStateUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fa:	f043 0220 	orr.w	r2, r3, #32
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e032      	b.n	800556c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005506:	4b1b      	ldr	r3, [pc, #108]	@ (8005574 <SPI_EndRxTxTransaction+0xa0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1b      	ldr	r2, [pc, #108]	@ (8005578 <SPI_EndRxTxTransaction+0xa4>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	0d5b      	lsrs	r3, r3, #21
 8005512:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005524:	d112      	bne.n	800554c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	2180      	movs	r1, #128	@ 0x80
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff47 	bl	80053c4 <SPI_WaitFlagStateUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d016      	beq.n	800556a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e00f      	b.n	800556c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3b01      	subs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005562:	2b80      	cmp	r3, #128	@ 0x80
 8005564:	d0f2      	beq.n	800554c <SPI_EndRxTxTransaction+0x78>
 8005566:	e000      	b.n	800556a <SPI_EndRxTxTransaction+0x96>
        break;
 8005568:	bf00      	nop
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200004ac 	.word	0x200004ac
 8005578:	165e9f81 	.word	0x165e9f81

0800557c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e041      	b.n	8005612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f839 	bl	800561a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f000 f9b2 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e044      	b.n	80056d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1e      	ldr	r2, [pc, #120]	@ (80056e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x6c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005672:	d013      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x6c>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1a      	ldr	r2, [pc, #104]	@ (80056e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x6c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a19      	ldr	r2, [pc, #100]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x6c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <HAL_TIM_Base_Start_IT+0xbc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x6c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d111      	bne.n	80056c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d010      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	e007      	b.n	80056d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40014000 	.word	0x40014000

080056f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d020      	beq.n	8005758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01b      	beq.n	8005758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0202 	mvn.w	r2, #2
 8005728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8d2 	bl	80058e8 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f8c4 	bl	80058d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8d5 	bl	80058fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d020      	beq.n	80057a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0204 	mvn.w	r2, #4
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8ac 	bl	80058e8 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f89e 	bl	80058d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f8af 	bl	80058fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0208 	mvn.w	r2, #8
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2204      	movs	r2, #4
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f886 	bl	80058e8 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f878 	bl	80058d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f889 	bl	80058fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0210 	mvn.w	r2, #16
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2208      	movs	r2, #8
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f860 	bl	80058e8 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f852 	bl	80058d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f863 	bl	80058fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0201 	mvn.w	r2, #1
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc ffb6 	bl	80027cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8e6 	bl	8005a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f834 	bl	8005910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00c      	beq.n	80058cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0220 	mvn.w	r2, #32
 80058c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8b8 	bl	8005a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a3a      	ldr	r2, [pc, #232]	@ (8005a20 <TIM_Base_SetConfig+0xfc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00f      	beq.n	800595c <TIM_Base_SetConfig+0x38>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005942:	d00b      	beq.n	800595c <TIM_Base_SetConfig+0x38>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a37      	ldr	r2, [pc, #220]	@ (8005a24 <TIM_Base_SetConfig+0x100>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d007      	beq.n	800595c <TIM_Base_SetConfig+0x38>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a36      	ldr	r2, [pc, #216]	@ (8005a28 <TIM_Base_SetConfig+0x104>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_Base_SetConfig+0x38>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a35      	ldr	r2, [pc, #212]	@ (8005a2c <TIM_Base_SetConfig+0x108>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d108      	bne.n	800596e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2b      	ldr	r2, [pc, #172]	@ (8005a20 <TIM_Base_SetConfig+0xfc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a28      	ldr	r2, [pc, #160]	@ (8005a24 <TIM_Base_SetConfig+0x100>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a27      	ldr	r2, [pc, #156]	@ (8005a28 <TIM_Base_SetConfig+0x104>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a26      	ldr	r2, [pc, #152]	@ (8005a2c <TIM_Base_SetConfig+0x108>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a25      	ldr	r2, [pc, #148]	@ (8005a30 <TIM_Base_SetConfig+0x10c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a24      	ldr	r2, [pc, #144]	@ (8005a34 <TIM_Base_SetConfig+0x110>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <TIM_Base_SetConfig+0x114>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a20 <TIM_Base_SetConfig+0xfc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d103      	bne.n	80059f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d105      	bne.n	8005a12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f023 0201 	bic.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]
  }
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40000400 	.word	0x40000400
 8005a28:	40000800 	.word	0x40000800
 8005a2c:	40000c00 	.word	0x40000c00
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800

08005a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <__NVIC_SetPriority>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	6039      	str	r1, [r7, #0]
 8005a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	db0a      	blt.n	8005a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	490c      	ldr	r1, [pc, #48]	@ (8005ab0 <__NVIC_SetPriority+0x4c>)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	0112      	lsls	r2, r2, #4
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	440b      	add	r3, r1
 8005a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a8c:	e00a      	b.n	8005aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4908      	ldr	r1, [pc, #32]	@ (8005ab4 <__NVIC_SetPriority+0x50>)
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	761a      	strb	r2, [r3, #24]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	e000e100 	.word	0xe000e100
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <SysTick_Handler+0x1c>)
 8005abe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ac0:	f002 f832 	bl	8007b28 <xTaskGetSchedulerState>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d001      	beq.n	8005ace <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005aca:	f002 ff2d 	bl	8008928 <xPortSysTickHandler>
  }
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	e000e010 	.word	0xe000e010

08005ad8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005adc:	2100      	movs	r1, #0
 8005ade:	f06f 0004 	mvn.w	r0, #4
 8005ae2:	f7ff ffbf 	bl	8005a64 <__NVIC_SetPriority>
#endif
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af2:	f3ef 8305 	mrs	r3, IPSR
 8005af6:	603b      	str	r3, [r7, #0]
  return(result);
 8005af8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005afe:	f06f 0305 	mvn.w	r3, #5
 8005b02:	607b      	str	r3, [r7, #4]
 8005b04:	e00c      	b.n	8005b20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b06:	4b0a      	ldr	r3, [pc, #40]	@ (8005b30 <osKernelInitialize+0x44>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d105      	bne.n	8005b1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b0e:	4b08      	ldr	r3, [pc, #32]	@ (8005b30 <osKernelInitialize+0x44>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	e002      	b.n	8005b20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b20:	687b      	ldr	r3, [r7, #4]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000710 	.word	0x20000710

08005b34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3a:	f3ef 8305 	mrs	r3, IPSR
 8005b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b46:	f06f 0305 	mvn.w	r3, #5
 8005b4a:	607b      	str	r3, [r7, #4]
 8005b4c:	e010      	b.n	8005b70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b7c <osKernelStart+0x48>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d109      	bne.n	8005b6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b56:	f7ff ffbf 	bl	8005ad8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b5a:	4b08      	ldr	r3, [pc, #32]	@ (8005b7c <osKernelStart+0x48>)
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b60:	f001 fb7e 	bl	8007260 <vTaskStartScheduler>
      stat = osOK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	e002      	b.n	8005b70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b70:	687b      	ldr	r3, [r7, #4]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000710 	.word	0x20000710

08005b80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	@ 0x38
 8005b84:	af04      	add	r7, sp, #16
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b90:	f3ef 8305 	mrs	r3, IPSR
 8005b94:	617b      	str	r3, [r7, #20]
  return(result);
 8005b96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d17e      	bne.n	8005c9a <osThreadNew+0x11a>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d07b      	beq.n	8005c9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ba2:	2380      	movs	r3, #128	@ 0x80
 8005ba4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ba6:	2318      	movs	r3, #24
 8005ba8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d045      	beq.n	8005c46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <osThreadNew+0x48>
        name = attr->name;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <osThreadNew+0x6e>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b38      	cmp	r3, #56	@ 0x38
 8005be0:	d805      	bhi.n	8005bee <osThreadNew+0x6e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <osThreadNew+0x72>
        return (NULL);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e054      	b.n	8005c9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <osThreadNew+0xa8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005c10:	d90a      	bls.n	8005c28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d006      	beq.n	8005c28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <osThreadNew+0xa8>
        mem = 1;
 8005c22:	2301      	movs	r3, #1
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e010      	b.n	8005c4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10c      	bne.n	8005c4a <osThreadNew+0xca>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d108      	bne.n	8005c4a <osThreadNew+0xca>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <osThreadNew+0xca>
          mem = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e001      	b.n	8005c4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d110      	bne.n	8005c72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c58:	9202      	str	r2, [sp, #8]
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6a3a      	ldr	r2, [r7, #32]
 8005c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 ff7e 	bl	8006b68 <xTaskCreateStatic>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	e013      	b.n	8005c9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d110      	bne.n	8005c9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	f107 0310 	add.w	r3, r7, #16
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 ffcc 	bl	8006c28 <xTaskCreate>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d001      	beq.n	8005c9a <osThreadNew+0x11a>
            hTask = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c9a:	693b      	ldr	r3, [r7, #16]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3728      	adds	r7, #40	@ 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cac:	f3ef 8305 	mrs	r3, IPSR
 8005cb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <osDelay+0x1c>
    stat = osErrorISR;
 8005cb8:	f06f 0305 	mvn.w	r3, #5
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	e007      	b.n	8005cd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 f98a 	bl	8006fe4 <vTaskDelay>
    }
  }

  return (stat);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a07      	ldr	r2, [pc, #28]	@ (8005d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4a06      	ldr	r2, [pc, #24]	@ (8005d0c <vApplicationGetIdleTaskMemory+0x30>)
 8005cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2280      	movs	r2, #128	@ 0x80
 8005cf8:	601a      	str	r2, [r3, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000714 	.word	0x20000714
 8005d0c:	200007bc 	.word	0x200007bc

08005d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4a06      	ldr	r2, [pc, #24]	@ (8005d40 <vApplicationGetTimerTaskMemory+0x30>)
 8005d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	200009bc 	.word	0x200009bc
 8005d40:	20000a64 	.word	0x20000a64

08005d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f103 0208 	add.w	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f103 0208 	add.w	r2, r3, #8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f103 0208 	add.w	r2, r3, #8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d103      	bne.n	8005e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e00c      	b.n	8005e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e002      	b.n	8005e14 <vListInsert+0x2e>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d2f6      	bcs.n	8005e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6892      	ldr	r2, [r2, #8]
 8005e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6852      	ldr	r2, [r2, #4]
 8005e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d103      	bne.n	8005e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	1e5a      	subs	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ed8:	f002 fc96 	bl	8008808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee4:	68f9      	ldr	r1, [r7, #12]
 8005ee6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	441a      	add	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	22ff      	movs	r2, #255	@ 0xff
 8005f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	@ 0xff
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d114      	bne.n	8005f58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01a      	beq.n	8005f6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3310      	adds	r3, #16
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fc2e 	bl	800779c <xTaskRemoveFromEventList>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f46:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <xQueueGenericReset+0xd0>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	e009      	b.n	8005f6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3310      	adds	r3, #16
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fef1 	bl	8005d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3324      	adds	r3, #36	@ 0x24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff feec 	bl	8005d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f6c:	f002 fc7e 	bl	800886c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f70:	2301      	movs	r3, #1
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	@ 0x38
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10b      	bne.n	8005fac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <xQueueGenericCreateStatic+0x56>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <xQueueGenericCreateStatic+0x5a>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueGenericCreateStatic+0x5c>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	623b      	str	r3, [r7, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <xQueueGenericCreateStatic+0x84>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <xQueueGenericCreateStatic+0x88>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <xQueueGenericCreateStatic+0x8a>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10b      	bne.n	8006026 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	61fb      	str	r3, [r7, #28]
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	e7fd      	b.n	8006022 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006026:	2350      	movs	r3, #80	@ 0x50
 8006028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b50      	cmp	r3, #80	@ 0x50
 800602e:	d00b      	beq.n	8006048 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	61bb      	str	r3, [r7, #24]
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	e7fd      	b.n	8006044 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006048:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800605c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f840 	bl	80060f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006072:	4618      	mov	r0, r3
 8006074:	3730      	adds	r7, #48	@ 0x30
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800607a:	b580      	push	{r7, lr}
 800607c:	b08a      	sub	sp, #40	@ 0x28
 800607e:	af02      	add	r7, sp, #8
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	613b      	str	r3, [r7, #16]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3350      	adds	r3, #80	@ 0x50
 80060b4:	4618      	mov	r0, r3
 80060b6:	f002 fcc9 	bl	8008a4c <pvPortMalloc>
 80060ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	3350      	adds	r3, #80	@ 0x50
 80060ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060d4:	79fa      	ldrb	r2, [r7, #7]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	4613      	mov	r3, r2
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f805 	bl	80060f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060e6:	69bb      	ldr	r3, [r7, #24]
	}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e002      	b.n	8006112 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800611e:	2101      	movs	r1, #1
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f7ff fec3 	bl	8005eac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	@ 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <xQueueGenericSend+0x34>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <xQueueGenericSend+0x42>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <xQueueGenericSend+0x46>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <xQueueGenericSend+0x48>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <xQueueGenericSend+0x64>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSend+0x72>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <xQueueGenericSend+0x76>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueGenericSend+0x78>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <xQueueGenericSend+0x94>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061cc:	f001 fcac 	bl	8007b28 <xTaskGetSchedulerState>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <xQueueGenericSend+0xa4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <xQueueGenericSend+0xa8>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <xQueueGenericSend+0xaa>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <xQueueGenericSend+0xc6>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61fb      	str	r3, [r7, #28]
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061fe:	f002 fb03 	bl	8008808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <xQueueGenericSend+0xdc>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d129      	bne.n	8006268 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800621a:	f000 fb37 	bl	800688c <prvCopyDataToQueue>
 800621e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	3324      	adds	r3, #36	@ 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f001 fab5 	bl	800779c <xTaskRemoveFromEventList>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006238:	4b3f      	ldr	r3, [pc, #252]	@ (8006338 <xQueueGenericSend+0x200>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	e00a      	b.n	8006260 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006250:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <xQueueGenericSend+0x200>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006260:	f002 fb04 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	e063      	b.n	8006330 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800626e:	f002 fafd 	bl	800886c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006272:	2300      	movs	r3, #0
 8006274:	e05c      	b.n	8006330 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4618      	mov	r0, r3
 8006282:	f001 faef 	bl	8007864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800628a:	f002 faef 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800628e:	f001 f857 	bl	8007340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006292:	f002 fab9 	bl	8008808 <vPortEnterCritical>
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <xQueueGenericSend+0x174>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x18a>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c2:	f002 fad3 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c6:	1d3a      	adds	r2, r7, #4
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fade 	bl	8007890 <xTaskCheckForTimeOut>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d124      	bne.n	8006324 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062dc:	f000 fbce 	bl	8006a7c <prvIsQueueFull>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	3310      	adds	r3, #16
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fa02 	bl	80076f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062f6:	f000 fb59 	bl	80069ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062fa:	f001 f82f 	bl	800735c <xTaskResumeAll>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af7c 	bne.w	80061fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006306:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <xQueueGenericSend+0x200>)
 8006308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	e772      	b.n	80061fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800631a:	f000 fb47 	bl	80069ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800631e:	f001 f81d 	bl	800735c <xTaskResumeAll>
 8006322:	e76c      	b.n	80061fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006326:	f000 fb41 	bl	80069ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632a:	f001 f817 	bl	800735c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800632e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006330:	4618      	mov	r0, r3
 8006332:	3738      	adds	r7, #56	@ 0x38
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b090      	sub	sp, #64	@ 0x40
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006366:	bf00      	nop
 8006368:	bf00      	nop
 800636a:	e7fd      	b.n	8006368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <xQueueGenericSendFromISR+0x3e>
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <xQueueGenericSendFromISR+0x42>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xQueueGenericSendFromISR+0x44>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d103      	bne.n	80063aa <xQueueGenericSendFromISR+0x6e>
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <xQueueGenericSendFromISR+0x72>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <xQueueGenericSendFromISR+0x74>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	623b      	str	r3, [r7, #32]
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	e7fd      	b.n	80063c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063cc:	f002 fafc 	bl	80089c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063d0:	f3ef 8211 	mrs	r2, BASEPRI
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	61fa      	str	r2, [r7, #28]
 80063e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d302      	bcc.n	80063fe <xQueueGenericSendFromISR+0xc2>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d12f      	bne.n	800645e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006414:	f000 fa3a 	bl	800688c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006418:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d112      	bne.n	8006448 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	3324      	adds	r3, #36	@ 0x24
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f9b4 	bl	800779c <xTaskRemoveFromEventList>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e007      	b.n	8006458 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800644c:	3301      	adds	r3, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	b25a      	sxtb	r2, r3
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006458:	2301      	movs	r3, #1
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800645c:	e001      	b.n	8006462 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006464:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800646c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800646e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006470:	4618      	mov	r0, r3
 8006472:	3740      	adds	r7, #64	@ 0x40
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	@ 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <xQueueReceive+0x32>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	623b      	str	r3, [r7, #32]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <xQueueReceive+0x40>
 80064b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <xQueueReceive+0x44>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <xQueueReceive+0x46>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <xQueueReceive+0x62>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	61fb      	str	r3, [r7, #28]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064da:	f001 fb25 	bl	8007b28 <xTaskGetSchedulerState>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <xQueueReceive+0x72>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <xQueueReceive+0x76>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueReceive+0x78>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <xQueueReceive+0x94>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	61bb      	str	r3, [r7, #24]
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	e7fd      	b.n	8006508 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800650c:	f002 f97c 	bl	8008808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01f      	beq.n	800655c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006520:	f000 fa1e 	bl	8006960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	1e5a      	subs	r2, r3, #1
 8006528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00f      	beq.n	8006554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	3310      	adds	r3, #16
 8006538:	4618      	mov	r0, r3
 800653a:	f001 f92f 	bl	800779c <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b3c      	ldr	r3, [pc, #240]	@ (8006638 <xQueueReceive+0x1c0>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006554:	f002 f98a 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006558:	2301      	movs	r3, #1
 800655a:	e069      	b.n	8006630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006562:	f002 f983 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006566:	2300      	movs	r3, #0
 8006568:	e062      	b.n	8006630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006570:	f107 0310 	add.w	r3, r7, #16
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f975 	bl	8007864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800657e:	f002 f975 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006582:	f000 fedd 	bl	8007340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006586:	f002 f93f 	bl	8008808 <vPortEnterCritical>
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006590:	b25b      	sxtb	r3, r3
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d103      	bne.n	80065a0 <xQueueReceive+0x128>
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065a6:	b25b      	sxtb	r3, r3
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d103      	bne.n	80065b6 <xQueueReceive+0x13e>
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065b6:	f002 f959 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ba:	1d3a      	adds	r2, r7, #4
 80065bc:	f107 0310 	add.w	r3, r7, #16
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f964 	bl	8007890 <xTaskCheckForTimeOut>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d123      	bne.n	8006616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d0:	f000 fa3e 	bl	8006a50 <prvIsQueueEmpty>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d017      	beq.n	800660a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	3324      	adds	r3, #36	@ 0x24
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4611      	mov	r1, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 f888 	bl	80076f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ea:	f000 f9df 	bl	80069ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065ee:	f000 feb5 	bl	800735c <xTaskResumeAll>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d189      	bne.n	800650c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006638 <xQueueReceive+0x1c0>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	e780      	b.n	800650c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800660a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800660c:	f000 f9ce 	bl	80069ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006610:	f000 fea4 	bl	800735c <xTaskResumeAll>
 8006614:	e77a      	b.n	800650c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006618:	f000 f9c8 	bl	80069ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800661c:	f000 fe9e 	bl	800735c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006622:	f000 fa15 	bl	8006a50 <prvIsQueueEmpty>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f43f af6f 	beq.w	800650c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800662e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006630:	4618      	mov	r0, r3
 8006632:	3730      	adds	r7, #48	@ 0x30
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08e      	sub	sp, #56	@ 0x38
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006646:	2300      	movs	r3, #0
 8006648:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	623b      	str	r3, [r7, #32]
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61fb      	str	r3, [r7, #28]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006690:	f001 fa4a 	bl	8007b28 <xTaskGetSchedulerState>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <xQueueSemaphoreTake+0x64>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <xQueueSemaphoreTake+0x68>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <xQueueSemaphoreTake+0x6a>
 80066a4:	2300      	movs	r3, #0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	61bb      	str	r3, [r7, #24]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066c2:	f002 f8a1 	bl	8008808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d024      	beq.n	800671c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066e2:	f001 fb9b 	bl	8007e1c <pvTaskIncrementMutexHeldCount>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00f      	beq.n	8006714 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f6:	3310      	adds	r3, #16
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f84f 	bl	800779c <xTaskRemoveFromEventList>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006704:	4b54      	ldr	r3, [pc, #336]	@ (8006858 <xQueueSemaphoreTake+0x21c>)
 8006706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006714:	f002 f8aa 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006718:	2301      	movs	r3, #1
 800671a:	e098      	b.n	800684e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d112      	bne.n	8006748 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	617b      	str	r3, [r7, #20]
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	e7fd      	b.n	800673c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006740:	f002 f894 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006744:	2300      	movs	r3, #0
 8006746:	e082      	b.n	800684e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f886 	bl	8007864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675c:	f002 f886 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006760:	f000 fdee 	bl	8007340 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006764:	f002 f850 	bl	8008808 <vPortEnterCritical>
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800676e:	b25b      	sxtb	r3, r3
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d103      	bne.n	800677e <xQueueSemaphoreTake+0x142>
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800677e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006780:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006784:	b25b      	sxtb	r3, r3
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d103      	bne.n	8006794 <xQueueSemaphoreTake+0x158>
 800678c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006794:	f002 f86a 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006798:	463a      	mov	r2, r7
 800679a:	f107 030c 	add.w	r3, r7, #12
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 f875 	bl	8007890 <xTaskCheckForTimeOut>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d132      	bne.n	8006812 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067ae:	f000 f94f 	bl	8006a50 <prvIsQueueEmpty>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d026      	beq.n	8006806 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80067c0:	f002 f822 	bl	8008808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 f9cb 	bl	8007b64 <xTaskPriorityInherit>
 80067ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80067d0:	f002 f84c 	bl	800886c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	3324      	adds	r3, #36	@ 0x24
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 ff8b 	bl	80076f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067e4:	f000 f8e2 	bl	80069ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067e8:	f000 fdb8 	bl	800735c <xTaskResumeAll>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f47f af67 	bne.w	80066c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80067f4:	4b18      	ldr	r3, [pc, #96]	@ (8006858 <xQueueSemaphoreTake+0x21c>)
 80067f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	e75d      	b.n	80066c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006808:	f000 f8d0 	bl	80069ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800680c:	f000 fda6 	bl	800735c <xTaskResumeAll>
 8006810:	e757      	b.n	80066c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006814:	f000 f8ca 	bl	80069ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006818:	f000 fda0 	bl	800735c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800681c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800681e:	f000 f917 	bl	8006a50 <prvIsQueueEmpty>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	f43f af4c 	beq.w	80066c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00d      	beq.n	800684c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006830:	f001 ffea 	bl	8008808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006834:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006836:	f000 f811 	bl	800685c <prvGetDisinheritPriorityAfterTimeout>
 800683a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006842:	4618      	mov	r0, r3
 8006844:	f001 fa66 	bl	8007d14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006848:	f002 f810 	bl	800886c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800684c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800684e:	4618      	mov	r0, r3
 8006850:	3738      	adds	r7, #56	@ 0x38
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d006      	beq.n	800687a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e001      	b.n	800687e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800687e:	68fb      	ldr	r3, [r7, #12]
	}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d14d      	bne.n	800694e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 f9bc 	bl	8007c34 <xTaskPriorityDisinherit>
 80068bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	e043      	b.n	800694e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d119      	bne.n	8006900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6858      	ldr	r0, [r3, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	461a      	mov	r2, r3
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	f002 fc18 	bl	800910c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e4:	441a      	add	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d32b      	bcc.n	800694e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	e026      	b.n	800694e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68d8      	ldr	r0, [r3, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	461a      	mov	r2, r3
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	f002 fbfe 	bl	800910c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006918:	425b      	negs	r3, r3
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d207      	bcs.n	800693c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	425b      	negs	r3, r3
 8006936:	441a      	add	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d105      	bne.n	800694e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3b01      	subs	r3, #1
 800694c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006956:	697b      	ldr	r3, [r7, #20]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d018      	beq.n	80069a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697a:	441a      	add	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	429a      	cmp	r2, r3
 800698a:	d303      	bcc.n	8006994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68d9      	ldr	r1, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699c:	461a      	mov	r2, r3
 800699e:	6838      	ldr	r0, [r7, #0]
 80069a0:	f002 fbb4 	bl	800910c <memcpy>
	}
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069b4:	f001 ff28 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069c0:	e011      	b.n	80069e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d012      	beq.n	80069f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3324      	adds	r3, #36	@ 0x24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fee4 	bl	800779c <xTaskRemoveFromEventList>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069da:	f000 ffbd 	bl	8007958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dce9      	bgt.n	80069c2 <prvUnlockQueue+0x16>
 80069ee:	e000      	b.n	80069f2 <prvUnlockQueue+0x46>
					break;
 80069f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	22ff      	movs	r2, #255	@ 0xff
 80069f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069fa:	f001 ff37 	bl	800886c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069fe:	f001 ff03 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a0a:	e011      	b.n	8006a30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d012      	beq.n	8006a3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3310      	adds	r3, #16
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 febf 	bl	800779c <xTaskRemoveFromEventList>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a24:	f000 ff98 	bl	8007958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dce9      	bgt.n	8006a0c <prvUnlockQueue+0x60>
 8006a38:	e000      	b.n	8006a3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	22ff      	movs	r2, #255	@ 0xff
 8006a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a44:	f001 ff12 	bl	800886c <vPortExitCritical>
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a58:	f001 fed6 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e001      	b.n	8006a6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a6e:	f001 fefd 	bl	800886c <vPortExitCritical>

	return xReturn;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a84:	f001 fec0 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d102      	bne.n	8006a9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e001      	b.n	8006a9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a9e:	f001 fee5 	bl	800886c <vPortExitCritical>

	return xReturn;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e014      	b.n	8006ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006abc:	4a0f      	ldr	r2, [pc, #60]	@ (8006afc <vQueueAddToRegistry+0x50>)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ac8:	490c      	ldr	r1, [pc, #48]	@ (8006afc <vQueueAddToRegistry+0x50>)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <vQueueAddToRegistry+0x50>)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4413      	add	r3, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ade:	e006      	b.n	8006aee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	d9e7      	bls.n	8006abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000e64 	.word	0x20000e64

08006b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b10:	f001 fe7a 	bl	8008808 <vPortEnterCritical>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <vQueueWaitForMessageRestricted+0x2a>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d103      	bne.n	8006b40 <vQueueWaitForMessageRestricted+0x40>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b40:	f001 fe94 	bl	800886c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3324      	adds	r3, #36	@ 0x24
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fdf5 	bl	8007744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b5a:	6978      	ldr	r0, [r7, #20]
 8006b5c:	f7ff ff26 	bl	80069ac <prvUnlockQueue>
	}
 8006b60:	bf00      	nop
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08e      	sub	sp, #56	@ 0x38
 8006b6c:	af04      	add	r7, sp, #16
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	623b      	str	r3, [r7, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61fb      	str	r3, [r7, #28]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bb2:	23a8      	movs	r3, #168	@ 0xa8
 8006bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2ba8      	cmp	r3, #168	@ 0xa8
 8006bba:	d00b      	beq.n	8006bd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	61bb      	str	r3, [r7, #24]
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01e      	beq.n	8006c1a <xTaskCreateStatic+0xb2>
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01b      	beq.n	8006c1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	9302      	str	r3, [sp, #8]
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f851 	bl	8006cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c14:	f000 f8f6 	bl	8006e04 <prvAddNewTaskToReadyList>
 8006c18:	e001      	b.n	8006c1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c1e:	697b      	ldr	r3, [r7, #20]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3728      	adds	r7, #40	@ 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08c      	sub	sp, #48	@ 0x30
 8006c2c:	af04      	add	r7, sp, #16
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 ff05 	bl	8008a4c <pvPortMalloc>
 8006c42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c4a:	20a8      	movs	r0, #168	@ 0xa8
 8006c4c:	f001 fefe 	bl	8008a4c <pvPortMalloc>
 8006c50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c5e:	e005      	b.n	8006c6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c60:	6978      	ldr	r0, [r7, #20]
 8006c62:	f001 ffc1 	bl	8008be8 <vPortFree>
 8006c66:	e001      	b.n	8006c6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d017      	beq.n	8006ca2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	9302      	str	r3, [sp, #8]
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f80f 	bl	8006cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c96:	69f8      	ldr	r0, [r7, #28]
 8006c98:	f000 f8b4 	bl	8006e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	e002      	b.n	8006ca8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
	}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	461a      	mov	r2, r3
 8006ccc:	21a5      	movs	r1, #165	@ 0xa5
 8006cce:	f002 f97b 	bl	8008fc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	617b      	str	r3, [r7, #20]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01f      	beq.n	8006d54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	e012      	b.n	8006d40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	7819      	ldrb	r1, [r3, #0]
 8006d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	3334      	adds	r3, #52	@ 0x34
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d006      	beq.n	8006d48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2b0f      	cmp	r3, #15
 8006d44:	d9e9      	bls.n	8006d1a <prvInitialiseNewTask+0x66>
 8006d46:	e000      	b.n	8006d4a <prvInitialiseNewTask+0x96>
			{
				break;
 8006d48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d52:	e003      	b.n	8006d5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	2b37      	cmp	r3, #55	@ 0x37
 8006d60:	d901      	bls.n	8006d66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d62:	2337      	movs	r3, #55	@ 0x37
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	2200      	movs	r2, #0
 8006d76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff f801 	bl	8005d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	3318      	adds	r3, #24
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fffc 	bl	8005d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	3354      	adds	r3, #84	@ 0x54
 8006db6:	224c      	movs	r2, #76	@ 0x4c
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 f904 	bl	8008fc8 <memset>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8006df8 <prvInitialiseNewTask+0x144>)
 8006dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8006dfc <prvInitialiseNewTask+0x148>)
 8006dca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	4a0c      	ldr	r2, [pc, #48]	@ (8006e00 <prvInitialiseNewTask+0x14c>)
 8006dd0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	68f9      	ldr	r1, [r7, #12]
 8006dd6:	69b8      	ldr	r0, [r7, #24]
 8006dd8:	f001 fbe2 	bl	80085a0 <pxPortInitialiseStack>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dee:	bf00      	nop
 8006df0:	3720      	adds	r7, #32
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20005100 	.word	0x20005100
 8006dfc:	20005168 	.word	0x20005168
 8006e00:	200051d0 	.word	0x200051d0

08006e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e0c:	f001 fcfc 	bl	8008808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e10:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec8 <prvAddNewTaskToReadyList+0xc4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a2c      	ldr	r2, [pc, #176]	@ (8006ec8 <prvAddNewTaskToReadyList+0xc4>)
 8006e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006ecc <prvAddNewTaskToReadyList+0xc8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e22:	4a2a      	ldr	r2, [pc, #168]	@ (8006ecc <prvAddNewTaskToReadyList+0xc8>)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e28:	4b27      	ldr	r3, [pc, #156]	@ (8006ec8 <prvAddNewTaskToReadyList+0xc4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d110      	bne.n	8006e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e30:	f000 fdb6 	bl	80079a0 <prvInitialiseTaskLists>
 8006e34:	e00d      	b.n	8006e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e36:	4b26      	ldr	r3, [pc, #152]	@ (8006ed0 <prvAddNewTaskToReadyList+0xcc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e3e:	4b23      	ldr	r3, [pc, #140]	@ (8006ecc <prvAddNewTaskToReadyList+0xc8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d802      	bhi.n	8006e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006ecc <prvAddNewTaskToReadyList+0xc8>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e52:	4b20      	ldr	r3, [pc, #128]	@ (8006ed4 <prvAddNewTaskToReadyList+0xd0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed4 <prvAddNewTaskToReadyList+0xd0>)
 8006e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <prvAddNewTaskToReadyList+0xd0>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <prvAddNewTaskToReadyList+0xd4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d903      	bls.n	8006e78 <prvAddNewTaskToReadyList+0x74>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	4a18      	ldr	r2, [pc, #96]	@ (8006ed8 <prvAddNewTaskToReadyList+0xd4>)
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <prvAddNewTaskToReadyList+0xd8>)
 8006e86:	441a      	add	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4610      	mov	r0, r2
 8006e90:	f7fe ff85 	bl	8005d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e94:	f001 fcea 	bl	800886c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e98:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <prvAddNewTaskToReadyList+0xcc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <prvAddNewTaskToReadyList+0xc8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d207      	bcs.n	8006ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <prvAddNewTaskToReadyList+0xdc>)
 8006eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ebe:	bf00      	nop
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20001378 	.word	0x20001378
 8006ecc:	20000ea4 	.word	0x20000ea4
 8006ed0:	20001384 	.word	0x20001384
 8006ed4:	20001394 	.word	0x20001394
 8006ed8:	20001380 	.word	0x20001380
 8006edc:	20000ea8 	.word	0x20000ea8
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	@ 0x28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	617b      	str	r3, [r7, #20]
}
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	613b      	str	r3, [r7, #16]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd8 <vTaskDelayUntil+0xf4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00b      	beq.n	8006f4e <vTaskDelayUntil+0x6a>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	60fb      	str	r3, [r7, #12]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006f4e:	f000 f9f7 	bl	8007340 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006f52:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <vTaskDelayUntil+0xf8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	4413      	add	r3, r2
 8006f60:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d20b      	bcs.n	8006f84 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d211      	bcs.n	8006f9a <vTaskDelayUntil+0xb6>
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d90d      	bls.n	8006f9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f82:	e00a      	b.n	8006f9a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d303      	bcc.n	8006f96 <vTaskDelayUntil+0xb2>
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d901      	bls.n	8006f9a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f96:	2301      	movs	r3, #1
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 ff48 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006fb4:	f000 f9d2 	bl	800735c <xTaskResumeAll>
 8006fb8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d107      	bne.n	8006fd0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006fc0:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <vTaskDelayUntil+0xfc>)
 8006fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fd0:	bf00      	nop
 8006fd2:	3728      	adds	r7, #40	@ 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	200013a0 	.word	0x200013a0
 8006fdc:	2000137c 	.word	0x2000137c
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ff6:	4b14      	ldr	r3, [pc, #80]	@ (8007048 <vTaskDelay+0x64>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <vTaskDelay+0x32>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60bb      	str	r3, [r7, #8]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007016:	f000 f993 	bl	8007340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800701a:	2100      	movs	r1, #0
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 ff11 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007022:	f000 f99b 	bl	800735c <xTaskResumeAll>
 8007026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d107      	bne.n	800703e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800702e:	4b07      	ldr	r3, [pc, #28]	@ (800704c <vTaskDelay+0x68>)
 8007030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200013a0 	.word	0x200013a0
 800704c:	e000ed04 	.word	0xe000ed04

08007050 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007058:	f001 fbd6 	bl	8008808 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <vTaskSuspend+0x18>
 8007062:	4b30      	ldr	r3, [pc, #192]	@ (8007124 <vTaskSuspend+0xd4>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	e000      	b.n	800706a <vTaskSuspend+0x1a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fef1 	bl	8005e58 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3318      	adds	r3, #24
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fee8 	bl	8005e58 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4826      	ldr	r0, [pc, #152]	@ (8007128 <vTaskSuspend+0xd8>)
 8007090:	f7fe fe85 	bl	8005d9e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d103      	bne.n	80070a8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80070a8:	f001 fbe0 	bl	800886c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80070ac:	4b1f      	ldr	r3, [pc, #124]	@ (800712c <vTaskSuspend+0xdc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80070b4:	f001 fba8 	bl	8008808 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80070b8:	f000 fd16 	bl	8007ae8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80070bc:	f001 fbd6 	bl	800886c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80070c0:	4b18      	ldr	r3, [pc, #96]	@ (8007124 <vTaskSuspend+0xd4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d128      	bne.n	800711c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80070ca:	4b18      	ldr	r3, [pc, #96]	@ (800712c <vTaskSuspend+0xdc>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d018      	beq.n	8007104 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80070d2:	4b17      	ldr	r3, [pc, #92]	@ (8007130 <vTaskSuspend+0xe0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <vTaskSuspend+0xa2>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60bb      	str	r3, [r7, #8]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <vTaskSuspend+0xe4>)
 80070f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007102:	e00b      	b.n	800711c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007104:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <vTaskSuspend+0xd8>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <vTaskSuspend+0xe8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d103      	bne.n	8007118 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8007110:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <vTaskSuspend+0xd4>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
	}
 8007116:	e001      	b.n	800711c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8007118:	f000 fa88 	bl	800762c <vTaskSwitchContext>
	}
 800711c:	bf00      	nop
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000ea4 	.word	0x20000ea4
 8007128:	20001364 	.word	0x20001364
 800712c:	20001384 	.word	0x20001384
 8007130:	200013a0 	.word	0x200013a0
 8007134:	e000ed04 	.word	0xe000ed04
 8007138:	20001378 	.word	0x20001378

0800713c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60fb      	str	r3, [r7, #12]
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	e7fd      	b.n	8007166 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	4a0a      	ldr	r2, [pc, #40]	@ (8007198 <prvTaskIsTaskSuspended+0x5c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10a      	bne.n	800718a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	4a08      	ldr	r2, [pc, #32]	@ (800719c <prvTaskIsTaskSuspended+0x60>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d005      	beq.n	800718a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800718a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20001364 	.word	0x20001364
 800719c:	20001338 	.word	0x20001338

080071a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <vTaskResume+0x2a>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60bb      	str	r3, [r7, #8]
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	e7fd      	b.n	80071c6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80071ca:	4b21      	ldr	r3, [pc, #132]	@ (8007250 <vTaskResume+0xb0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d038      	beq.n	8007246 <vTaskResume+0xa6>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d035      	beq.n	8007246 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80071da:	f001 fb15 	bl	8008808 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ffac 	bl	800713c <prvTaskIsTaskSuspended>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d02b      	beq.n	8007242 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fe32 	bl	8005e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f8:	4b16      	ldr	r3, [pc, #88]	@ (8007254 <vTaskResume+0xb4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d903      	bls.n	8007208 <vTaskResume+0x68>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	4a13      	ldr	r2, [pc, #76]	@ (8007254 <vTaskResume+0xb4>)
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4a10      	ldr	r2, [pc, #64]	@ (8007258 <vTaskResume+0xb8>)
 8007216:	441a      	add	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7fe fdbd 	bl	8005d9e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007228:	4b09      	ldr	r3, [pc, #36]	@ (8007250 <vTaskResume+0xb0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	429a      	cmp	r2, r3
 8007230:	d307      	bcc.n	8007242 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007232:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <vTaskResume+0xbc>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007242:	f001 fb13 	bl	800886c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000ea4 	.word	0x20000ea4
 8007254:	20001380 	.word	0x20001380
 8007258:	20000ea8 	.word	0x20000ea8
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	@ 0x28
 8007264:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800726e:	463a      	mov	r2, r7
 8007270:	1d39      	adds	r1, r7, #4
 8007272:	f107 0308 	add.w	r3, r7, #8
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fd30 	bl	8005cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	9202      	str	r2, [sp, #8]
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	460a      	mov	r2, r1
 800728e:	4924      	ldr	r1, [pc, #144]	@ (8007320 <vTaskStartScheduler+0xc0>)
 8007290:	4824      	ldr	r0, [pc, #144]	@ (8007324 <vTaskStartScheduler+0xc4>)
 8007292:	f7ff fc69 	bl	8006b68 <xTaskCreateStatic>
 8007296:	4603      	mov	r3, r0
 8007298:	4a23      	ldr	r2, [pc, #140]	@ (8007328 <vTaskStartScheduler+0xc8>)
 800729a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800729c:	4b22      	ldr	r3, [pc, #136]	@ (8007328 <vTaskStartScheduler+0xc8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072a4:	2301      	movs	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e001      	b.n	80072ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d102      	bne.n	80072ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072b4:	f000 fe1a 	bl	8007eec <xTimerCreateTimerTask>
 80072b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11b      	bne.n	80072f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <vTaskStartScheduler+0xcc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3354      	adds	r3, #84	@ 0x54
 80072da:	4a15      	ldr	r2, [pc, #84]	@ (8007330 <vTaskStartScheduler+0xd0>)
 80072dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072de:	4b15      	ldr	r3, [pc, #84]	@ (8007334 <vTaskStartScheduler+0xd4>)
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295
 80072e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072e6:	4b14      	ldr	r3, [pc, #80]	@ (8007338 <vTaskStartScheduler+0xd8>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072ec:	4b13      	ldr	r3, [pc, #76]	@ (800733c <vTaskStartScheduler+0xdc>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072f2:	f001 f9e5 	bl	80086c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072f6:	e00f      	b.n	8007318 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d10b      	bne.n	8007318 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <vTaskStartScheduler+0xb4>
}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	080099a0 	.word	0x080099a0
 8007324:	08007971 	.word	0x08007971
 8007328:	2000139c 	.word	0x2000139c
 800732c:	20000ea4 	.word	0x20000ea4
 8007330:	200004bc 	.word	0x200004bc
 8007334:	20001398 	.word	0x20001398
 8007338:	20001384 	.word	0x20001384
 800733c:	2000137c 	.word	0x2000137c

08007340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <vTaskSuspendAll+0x18>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	4a03      	ldr	r2, [pc, #12]	@ (8007358 <vTaskSuspendAll+0x18>)
 800734c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800734e:	bf00      	nop
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	200013a0 	.word	0x200013a0

0800735c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800736a:	4b42      	ldr	r3, [pc, #264]	@ (8007474 <xTaskResumeAll+0x118>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10b      	bne.n	800738a <xTaskResumeAll+0x2e>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	603b      	str	r3, [r7, #0]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800738a:	f001 fa3d 	bl	8008808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800738e:	4b39      	ldr	r3, [pc, #228]	@ (8007474 <xTaskResumeAll+0x118>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3b01      	subs	r3, #1
 8007394:	4a37      	ldr	r2, [pc, #220]	@ (8007474 <xTaskResumeAll+0x118>)
 8007396:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007398:	4b36      	ldr	r3, [pc, #216]	@ (8007474 <xTaskResumeAll+0x118>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d162      	bne.n	8007466 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073a0:	4b35      	ldr	r3, [pc, #212]	@ (8007478 <xTaskResumeAll+0x11c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05e      	beq.n	8007466 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073a8:	e02f      	b.n	800740a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073aa:	4b34      	ldr	r3, [pc, #208]	@ (800747c <xTaskResumeAll+0x120>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3318      	adds	r3, #24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fd4e 	bl	8005e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3304      	adds	r3, #4
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fd49 	bl	8005e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007480 <xTaskResumeAll+0x124>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d903      	bls.n	80073da <xTaskResumeAll+0x7e>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007480 <xTaskResumeAll+0x124>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4a27      	ldr	r2, [pc, #156]	@ (8007484 <xTaskResumeAll+0x128>)
 80073e8:	441a      	add	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe fcd4 	bl	8005d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	4b23      	ldr	r3, [pc, #140]	@ (8007488 <xTaskResumeAll+0x12c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	429a      	cmp	r2, r3
 8007402:	d302      	bcc.n	800740a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007404:	4b21      	ldr	r3, [pc, #132]	@ (800748c <xTaskResumeAll+0x130>)
 8007406:	2201      	movs	r2, #1
 8007408:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800740a:	4b1c      	ldr	r3, [pc, #112]	@ (800747c <xTaskResumeAll+0x120>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1cb      	bne.n	80073aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007418:	f000 fb66 	bl	8007ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800741c:	4b1c      	ldr	r3, [pc, #112]	@ (8007490 <xTaskResumeAll+0x134>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007428:	f000 f846 	bl	80074b8 <xTaskIncrementTick>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007432:	4b16      	ldr	r3, [pc, #88]	@ (800748c <xTaskResumeAll+0x130>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3b01      	subs	r3, #1
 800743c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f1      	bne.n	8007428 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007444:	4b12      	ldr	r3, [pc, #72]	@ (8007490 <xTaskResumeAll+0x134>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800744a:	4b10      	ldr	r3, [pc, #64]	@ (800748c <xTaskResumeAll+0x130>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007456:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <xTaskResumeAll+0x138>)
 8007458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007466:	f001 fa01 	bl	800886c <vPortExitCritical>

	return xAlreadyYielded;
 800746a:	68bb      	ldr	r3, [r7, #8]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	200013a0 	.word	0x200013a0
 8007478:	20001378 	.word	0x20001378
 800747c:	20001338 	.word	0x20001338
 8007480:	20001380 	.word	0x20001380
 8007484:	20000ea8 	.word	0x20000ea8
 8007488:	20000ea4 	.word	0x20000ea4
 800748c:	2000138c 	.word	0x2000138c
 8007490:	20001388 	.word	0x20001388
 8007494:	e000ed04 	.word	0xe000ed04

08007498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800749e:	4b05      	ldr	r3, [pc, #20]	@ (80074b4 <xTaskGetTickCount+0x1c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074a4:	687b      	ldr	r3, [r7, #4]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	2000137c 	.word	0x2000137c

080074b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007600 <xTaskIncrementTick+0x148>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f040 8090 	bne.w	80075ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007604 <xTaskIncrementTick+0x14c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007604 <xTaskIncrementTick+0x14c>)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d121      	bne.n	8007524 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074e0:	4b49      	ldr	r3, [pc, #292]	@ (8007608 <xTaskIncrementTick+0x150>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <xTaskIncrementTick+0x4a>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	603b      	str	r3, [r7, #0]
}
 80074fc:	bf00      	nop
 80074fe:	bf00      	nop
 8007500:	e7fd      	b.n	80074fe <xTaskIncrementTick+0x46>
 8007502:	4b41      	ldr	r3, [pc, #260]	@ (8007608 <xTaskIncrementTick+0x150>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	4b40      	ldr	r3, [pc, #256]	@ (800760c <xTaskIncrementTick+0x154>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3e      	ldr	r2, [pc, #248]	@ (8007608 <xTaskIncrementTick+0x150>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	4a3e      	ldr	r2, [pc, #248]	@ (800760c <xTaskIncrementTick+0x154>)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	4b3e      	ldr	r3, [pc, #248]	@ (8007610 <xTaskIncrementTick+0x158>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3301      	adds	r3, #1
 800751c:	4a3c      	ldr	r2, [pc, #240]	@ (8007610 <xTaskIncrementTick+0x158>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	f000 fae2 	bl	8007ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007524:	4b3b      	ldr	r3, [pc, #236]	@ (8007614 <xTaskIncrementTick+0x15c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	d349      	bcc.n	80075c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800752e:	4b36      	ldr	r3, [pc, #216]	@ (8007608 <xTaskIncrementTick+0x150>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007538:	4b36      	ldr	r3, [pc, #216]	@ (8007614 <xTaskIncrementTick+0x15c>)
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	601a      	str	r2, [r3, #0]
					break;
 8007540:	e03f      	b.n	80075c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007542:	4b31      	ldr	r3, [pc, #196]	@ (8007608 <xTaskIncrementTick+0x150>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d203      	bcs.n	8007562 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800755a:	4a2e      	ldr	r2, [pc, #184]	@ (8007614 <xTaskIncrementTick+0x15c>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007560:	e02f      	b.n	80075c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3304      	adds	r3, #4
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fc76 	bl	8005e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	3318      	adds	r3, #24
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fc6d 	bl	8005e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007582:	4b25      	ldr	r3, [pc, #148]	@ (8007618 <xTaskIncrementTick+0x160>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d903      	bls.n	8007592 <xTaskIncrementTick+0xda>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	4a22      	ldr	r2, [pc, #136]	@ (8007618 <xTaskIncrementTick+0x160>)
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4a1f      	ldr	r2, [pc, #124]	@ (800761c <xTaskIncrementTick+0x164>)
 80075a0:	441a      	add	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f7fe fbf8 	bl	8005d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <xTaskIncrementTick+0x168>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d3b8      	bcc.n	800752e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075c0:	e7b5      	b.n	800752e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075c2:	4b17      	ldr	r3, [pc, #92]	@ (8007620 <xTaskIncrementTick+0x168>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	4914      	ldr	r1, [pc, #80]	@ (800761c <xTaskIncrementTick+0x164>)
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d901      	bls.n	80075de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075de:	4b11      	ldr	r3, [pc, #68]	@ (8007624 <xTaskIncrementTick+0x16c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80075e6:	2301      	movs	r3, #1
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	e004      	b.n	80075f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007628 <xTaskIncrementTick+0x170>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <xTaskIncrementTick+0x170>)
 80075f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075f6:	697b      	ldr	r3, [r7, #20]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	200013a0 	.word	0x200013a0
 8007604:	2000137c 	.word	0x2000137c
 8007608:	20001330 	.word	0x20001330
 800760c:	20001334 	.word	0x20001334
 8007610:	20001390 	.word	0x20001390
 8007614:	20001398 	.word	0x20001398
 8007618:	20001380 	.word	0x20001380
 800761c:	20000ea8 	.word	0x20000ea8
 8007620:	20000ea4 	.word	0x20000ea4
 8007624:	2000138c 	.word	0x2000138c
 8007628:	20001388 	.word	0x20001388

0800762c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007632:	4b2b      	ldr	r3, [pc, #172]	@ (80076e0 <vTaskSwitchContext+0xb4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800763a:	4b2a      	ldr	r3, [pc, #168]	@ (80076e4 <vTaskSwitchContext+0xb8>)
 800763c:	2201      	movs	r2, #1
 800763e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007640:	e047      	b.n	80076d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007642:	4b28      	ldr	r3, [pc, #160]	@ (80076e4 <vTaskSwitchContext+0xb8>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007648:	4b27      	ldr	r3, [pc, #156]	@ (80076e8 <vTaskSwitchContext+0xbc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e011      	b.n	8007674 <vTaskSwitchContext+0x48>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <vTaskSwitchContext+0x42>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	607b      	str	r3, [r7, #4]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vTaskSwitchContext+0x3e>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3b01      	subs	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	491d      	ldr	r1, [pc, #116]	@ (80076ec <vTaskSwitchContext+0xc0>)
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0e3      	beq.n	8007650 <vTaskSwitchContext+0x24>
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <vTaskSwitchContext+0xc0>)
 8007694:	4413      	add	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	3308      	adds	r3, #8
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d104      	bne.n	80076b8 <vTaskSwitchContext+0x8c>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	605a      	str	r2, [r3, #4]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <vTaskSwitchContext+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	4a09      	ldr	r2, [pc, #36]	@ (80076e8 <vTaskSwitchContext+0xbc>)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <vTaskSwitchContext+0xc4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3354      	adds	r3, #84	@ 0x54
 80076ce:	4a09      	ldr	r2, [pc, #36]	@ (80076f4 <vTaskSwitchContext+0xc8>)
 80076d0:	6013      	str	r3, [r2, #0]
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	200013a0 	.word	0x200013a0
 80076e4:	2000138c 	.word	0x2000138c
 80076e8:	20001380 	.word	0x20001380
 80076ec:	20000ea8 	.word	0x20000ea8
 80076f0:	20000ea4 	.word	0x20000ea4
 80076f4:	200004bc 	.word	0x200004bc

080076f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10b      	bne.n	8007720 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60fb      	str	r3, [r7, #12]
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <vTaskPlaceOnEventList+0x48>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3318      	adds	r3, #24
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe fb5c 	bl	8005de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800772e:	2101      	movs	r1, #1
 8007730:	6838      	ldr	r0, [r7, #0]
 8007732:	f000 fb87 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000ea4 	.word	0x20000ea4

08007744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	617b      	str	r3, [r7, #20]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800776e:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <vTaskPlaceOnEventListRestricted+0x54>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3318      	adds	r3, #24
 8007774:	4619      	mov	r1, r3
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7fe fb11 	bl	8005d9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f000 fb5a 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
	}
 8007790:	bf00      	nop
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000ea4 	.word	0x20000ea4

0800779c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60fb      	str	r3, [r7, #12]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3318      	adds	r3, #24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fb42 	bl	8005e58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d4:	4b1d      	ldr	r3, [pc, #116]	@ (800784c <xTaskRemoveFromEventList+0xb0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11d      	bne.n	8007818 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	3304      	adds	r3, #4
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fb39 	bl	8005e58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b19      	ldr	r3, [pc, #100]	@ (8007850 <xTaskRemoveFromEventList+0xb4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d903      	bls.n	80077fa <xTaskRemoveFromEventList+0x5e>
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	4a16      	ldr	r2, [pc, #88]	@ (8007850 <xTaskRemoveFromEventList+0xb4>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a13      	ldr	r2, [pc, #76]	@ (8007854 <xTaskRemoveFromEventList+0xb8>)
 8007808:	441a      	add	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7fe fac4 	bl	8005d9e <vListInsertEnd>
 8007816:	e005      	b.n	8007824 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	3318      	adds	r3, #24
 800781c:	4619      	mov	r1, r3
 800781e:	480e      	ldr	r0, [pc, #56]	@ (8007858 <xTaskRemoveFromEventList+0xbc>)
 8007820:	f7fe fabd 	bl	8005d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007828:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <xTaskRemoveFromEventList+0xc0>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	429a      	cmp	r2, r3
 8007830:	d905      	bls.n	800783e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <xTaskRemoveFromEventList+0xc4>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	e001      	b.n	8007842 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200013a0 	.word	0x200013a0
 8007850:	20001380 	.word	0x20001380
 8007854:	20000ea8 	.word	0x20000ea8
 8007858:	20001338 	.word	0x20001338
 800785c:	20000ea4 	.word	0x20000ea4
 8007860:	2000138c 	.word	0x2000138c

08007864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800786c:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <vTaskInternalSetTimeOutState+0x24>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007874:	4b05      	ldr	r3, [pc, #20]	@ (800788c <vTaskInternalSetTimeOutState+0x28>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	605a      	str	r2, [r3, #4]
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	20001390 	.word	0x20001390
 800788c:	2000137c 	.word	0x2000137c

08007890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e7fd      	b.n	80078d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80078d6:	f000 ff97 	bl	8008808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80078da:	4b1d      	ldr	r3, [pc, #116]	@ (8007950 <xTaskCheckForTimeOut+0xc0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d102      	bne.n	80078fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	e023      	b.n	8007942 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b15      	ldr	r3, [pc, #84]	@ (8007954 <xTaskCheckForTimeOut+0xc4>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d007      	beq.n	8007916 <xTaskCheckForTimeOut+0x86>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	d302      	bcc.n	8007916 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
 8007914:	e015      	b.n	8007942 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	d20b      	bcs.n	8007938 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ff99 	bl	8007864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	e004      	b.n	8007942 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007942:	f000 ff93 	bl	800886c <vPortExitCritical>

	return xReturn;
 8007946:	69fb      	ldr	r3, [r7, #28]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2000137c 	.word	0x2000137c
 8007954:	20001390 	.word	0x20001390

08007958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800795c:	4b03      	ldr	r3, [pc, #12]	@ (800796c <vTaskMissedYield+0x14>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	2000138c 	.word	0x2000138c

08007970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007978:	f000 f852 	bl	8007a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800797c:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <prvIdleTask+0x28>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d9f9      	bls.n	8007978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <prvIdleTask+0x2c>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007994:	e7f0      	b.n	8007978 <prvIdleTask+0x8>
 8007996:	bf00      	nop
 8007998:	20000ea8 	.word	0x20000ea8
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
 80079aa:	e00c      	b.n	80079c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4a12      	ldr	r2, [pc, #72]	@ (8007a00 <prvInitialiseTaskLists+0x60>)
 80079b8:	4413      	add	r3, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f9c2 	bl	8005d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3301      	adds	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b37      	cmp	r3, #55	@ 0x37
 80079ca:	d9ef      	bls.n	80079ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079cc:	480d      	ldr	r0, [pc, #52]	@ (8007a04 <prvInitialiseTaskLists+0x64>)
 80079ce:	f7fe f9b9 	bl	8005d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079d2:	480d      	ldr	r0, [pc, #52]	@ (8007a08 <prvInitialiseTaskLists+0x68>)
 80079d4:	f7fe f9b6 	bl	8005d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079d8:	480c      	ldr	r0, [pc, #48]	@ (8007a0c <prvInitialiseTaskLists+0x6c>)
 80079da:	f7fe f9b3 	bl	8005d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079de:	480c      	ldr	r0, [pc, #48]	@ (8007a10 <prvInitialiseTaskLists+0x70>)
 80079e0:	f7fe f9b0 	bl	8005d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079e4:	480b      	ldr	r0, [pc, #44]	@ (8007a14 <prvInitialiseTaskLists+0x74>)
 80079e6:	f7fe f9ad 	bl	8005d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <prvInitialiseTaskLists+0x78>)
 80079ec:	4a05      	ldr	r2, [pc, #20]	@ (8007a04 <prvInitialiseTaskLists+0x64>)
 80079ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079f0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <prvInitialiseTaskLists+0x7c>)
 80079f2:	4a05      	ldr	r2, [pc, #20]	@ (8007a08 <prvInitialiseTaskLists+0x68>)
 80079f4:	601a      	str	r2, [r3, #0]
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000ea8 	.word	0x20000ea8
 8007a04:	20001308 	.word	0x20001308
 8007a08:	2000131c 	.word	0x2000131c
 8007a0c:	20001338 	.word	0x20001338
 8007a10:	2000134c 	.word	0x2000134c
 8007a14:	20001364 	.word	0x20001364
 8007a18:	20001330 	.word	0x20001330
 8007a1c:	20001334 	.word	0x20001334

08007a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a26:	e019      	b.n	8007a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a28:	f000 feee 	bl	8008808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2c:	4b10      	ldr	r3, [pc, #64]	@ (8007a70 <prvCheckTasksWaitingTermination+0x50>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fa0d 	bl	8005e58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	4a0b      	ldr	r2, [pc, #44]	@ (8007a74 <prvCheckTasksWaitingTermination+0x54>)
 8007a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a48:	4b0b      	ldr	r3, [pc, #44]	@ (8007a78 <prvCheckTasksWaitingTermination+0x58>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a78 <prvCheckTasksWaitingTermination+0x58>)
 8007a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a52:	f000 ff0b 	bl	800886c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f810 	bl	8007a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <prvCheckTasksWaitingTermination+0x58>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e1      	bne.n	8007a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	2000134c 	.word	0x2000134c
 8007a74:	20001378 	.word	0x20001378
 8007a78:	20001360 	.word	0x20001360

08007a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3354      	adds	r3, #84	@ 0x54
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 faa5 	bl	8008fd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 f8a3 	bl	8008be8 <vPortFree>
				vPortFree( pxTCB );
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f8a0 	bl	8008be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa8:	e019      	b.n	8007ade <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d103      	bne.n	8007abc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f897 	bl	8008be8 <vPortFree>
	}
 8007aba:	e010      	b.n	8007ade <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d00b      	beq.n	8007ade <prvDeleteTCB+0x62>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60fb      	str	r3, [r7, #12]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <prvDeleteTCB+0x5e>
	}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <prvResetNextTaskUnblockTime+0x38>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b24 <prvResetNextTaskUnblockTime+0x3c>)
 8007afa:	f04f 32ff 	mov.w	r2, #4294967295
 8007afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b00:	e008      	b.n	8007b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b02:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <prvResetNextTaskUnblockTime+0x38>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4a04      	ldr	r2, [pc, #16]	@ (8007b24 <prvResetNextTaskUnblockTime+0x3c>)
 8007b12:	6013      	str	r3, [r2, #0]
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	20001330 	.word	0x20001330
 8007b24:	20001398 	.word	0x20001398

08007b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <xTaskGetSchedulerState+0x34>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b36:	2301      	movs	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
 8007b3a:	e008      	b.n	8007b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3c:	4b08      	ldr	r3, [pc, #32]	@ (8007b60 <xTaskGetSchedulerState+0x38>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b44:	2302      	movs	r3, #2
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	e001      	b.n	8007b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b4e:	687b      	ldr	r3, [r7, #4]
	}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20001384 	.word	0x20001384
 8007b60:	200013a0 	.word	0x200013a0

08007b64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d051      	beq.n	8007c1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d241      	bcs.n	8007c0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	db06      	blt.n	8007b9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b90:	4b25      	ldr	r3, [pc, #148]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6959      	ldr	r1, [r3, #20]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4a1f      	ldr	r2, [pc, #124]	@ (8007c2c <xTaskPriorityInherit+0xc8>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	d122      	bne.n	8007bfc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe f94c 	bl	8005e58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bc0:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bce:	4b18      	ldr	r3, [pc, #96]	@ (8007c30 <xTaskPriorityInherit+0xcc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d903      	bls.n	8007bde <xTaskPriorityInherit+0x7a>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4a15      	ldr	r2, [pc, #84]	@ (8007c30 <xTaskPriorityInherit+0xcc>)
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4a10      	ldr	r2, [pc, #64]	@ (8007c2c <xTaskPriorityInherit+0xc8>)
 8007bec:	441a      	add	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fe f8d2 	bl	8005d9e <vListInsertEnd>
 8007bfa:	e004      	b.n	8007c06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e008      	b.n	8007c1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c10:	4b05      	ldr	r3, [pc, #20]	@ (8007c28 <xTaskPriorityInherit+0xc4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d201      	bcs.n	8007c1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000ea4 	.word	0x20000ea4
 8007c2c:	20000ea8 	.word	0x20000ea8
 8007c30:	20001380 	.word	0x20001380

08007c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d058      	beq.n	8007cfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d08 <xTaskPriorityDisinherit+0xd4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d00b      	beq.n	8007c6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60bb      	str	r3, [r7, #8]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c90:	1e5a      	subs	r2, r3, #1
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d02c      	beq.n	8007cfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d128      	bne.n	8007cfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe f8d2 	bl	8005e58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <xTaskPriorityDisinherit+0xa8>
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4a09      	ldr	r2, [pc, #36]	@ (8007d10 <xTaskPriorityDisinherit+0xdc>)
 8007cea:	441a      	add	r2, r3
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f7fe f853 	bl	8005d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
	}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000ea4 	.word	0x20000ea4
 8007d0c:	20001380 	.word	0x20001380
 8007d10:	20000ea8 	.word	0x20000ea8

08007d14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d22:	2301      	movs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d06c      	beq.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	60fb      	str	r3, [r7, #12]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d902      	bls.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	e002      	b.n	8007d62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d04c      	beq.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d147      	bne.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d76:	4b26      	ldr	r3, [pc, #152]	@ (8007e10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d10b      	bne.n	8007d98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	60bb      	str	r3, [r7, #8]
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	db04      	blt.n	8007db6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	6959      	ldr	r1, [r3, #20]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4a13      	ldr	r2, [pc, #76]	@ (8007e14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007dc6:	4413      	add	r3, r2
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	d11c      	bne.n	8007e06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe f841 	bl	8005e58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	4b0f      	ldr	r3, [pc, #60]	@ (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d903      	bls.n	8007dea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de6:	4a0c      	ldr	r2, [pc, #48]	@ (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4a07      	ldr	r2, [pc, #28]	@ (8007e14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007df8:	441a      	add	r2, r3
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7fd ffcc 	bl	8005d9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e06:	bf00      	nop
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000ea4 	.word	0x20000ea4
 8007e14:	20000ea8 	.word	0x20000ea8
 8007e18:	20001380 	.word	0x20001380

08007e1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e20:	4b07      	ldr	r3, [pc, #28]	@ (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e2e:	3201      	adds	r2, #1
 8007e30:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007e32:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e34:	681b      	ldr	r3, [r3, #0]
	}
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000ea4 	.word	0x20000ea4

08007e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e4e:	4b21      	ldr	r3, [pc, #132]	@ (8007ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fd fffc 	bl	8005e58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d10a      	bne.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4819      	ldr	r0, [pc, #100]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x98>)
 8007e78:	f7fd ff91 	bl	8005d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e7c:	e026      	b.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e86:	4b14      	ldr	r3, [pc, #80]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d209      	bcs.n	8007eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e96:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fd ff9f 	bl	8005de6 <vListInsert>
}
 8007ea8:	e010      	b.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fd ff95 	bl	8005de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d202      	bcs.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ec6:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6013      	str	r3, [r2, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	2000137c 	.word	0x2000137c
 8007ed8:	20000ea4 	.word	0x20000ea4
 8007edc:	20001364 	.word	0x20001364
 8007ee0:	20001334 	.word	0x20001334
 8007ee4:	20001330 	.word	0x20001330
 8007ee8:	20001398 	.word	0x20001398

08007eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ef6:	f000 fb13 	bl	8008520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007efa:	4b1d      	ldr	r3, [pc, #116]	@ (8007f70 <xTimerCreateTimerTask+0x84>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d021      	beq.n	8007f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f0a:	1d3a      	adds	r2, r7, #4
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fd fefb 	bl	8005d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	9202      	str	r2, [sp, #8]
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2302      	movs	r3, #2
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	4911      	ldr	r1, [pc, #68]	@ (8007f74 <xTimerCreateTimerTask+0x88>)
 8007f2e:	4812      	ldr	r0, [pc, #72]	@ (8007f78 <xTimerCreateTimerTask+0x8c>)
 8007f30:	f7fe fe1a 	bl	8006b68 <xTaskCreateStatic>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4a11      	ldr	r2, [pc, #68]	@ (8007f7c <xTimerCreateTimerTask+0x90>)
 8007f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f3a:	4b10      	ldr	r3, [pc, #64]	@ (8007f7c <xTimerCreateTimerTask+0x90>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f42:	2301      	movs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	613b      	str	r3, [r7, #16]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200013d4 	.word	0x200013d4
 8007f74:	080099a8 	.word	0x080099a8
 8007f78:	080080b9 	.word	0x080080b9
 8007f7c:	200013d8 	.word	0x200013d8

08007f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	@ 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	623b      	str	r3, [r7, #32]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fb0:	4b19      	ldr	r3, [pc, #100]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02a      	beq.n	800800e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b05      	cmp	r3, #5
 8007fc8:	dc18      	bgt.n	8007ffc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fca:	f7ff fdad 	bl	8007b28 <xTaskGetSchedulerState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d109      	bne.n	8007fe8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	f107 0110 	add.w	r1, r7, #16
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe0:	f7fe f8aa 	bl	8006138 <xQueueGenericSend>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fe6:	e012      	b.n	800800e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	f107 0110 	add.w	r1, r7, #16
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7fe f8a0 	bl	8006138 <xQueueGenericSend>
 8007ff8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ffa:	e008      	b.n	800800e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	f107 0110 	add.w	r1, r7, #16
 8008004:	2300      	movs	r3, #0
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	f7fe f998 	bl	800633c <xQueueGenericSendFromISR>
 800800c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	@ 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	200013d4 	.word	0x200013d4

0800801c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008026:	4b23      	ldr	r3, [pc, #140]	@ (80080b4 <prvProcessExpiredTimer+0x98>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	3304      	adds	r3, #4
 8008034:	4618      	mov	r0, r3
 8008036:	f7fd ff0f 	bl	8005e58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d023      	beq.n	8008090 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	699a      	ldr	r2, [r3, #24]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	18d1      	adds	r1, r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	6978      	ldr	r0, [r7, #20]
 8008056:	f000 f8d5 	bl	8008204 <prvInsertTimerInActiveList>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d020      	beq.n	80080a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	2100      	movs	r1, #0
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7ff ff88 	bl	8007f80 <xTimerGenericCommand>
 8008070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d114      	bne.n	80080a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	4798      	blx	r3
}
 80080aa:	bf00      	nop
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200013cc 	.word	0x200013cc

080080b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f859 	bl	800817c <prvGetNextExpireTime>
 80080ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f805 	bl	80080e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080d6:	f000 f8d7 	bl	8008288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080da:	bf00      	nop
 80080dc:	e7f0      	b.n	80080c0 <prvTimerTask+0x8>
	...

080080e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ea:	f7ff f929 	bl	8007340 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f866 	bl	80081c4 <prvSampleTimeNow>
 80080f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d130      	bne.n	8008162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <prvProcessTimerOrBlockTask+0x3c>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d806      	bhi.n	800811c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800810e:	f7ff f925 	bl	800735c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff81 	bl	800801c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800811a:	e024      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008122:	4b13      	ldr	r3, [pc, #76]	@ (8008170 <prvProcessTimerOrBlockTask+0x90>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <prvProcessTimerOrBlockTask+0x50>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <prvProcessTimerOrBlockTask+0x52>
 8008130:	2300      	movs	r3, #0
 8008132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008134:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <prvProcessTimerOrBlockTask+0x94>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	f7fe fcdd 	bl	8006b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008146:	f7ff f909 	bl	800735c <xTaskResumeAll>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008150:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <prvProcessTimerOrBlockTask+0x98>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
}
 8008160:	e001      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008162:	f7ff f8fb 	bl	800735c <xTaskResumeAll>
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200013d0 	.word	0x200013d0
 8008174:	200013d4 	.word	0x200013d4
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008184:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <prvGetNextExpireTime+0x44>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <prvGetNextExpireTime+0x16>
 800818e:	2201      	movs	r2, #1
 8008190:	e000      	b.n	8008194 <prvGetNextExpireTime+0x18>
 8008192:	2200      	movs	r2, #0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081a0:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <prvGetNextExpireTime+0x44>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e001      	b.n	80081b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	200013cc 	.word	0x200013cc

080081c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081cc:	f7ff f964 	bl	8007498 <xTaskGetTickCount>
 80081d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <prvSampleTimeNow+0x3c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d205      	bcs.n	80081e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081dc:	f000 f93a 	bl	8008454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e002      	b.n	80081ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ee:	4a04      	ldr	r2, [pc, #16]	@ (8008200 <prvSampleTimeNow+0x3c>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	200013dc 	.word	0x200013dc

08008204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d812      	bhi.n	8008250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e01b      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800823e:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <prvInsertTimerInActiveList+0x7c>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fd fdcc 	bl	8005de6 <vListInsert>
 800824e:	e012      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d206      	bcs.n	8008266 <prvInsertTimerInActiveList+0x62>
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e007      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <prvInsertTimerInActiveList+0x80>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fd fdb8 	bl	8005de6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200013d0 	.word	0x200013d0
 8008284:	200013cc 	.word	0x200013cc

08008288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	@ 0x38
 800828c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800828e:	e0ce      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da19      	bge.n	80082ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	3304      	adds	r3, #4
 800829a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61fb      	str	r3, [r7, #28]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c0:	6850      	ldr	r0, [r2, #4]
 80082c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c4:	6892      	ldr	r2, [r2, #8]
 80082c6:	4611      	mov	r1, r2
 80082c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f2c0 80ae 	blt.w	800842e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	3304      	adds	r3, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fd fdb8 	bl	8005e58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082e8:	463b      	mov	r3, r7
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff ff6a 	bl	80081c4 <prvSampleTimeNow>
 80082f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	f200 8097 	bhi.w	8008428 <prvProcessReceivedCommands+0x1a0>
 80082fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008300 <prvProcessReceivedCommands+0x78>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008329 	.word	0x08008329
 8008304:	08008329 	.word	0x08008329
 8008308:	08008329 	.word	0x08008329
 800830c:	0800839f 	.word	0x0800839f
 8008310:	080083b3 	.word	0x080083b3
 8008314:	080083ff 	.word	0x080083ff
 8008318:	08008329 	.word	0x08008329
 800831c:	08008329 	.word	0x08008329
 8008320:	0800839f 	.word	0x0800839f
 8008324:	080083b3 	.word	0x080083b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	18d1      	adds	r1, r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008348:	f7ff ff5c 	bl	8008204 <prvInsertTimerInActiveList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d06c      	beq.n	800842c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d061      	beq.n	800842c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	441a      	add	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800837a:	f7ff fe01 	bl	8007f80 <xTimerGenericCommand>
 800837e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d152      	bne.n	800842c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61bb      	str	r3, [r7, #24]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083b0:	e03d      	b.n	800842e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	617b      	str	r3, [r7, #20]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	18d1      	adds	r1, r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f8:	f7ff ff04 	bl	8008204 <prvInsertTimerInActiveList>
					break;
 80083fc:	e017      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800840c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800840e:	f000 fbeb 	bl	8008be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008412:	e00c      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008426:	e002      	b.n	800842e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
					break;
 800842c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800842e:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <prvProcessReceivedCommands+0x1c8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1d39      	adds	r1, r7, #4
 8008434:	2200      	movs	r2, #0
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe f81e 	bl	8006478 <xQueueReceive>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	f47f af26 	bne.w	8008290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	3730      	adds	r7, #48	@ 0x30
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200013d4 	.word	0x200013d4

08008454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800845a:	e049      	b.n	80084f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845c:	4b2e      	ldr	r3, [pc, #184]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008466:	4b2c      	ldr	r3, [pc, #176]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd fcef 	bl	8005e58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02f      	beq.n	80084f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d90e      	bls.n	80084c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fd fc94 	bl	8005de6 <vListInsert>
 80084be:	e017      	b.n	80084f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c0:	2300      	movs	r3, #0
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	2100      	movs	r1, #0
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fd58 	bl	8007f80 <xTimerGenericCommand>
 80084d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	603b      	str	r3, [r7, #0]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084f0:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1b0      	bne.n	800845c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084fa:	4b07      	ldr	r3, [pc, #28]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <prvSwitchTimerLists+0xc8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 8008506:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008508:	4a04      	ldr	r2, [pc, #16]	@ (800851c <prvSwitchTimerLists+0xc8>)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	6013      	str	r3, [r2, #0]
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	200013cc 	.word	0x200013cc
 800851c:	200013d0 	.word	0x200013d0

08008520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008526:	f000 f96f 	bl	8008808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d120      	bne.n	8008574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008532:	4814      	ldr	r0, [pc, #80]	@ (8008584 <prvCheckForValidListAndQueue+0x64>)
 8008534:	f7fd fc06 	bl	8005d44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008538:	4813      	ldr	r0, [pc, #76]	@ (8008588 <prvCheckForValidListAndQueue+0x68>)
 800853a:	f7fd fc03 	bl	8005d44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800853e:	4b13      	ldr	r3, [pc, #76]	@ (800858c <prvCheckForValidListAndQueue+0x6c>)
 8008540:	4a10      	ldr	r2, [pc, #64]	@ (8008584 <prvCheckForValidListAndQueue+0x64>)
 8008542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <prvCheckForValidListAndQueue+0x70>)
 8008546:	4a10      	ldr	r2, [pc, #64]	@ (8008588 <prvCheckForValidListAndQueue+0x68>)
 8008548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800854a:	2300      	movs	r3, #0
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4b11      	ldr	r3, [pc, #68]	@ (8008594 <prvCheckForValidListAndQueue+0x74>)
 8008550:	4a11      	ldr	r2, [pc, #68]	@ (8008598 <prvCheckForValidListAndQueue+0x78>)
 8008552:	2110      	movs	r1, #16
 8008554:	200a      	movs	r0, #10
 8008556:	f7fd fd13 	bl	8005f80 <xQueueGenericCreateStatic>
 800855a:	4603      	mov	r3, r0
 800855c:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800855e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008560:	4b07      	ldr	r3, [pc, #28]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	490b      	ldr	r1, [pc, #44]	@ (800859c <prvCheckForValidListAndQueue+0x7c>)
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fa9c 	bl	8006aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008574:	f000 f97a 	bl	800886c <vPortExitCritical>
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200013d4 	.word	0x200013d4
 8008584:	200013a4 	.word	0x200013a4
 8008588:	200013b8 	.word	0x200013b8
 800858c:	200013cc 	.word	0x200013cc
 8008590:	200013d0 	.word	0x200013d0
 8008594:	20001480 	.word	0x20001480
 8008598:	200013e0 	.word	0x200013e0
 800859c:	080099b0 	.word	0x080099b0

080085a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b04      	subs	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f023 0201 	bic.w	r2, r3, #1
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008604 <pxPortInitialiseStack+0x64>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3b14      	subs	r3, #20
 80085da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f06f 0202 	mvn.w	r2, #2
 80085ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3b20      	subs	r3, #32
 80085f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085f6:	68fb      	ldr	r3, [r7, #12]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	08008609 	.word	0x08008609

08008608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008612:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <prvTaskExitError+0x58>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d00b      	beq.n	8008634 <prvTaskExitError+0x2c>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <prvTaskExitError+0x28>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	60bb      	str	r3, [r7, #8]
}
 8008646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008648:	bf00      	nop
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0fc      	beq.n	800864a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	200004b8 	.word	0x200004b8
	...

08008670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <pxCurrentTCBConst2>)
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	6808      	ldr	r0, [r1, #0]
 8008676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	f380 8809 	msr	PSP, r0
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	4770      	bx	lr
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst2>:
 8008690:	20000ea4 	.word	0x20000ea4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008698:	4808      	ldr	r0, [pc, #32]	@ (80086bc <prvPortStartFirstTask+0x24>)
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	6800      	ldr	r0, [r0, #0]
 800869e:	f380 8808 	msr	MSP, r0
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8814 	msr	CONTROL, r0
 80086aa:	b662      	cpsie	i
 80086ac:	b661      	cpsie	f
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	df00      	svc	0
 80086b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086ba:	bf00      	nop
 80086bc:	e000ed08 	.word	0xe000ed08

080086c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086c6:	4b47      	ldr	r3, [pc, #284]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a47      	ldr	r2, [pc, #284]	@ (80087e8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10b      	bne.n	80086e8 <xPortStartScheduler+0x28>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086e8:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3f      	ldr	r2, [pc, #252]	@ (80087ec <xPortStartScheduler+0x12c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d10b      	bne.n	800870a <xPortStartScheduler+0x4a>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	613b      	str	r3, [r7, #16]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800870a:	4b39      	ldr	r3, [pc, #228]	@ (80087f0 <xPortStartScheduler+0x130>)
 800870c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800872c:	b2da      	uxtb	r2, r3
 800872e:	4b31      	ldr	r3, [pc, #196]	@ (80087f4 <xPortStartScheduler+0x134>)
 8008730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008732:	4b31      	ldr	r3, [pc, #196]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008738:	e009      	b.n	800874e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800873a:	4b2f      	ldr	r3, [pc, #188]	@ (80087f8 <xPortStartScheduler+0x138>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a2d      	ldr	r2, [pc, #180]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008756:	2b80      	cmp	r3, #128	@ 0x80
 8008758:	d0ef      	beq.n	800873a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <xPortStartScheduler+0x138>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1c3 0307 	rsb	r3, r3, #7
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00b      	beq.n	800877e <xPortStartScheduler+0xbe>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800877e:	4b1e      	ldr	r3, [pc, #120]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008788:	4b1b      	ldr	r3, [pc, #108]	@ (80087f8 <xPortStartScheduler+0x138>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008790:	4a19      	ldr	r2, [pc, #100]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800879c:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <xPortStartScheduler+0x13c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087a8:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087b4:	f000 f8da 	bl	800896c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087b8:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <xPortStartScheduler+0x140>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087be:	f000 f8f9 	bl	80089b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087ce:	f7ff ff63 	bl	8008698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087d2:	f7fe ff2b 	bl	800762c <vTaskSwitchContext>
	prvTaskExitError();
 80087d6:	f7ff ff17 	bl	8008608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed00 	.word	0xe000ed00
 80087e8:	410fc271 	.word	0x410fc271
 80087ec:	410fc270 	.word	0x410fc270
 80087f0:	e000e400 	.word	0xe000e400
 80087f4:	200014d0 	.word	0x200014d0
 80087f8:	200014d4 	.word	0x200014d4
 80087fc:	e000ed20 	.word	0xe000ed20
 8008800:	200004b8 	.word	0x200004b8
 8008804:	e000ef34 	.word	0xe000ef34

08008808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008822:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <vPortEnterCritical+0x5c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a0e      	ldr	r2, [pc, #56]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800882c:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d110      	bne.n	8008856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008834:	4b0c      	ldr	r3, [pc, #48]	@ (8008868 <vPortEnterCritical+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <vPortEnterCritical+0x4e>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	603b      	str	r3, [r7, #0]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <vPortEnterCritical+0x4a>
	}
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	200004b8 	.word	0x200004b8
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <vPortExitCritical+0x26>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3b01      	subs	r3, #1
 8008898:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <vPortExitCritical+0x50>)
 800889a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <vPortExitCritical+0x50>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <vPortExitCritical+0x44>
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	200004b8 	.word	0x200004b8

080088c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088c0:	f3ef 8009 	mrs	r0, PSP
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <pxCurrentTCBConst>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f01e 0f10 	tst.w	lr, #16
 80088d0:	bf08      	it	eq
 80088d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	6010      	str	r0, [r2, #0]
 80088dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80088e4:	f380 8811 	msr	BASEPRI, r0
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f7fe fe9c 	bl	800762c <vTaskSwitchContext>
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	f380 8811 	msr	BASEPRI, r0
 80088fc:	bc09      	pop	{r0, r3}
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	6808      	ldr	r0, [r1, #0]
 8008902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008906:	f01e 0f10 	tst.w	lr, #16
 800890a:	bf08      	it	eq
 800890c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008910:	f380 8809 	msr	PSP, r0
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst>:
 8008920:	20000ea4 	.word	0x20000ea4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	607b      	str	r3, [r7, #4]
}
 8008940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008942:	f7fe fdb9 	bl	80074b8 <xTaskIncrementTick>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <xPortSysTickHandler+0x40>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	2300      	movs	r3, #0
 8008956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f383 8811 	msr	BASEPRI, r3
}
 800895e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <vPortSetupTimerInterrupt+0x38>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800897c:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <vPortSetupTimerInterrupt+0x3c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0a      	ldr	r2, [pc, #40]	@ (80089ac <vPortSetupTimerInterrupt+0x40>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	099b      	lsrs	r3, r3, #6
 8008988:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <vPortSetupTimerInterrupt+0x44>)
 800898a:	3b01      	subs	r3, #1
 800898c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800898e:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008990:	2207      	movs	r2, #7
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	e000e010 	.word	0xe000e010
 80089a4:	e000e018 	.word	0xe000e018
 80089a8:	200004ac 	.word	0x200004ac
 80089ac:	10624dd3 	.word	0x10624dd3
 80089b0:	e000e014 	.word	0xe000e014

080089b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80089c4 <vPortEnableVFP+0x10>
 80089b8:	6801      	ldr	r1, [r0, #0]
 80089ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80089be:	6001      	str	r1, [r0, #0]
 80089c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089c2:	bf00      	nop
 80089c4:	e000ed88 	.word	0xe000ed88

080089c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d915      	bls.n	8008a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089da:	4a18      	ldr	r2, [pc, #96]	@ (8008a3c <vPortValidateInterruptPriority+0x74>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089e4:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <vPortValidateInterruptPriority+0x78>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	7afa      	ldrb	r2, [r7, #11]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d20b      	bcs.n	8008a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a06:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <vPortValidateInterruptPriority+0x7c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a48 <vPortValidateInterruptPriority+0x80>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d90b      	bls.n	8008a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	603b      	str	r3, [r7, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vPortValidateInterruptPriority+0x62>
	}
 8008a2e:	bf00      	nop
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	e000e3f0 	.word	0xe000e3f0
 8008a40:	200014d0 	.word	0x200014d0
 8008a44:	e000ed0c 	.word	0xe000ed0c
 8008a48:	200014d4 	.word	0x200014d4

08008a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08a      	sub	sp, #40	@ 0x28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a58:	f7fe fc72 	bl	8007340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a64:	f000 f924 	bl	8008cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a68:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 8095 	bne.w	8008ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01e      	beq.n	8008aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d015      	beq.n	8008aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <pvPortMalloc+0x6e>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	617b      	str	r3, [r7, #20]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d06f      	beq.n	8008ba0 <pvPortMalloc+0x154>
 8008ac0:	4b45      	ldr	r3, [pc, #276]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d86a      	bhi.n	8008ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aca:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <pvPortMalloc+0x190>)
 8008acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ace:	4b43      	ldr	r3, [pc, #268]	@ (8008bdc <pvPortMalloc+0x190>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ad4:	e004      	b.n	8008ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <pvPortMalloc+0xa6>
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f1      	bne.n	8008ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008af2:	4b37      	ldr	r3, [pc, #220]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d051      	beq.n	8008ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4413      	add	r3, r2
 8008b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	2308      	movs	r3, #8
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d920      	bls.n	8008b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <pvPortMalloc+0xfc>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1ad2      	subs	r2, r2, r3
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b5a:	69b8      	ldr	r0, [r7, #24]
 8008b5c:	f000 f90a 	bl	8008d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d203      	bcs.n	8008b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b7a:	4b17      	ldr	r3, [pc, #92]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a18      	ldr	r2, [pc, #96]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	4b13      	ldr	r3, [pc, #76]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b96:	4b13      	ldr	r3, [pc, #76]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ba0:	f7fe fbdc 	bl	800735c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00b      	beq.n	8008bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3728      	adds	r7, #40	@ 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200050e0 	.word	0x200050e0
 8008bd4:	200050f4 	.word	0x200050f4
 8008bd8:	200050e4 	.word	0x200050e4
 8008bdc:	200050d8 	.word	0x200050d8
 8008be0:	200050e8 	.word	0x200050e8
 8008be4:	200050ec 	.word	0x200050ec

08008be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d04f      	beq.n	8008c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ca4 <vPortFree+0xbc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <vPortFree+0x46>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <vPortFree+0x66>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60bb      	str	r3, [r7, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4b14      	ldr	r3, [pc, #80]	@ (8008ca4 <vPortFree+0xbc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4013      	ands	r3, r2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11a      	bne.n	8008c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca4 <vPortFree+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c74:	f7fe fb64 	bl	8007340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <vPortFree+0xc0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4413      	add	r3, r2
 8008c82:	4a09      	ldr	r2, [pc, #36]	@ (8008ca8 <vPortFree+0xc0>)
 8008c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c86:	6938      	ldr	r0, [r7, #16]
 8008c88:	f000 f874 	bl	8008d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <vPortFree+0xc4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	4a06      	ldr	r2, [pc, #24]	@ (8008cac <vPortFree+0xc4>)
 8008c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c96:	f7fe fb61 	bl	800735c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200050f4 	.word	0x200050f4
 8008ca8:	200050e4 	.word	0x200050e4
 8008cac:	200050f0 	.word	0x200050f0

08008cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cbc:	4b27      	ldr	r3, [pc, #156]	@ (8008d5c <prvHeapInit+0xac>)
 8008cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3307      	adds	r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	4a1f      	ldr	r2, [pc, #124]	@ (8008d5c <prvHeapInit+0xac>)
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cee:	4b1c      	ldr	r3, [pc, #112]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d30:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d68 <prvHeapInit+0xb8>)
 8008d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4a09      	ldr	r2, [pc, #36]	@ (8008d6c <prvHeapInit+0xbc>)
 8008d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d48:	4b09      	ldr	r3, [pc, #36]	@ (8008d70 <prvHeapInit+0xc0>)
 8008d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d4e:	601a      	str	r2, [r3, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	200014d8 	.word	0x200014d8
 8008d60:	200050d8 	.word	0x200050d8
 8008d64:	200050e0 	.word	0x200050e0
 8008d68:	200050e8 	.word	0x200050e8
 8008d6c:	200050e4 	.word	0x200050e4
 8008d70:	200050f4 	.word	0x200050f4

08008d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d7c:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <prvInsertBlockIntoFreeList+0xac>)
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e002      	b.n	8008d88 <prvInsertBlockIntoFreeList+0x14>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d8f7      	bhi.n	8008d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d108      	bne.n	8008db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d118      	bne.n	8008dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d00d      	beq.n	8008df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	441a      	add	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e008      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008df2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e003      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d002      	beq.n	8008e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	200050d8 	.word	0x200050d8
 8008e24:	200050e0 	.word	0x200050e0

08008e28 <sbrk_aligned>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8008e68 <sbrk_aligned+0x40>)
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	6831      	ldr	r1, [r6, #0]
 8008e30:	4605      	mov	r5, r0
 8008e32:	b911      	cbnz	r1, 8008e3a <sbrk_aligned+0x12>
 8008e34:	f000 f92e 	bl	8009094 <_sbrk_r>
 8008e38:	6030      	str	r0, [r6, #0]
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f000 f929 	bl	8009094 <_sbrk_r>
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	d103      	bne.n	8008e4e <sbrk_aligned+0x26>
 8008e46:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	1cc4      	adds	r4, r0, #3
 8008e50:	f024 0403 	bic.w	r4, r4, #3
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	d0f8      	beq.n	8008e4a <sbrk_aligned+0x22>
 8008e58:	1a21      	subs	r1, r4, r0
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 f91a 	bl	8009094 <_sbrk_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d1f2      	bne.n	8008e4a <sbrk_aligned+0x22>
 8008e64:	e7ef      	b.n	8008e46 <sbrk_aligned+0x1e>
 8008e66:	bf00      	nop
 8008e68:	200050f8 	.word	0x200050f8

08008e6c <_malloc_r>:
 8008e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	1ccd      	adds	r5, r1, #3
 8008e72:	f025 0503 	bic.w	r5, r5, #3
 8008e76:	3508      	adds	r5, #8
 8008e78:	2d0c      	cmp	r5, #12
 8008e7a:	bf38      	it	cc
 8008e7c:	250c      	movcc	r5, #12
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	4606      	mov	r6, r0
 8008e82:	db01      	blt.n	8008e88 <_malloc_r+0x1c>
 8008e84:	42a9      	cmp	r1, r5
 8008e86:	d904      	bls.n	8008e92 <_malloc_r+0x26>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	6033      	str	r3, [r6, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f68 <_malloc_r+0xfc>
 8008e96:	f000 f869 	bl	8008f6c <__malloc_lock>
 8008e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	bb44      	cbnz	r4, 8008ef4 <_malloc_r+0x88>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffbf 	bl	8008e28 <sbrk_aligned>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	4604      	mov	r4, r0
 8008eae:	d158      	bne.n	8008f62 <_malloc_r+0xf6>
 8008eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8008eb4:	4627      	mov	r7, r4
 8008eb6:	2f00      	cmp	r7, #0
 8008eb8:	d143      	bne.n	8008f42 <_malloc_r+0xd6>
 8008eba:	2c00      	cmp	r4, #0
 8008ebc:	d04b      	beq.n	8008f56 <_malloc_r+0xea>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	eb04 0903 	add.w	r9, r4, r3
 8008ec8:	f000 f8e4 	bl	8009094 <_sbrk_r>
 8008ecc:	4581      	cmp	r9, r0
 8008ece:	d142      	bne.n	8008f56 <_malloc_r+0xea>
 8008ed0:	6821      	ldr	r1, [r4, #0]
 8008ed2:	1a6d      	subs	r5, r5, r1
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ffa6 	bl	8008e28 <sbrk_aligned>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d03a      	beq.n	8008f56 <_malloc_r+0xea>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	442b      	add	r3, r5
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	bb62      	cbnz	r2, 8008f48 <_malloc_r+0xdc>
 8008eee:	f8c8 7000 	str.w	r7, [r8]
 8008ef2:	e00f      	b.n	8008f14 <_malloc_r+0xa8>
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	1b52      	subs	r2, r2, r5
 8008ef8:	d420      	bmi.n	8008f3c <_malloc_r+0xd0>
 8008efa:	2a0b      	cmp	r2, #11
 8008efc:	d917      	bls.n	8008f2e <_malloc_r+0xc2>
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	6025      	str	r5, [r4, #0]
 8008f04:	bf18      	it	ne
 8008f06:	6059      	strne	r1, [r3, #4]
 8008f08:	6863      	ldr	r3, [r4, #4]
 8008f0a:	bf08      	it	eq
 8008f0c:	f8c8 1000 	streq.w	r1, [r8]
 8008f10:	5162      	str	r2, [r4, r5]
 8008f12:	604b      	str	r3, [r1, #4]
 8008f14:	4630      	mov	r0, r6
 8008f16:	f000 f82f 	bl	8008f78 <__malloc_unlock>
 8008f1a:	f104 000b 	add.w	r0, r4, #11
 8008f1e:	1d23      	adds	r3, r4, #4
 8008f20:	f020 0007 	bic.w	r0, r0, #7
 8008f24:	1ac2      	subs	r2, r0, r3
 8008f26:	bf1c      	itt	ne
 8008f28:	1a1b      	subne	r3, r3, r0
 8008f2a:	50a3      	strne	r3, [r4, r2]
 8008f2c:	e7af      	b.n	8008e8e <_malloc_r+0x22>
 8008f2e:	6862      	ldr	r2, [r4, #4]
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	bf0c      	ite	eq
 8008f34:	f8c8 2000 	streq.w	r2, [r8]
 8008f38:	605a      	strne	r2, [r3, #4]
 8008f3a:	e7eb      	b.n	8008f14 <_malloc_r+0xa8>
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	6864      	ldr	r4, [r4, #4]
 8008f40:	e7ae      	b.n	8008ea0 <_malloc_r+0x34>
 8008f42:	463c      	mov	r4, r7
 8008f44:	687f      	ldr	r7, [r7, #4]
 8008f46:	e7b6      	b.n	8008eb6 <_malloc_r+0x4a>
 8008f48:	461a      	mov	r2, r3
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d1fb      	bne.n	8008f48 <_malloc_r+0xdc>
 8008f50:	2300      	movs	r3, #0
 8008f52:	6053      	str	r3, [r2, #4]
 8008f54:	e7de      	b.n	8008f14 <_malloc_r+0xa8>
 8008f56:	230c      	movs	r3, #12
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f000 f80c 	bl	8008f78 <__malloc_unlock>
 8008f60:	e794      	b.n	8008e8c <_malloc_r+0x20>
 8008f62:	6005      	str	r5, [r0, #0]
 8008f64:	e7d6      	b.n	8008f14 <_malloc_r+0xa8>
 8008f66:	bf00      	nop
 8008f68:	200050fc 	.word	0x200050fc

08008f6c <__malloc_lock>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	@ (8008f74 <__malloc_lock+0x8>)
 8008f6e:	f000 b8cb 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	2000523c 	.word	0x2000523c

08008f78 <__malloc_unlock>:
 8008f78:	4801      	ldr	r0, [pc, #4]	@ (8008f80 <__malloc_unlock+0x8>)
 8008f7a:	f000 b8c6 	b.w	800910a <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	2000523c 	.word	0x2000523c

08008f84 <siprintf>:
 8008f84:	b40e      	push	{r1, r2, r3}
 8008f86:	b510      	push	{r4, lr}
 8008f88:	b09d      	sub	sp, #116	@ 0x74
 8008f8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008f8c:	9002      	str	r0, [sp, #8]
 8008f8e:	9006      	str	r0, [sp, #24]
 8008f90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f94:	480a      	ldr	r0, [pc, #40]	@ (8008fc0 <siprintf+0x3c>)
 8008f96:	9107      	str	r1, [sp, #28]
 8008f98:	9104      	str	r1, [sp, #16]
 8008f9a:	490a      	ldr	r1, [pc, #40]	@ (8008fc4 <siprintf+0x40>)
 8008f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa0:	9105      	str	r1, [sp, #20]
 8008fa2:	2400      	movs	r4, #0
 8008fa4:	a902      	add	r1, sp, #8
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008fac:	f000 f962 	bl	8009274 <_svfiprintf_r>
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	701c      	strb	r4, [r3, #0]
 8008fb4:	b01d      	add	sp, #116	@ 0x74
 8008fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fba:	b003      	add	sp, #12
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	200004bc 	.word	0x200004bc
 8008fc4:	ffff0208 	.word	0xffff0208

08008fc8 <memset>:
 8008fc8:	4402      	add	r2, r0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d100      	bne.n	8008fd2 <memset+0xa>
 8008fd0:	4770      	bx	lr
 8008fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd6:	e7f9      	b.n	8008fcc <memset+0x4>

08008fd8 <_reclaim_reent>:
 8008fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8009090 <_reclaim_reent+0xb8>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4283      	cmp	r3, r0
 8008fde:	b570      	push	{r4, r5, r6, lr}
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	d053      	beq.n	800908c <_reclaim_reent+0xb4>
 8008fe4:	69c3      	ldr	r3, [r0, #28]
 8008fe6:	b31b      	cbz	r3, 8009030 <_reclaim_reent+0x58>
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	b163      	cbz	r3, 8009006 <_reclaim_reent+0x2e>
 8008fec:	2500      	movs	r5, #0
 8008fee:	69e3      	ldr	r3, [r4, #28]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	5959      	ldr	r1, [r3, r5]
 8008ff4:	b9b1      	cbnz	r1, 8009024 <_reclaim_reent+0x4c>
 8008ff6:	3504      	adds	r5, #4
 8008ff8:	2d80      	cmp	r5, #128	@ 0x80
 8008ffa:	d1f8      	bne.n	8008fee <_reclaim_reent+0x16>
 8008ffc:	69e3      	ldr	r3, [r4, #28]
 8008ffe:	4620      	mov	r0, r4
 8009000:	68d9      	ldr	r1, [r3, #12]
 8009002:	f000 f891 	bl	8009128 <_free_r>
 8009006:	69e3      	ldr	r3, [r4, #28]
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	b111      	cbz	r1, 8009012 <_reclaim_reent+0x3a>
 800900c:	4620      	mov	r0, r4
 800900e:	f000 f88b 	bl	8009128 <_free_r>
 8009012:	69e3      	ldr	r3, [r4, #28]
 8009014:	689d      	ldr	r5, [r3, #8]
 8009016:	b15d      	cbz	r5, 8009030 <_reclaim_reent+0x58>
 8009018:	4629      	mov	r1, r5
 800901a:	4620      	mov	r0, r4
 800901c:	682d      	ldr	r5, [r5, #0]
 800901e:	f000 f883 	bl	8009128 <_free_r>
 8009022:	e7f8      	b.n	8009016 <_reclaim_reent+0x3e>
 8009024:	680e      	ldr	r6, [r1, #0]
 8009026:	4620      	mov	r0, r4
 8009028:	f000 f87e 	bl	8009128 <_free_r>
 800902c:	4631      	mov	r1, r6
 800902e:	e7e1      	b.n	8008ff4 <_reclaim_reent+0x1c>
 8009030:	6961      	ldr	r1, [r4, #20]
 8009032:	b111      	cbz	r1, 800903a <_reclaim_reent+0x62>
 8009034:	4620      	mov	r0, r4
 8009036:	f000 f877 	bl	8009128 <_free_r>
 800903a:	69e1      	ldr	r1, [r4, #28]
 800903c:	b111      	cbz	r1, 8009044 <_reclaim_reent+0x6c>
 800903e:	4620      	mov	r0, r4
 8009040:	f000 f872 	bl	8009128 <_free_r>
 8009044:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009046:	b111      	cbz	r1, 800904e <_reclaim_reent+0x76>
 8009048:	4620      	mov	r0, r4
 800904a:	f000 f86d 	bl	8009128 <_free_r>
 800904e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009050:	b111      	cbz	r1, 8009058 <_reclaim_reent+0x80>
 8009052:	4620      	mov	r0, r4
 8009054:	f000 f868 	bl	8009128 <_free_r>
 8009058:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800905a:	b111      	cbz	r1, 8009062 <_reclaim_reent+0x8a>
 800905c:	4620      	mov	r0, r4
 800905e:	f000 f863 	bl	8009128 <_free_r>
 8009062:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009064:	b111      	cbz	r1, 800906c <_reclaim_reent+0x94>
 8009066:	4620      	mov	r0, r4
 8009068:	f000 f85e 	bl	8009128 <_free_r>
 800906c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800906e:	b111      	cbz	r1, 8009076 <_reclaim_reent+0x9e>
 8009070:	4620      	mov	r0, r4
 8009072:	f000 f859 	bl	8009128 <_free_r>
 8009076:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009078:	b111      	cbz	r1, 8009080 <_reclaim_reent+0xa8>
 800907a:	4620      	mov	r0, r4
 800907c:	f000 f854 	bl	8009128 <_free_r>
 8009080:	6a23      	ldr	r3, [r4, #32]
 8009082:	b11b      	cbz	r3, 800908c <_reclaim_reent+0xb4>
 8009084:	4620      	mov	r0, r4
 8009086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800908a:	4718      	bx	r3
 800908c:	bd70      	pop	{r4, r5, r6, pc}
 800908e:	bf00      	nop
 8009090:	200004bc 	.word	0x200004bc

08009094 <_sbrk_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	@ (80090b0 <_sbrk_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7fa f85c 	bl	800315c <_sbrk>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_sbrk_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_sbrk_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20005238 	.word	0x20005238

080090b4 <__errno>:
 80090b4:	4b01      	ldr	r3, [pc, #4]	@ (80090bc <__errno+0x8>)
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	200004bc 	.word	0x200004bc

080090c0 <__libc_init_array>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	4d0d      	ldr	r5, [pc, #52]	@ (80090f8 <__libc_init_array+0x38>)
 80090c4:	4c0d      	ldr	r4, [pc, #52]	@ (80090fc <__libc_init_array+0x3c>)
 80090c6:	1b64      	subs	r4, r4, r5
 80090c8:	10a4      	asrs	r4, r4, #2
 80090ca:	2600      	movs	r6, #0
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	d109      	bne.n	80090e4 <__libc_init_array+0x24>
 80090d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009100 <__libc_init_array+0x40>)
 80090d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009104 <__libc_init_array+0x44>)
 80090d4:	f000 fba6 	bl	8009824 <_init>
 80090d8:	1b64      	subs	r4, r4, r5
 80090da:	10a4      	asrs	r4, r4, #2
 80090dc:	2600      	movs	r6, #0
 80090de:	42a6      	cmp	r6, r4
 80090e0:	d105      	bne.n	80090ee <__libc_init_array+0x2e>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e8:	4798      	blx	r3
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7ee      	b.n	80090cc <__libc_init_array+0xc>
 80090ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f2:	4798      	blx	r3
 80090f4:	3601      	adds	r6, #1
 80090f6:	e7f2      	b.n	80090de <__libc_init_array+0x1e>
 80090f8:	0800a21c 	.word	0x0800a21c
 80090fc:	0800a21c 	.word	0x0800a21c
 8009100:	0800a21c 	.word	0x0800a21c
 8009104:	0800a220 	.word	0x0800a220

08009108 <__retarget_lock_acquire_recursive>:
 8009108:	4770      	bx	lr

0800910a <__retarget_lock_release_recursive>:
 800910a:	4770      	bx	lr

0800910c <memcpy>:
 800910c:	440a      	add	r2, r1
 800910e:	4291      	cmp	r1, r2
 8009110:	f100 33ff 	add.w	r3, r0, #4294967295
 8009114:	d100      	bne.n	8009118 <memcpy+0xc>
 8009116:	4770      	bx	lr
 8009118:	b510      	push	{r4, lr}
 800911a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800911e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009122:	4291      	cmp	r1, r2
 8009124:	d1f9      	bne.n	800911a <memcpy+0xe>
 8009126:	bd10      	pop	{r4, pc}

08009128 <_free_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4605      	mov	r5, r0
 800912c:	2900      	cmp	r1, #0
 800912e:	d041      	beq.n	80091b4 <_free_r+0x8c>
 8009130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009134:	1f0c      	subs	r4, r1, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	18e4      	addlt	r4, r4, r3
 800913c:	f7ff ff16 	bl	8008f6c <__malloc_lock>
 8009140:	4a1d      	ldr	r2, [pc, #116]	@ (80091b8 <_free_r+0x90>)
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	b933      	cbnz	r3, 8009154 <_free_r+0x2c>
 8009146:	6063      	str	r3, [r4, #4]
 8009148:	6014      	str	r4, [r2, #0]
 800914a:	4628      	mov	r0, r5
 800914c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009150:	f7ff bf12 	b.w	8008f78 <__malloc_unlock>
 8009154:	42a3      	cmp	r3, r4
 8009156:	d908      	bls.n	800916a <_free_r+0x42>
 8009158:	6820      	ldr	r0, [r4, #0]
 800915a:	1821      	adds	r1, r4, r0
 800915c:	428b      	cmp	r3, r1
 800915e:	bf01      	itttt	eq
 8009160:	6819      	ldreq	r1, [r3, #0]
 8009162:	685b      	ldreq	r3, [r3, #4]
 8009164:	1809      	addeq	r1, r1, r0
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	e7ed      	b.n	8009146 <_free_r+0x1e>
 800916a:	461a      	mov	r2, r3
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	b10b      	cbz	r3, 8009174 <_free_r+0x4c>
 8009170:	42a3      	cmp	r3, r4
 8009172:	d9fa      	bls.n	800916a <_free_r+0x42>
 8009174:	6811      	ldr	r1, [r2, #0]
 8009176:	1850      	adds	r0, r2, r1
 8009178:	42a0      	cmp	r0, r4
 800917a:	d10b      	bne.n	8009194 <_free_r+0x6c>
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	4401      	add	r1, r0
 8009180:	1850      	adds	r0, r2, r1
 8009182:	4283      	cmp	r3, r0
 8009184:	6011      	str	r1, [r2, #0]
 8009186:	d1e0      	bne.n	800914a <_free_r+0x22>
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	6053      	str	r3, [r2, #4]
 800918e:	4408      	add	r0, r1
 8009190:	6010      	str	r0, [r2, #0]
 8009192:	e7da      	b.n	800914a <_free_r+0x22>
 8009194:	d902      	bls.n	800919c <_free_r+0x74>
 8009196:	230c      	movs	r3, #12
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	e7d6      	b.n	800914a <_free_r+0x22>
 800919c:	6820      	ldr	r0, [r4, #0]
 800919e:	1821      	adds	r1, r4, r0
 80091a0:	428b      	cmp	r3, r1
 80091a2:	bf04      	itt	eq
 80091a4:	6819      	ldreq	r1, [r3, #0]
 80091a6:	685b      	ldreq	r3, [r3, #4]
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	bf04      	itt	eq
 80091ac:	1809      	addeq	r1, r1, r0
 80091ae:	6021      	streq	r1, [r4, #0]
 80091b0:	6054      	str	r4, [r2, #4]
 80091b2:	e7ca      	b.n	800914a <_free_r+0x22>
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
 80091b6:	bf00      	nop
 80091b8:	200050fc 	.word	0x200050fc

080091bc <__ssputs_r>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	688e      	ldr	r6, [r1, #8]
 80091c2:	461f      	mov	r7, r3
 80091c4:	42be      	cmp	r6, r7
 80091c6:	680b      	ldr	r3, [r1, #0]
 80091c8:	4682      	mov	sl, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	4690      	mov	r8, r2
 80091ce:	d82d      	bhi.n	800922c <__ssputs_r+0x70>
 80091d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091d8:	d026      	beq.n	8009228 <__ssputs_r+0x6c>
 80091da:	6965      	ldr	r5, [r4, #20]
 80091dc:	6909      	ldr	r1, [r1, #16]
 80091de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091e2:	eba3 0901 	sub.w	r9, r3, r1
 80091e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091ea:	1c7b      	adds	r3, r7, #1
 80091ec:	444b      	add	r3, r9
 80091ee:	106d      	asrs	r5, r5, #1
 80091f0:	429d      	cmp	r5, r3
 80091f2:	bf38      	it	cc
 80091f4:	461d      	movcc	r5, r3
 80091f6:	0553      	lsls	r3, r2, #21
 80091f8:	d527      	bpl.n	800924a <__ssputs_r+0x8e>
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7ff fe36 	bl	8008e6c <_malloc_r>
 8009200:	4606      	mov	r6, r0
 8009202:	b360      	cbz	r0, 800925e <__ssputs_r+0xa2>
 8009204:	6921      	ldr	r1, [r4, #16]
 8009206:	464a      	mov	r2, r9
 8009208:	f7ff ff80 	bl	800910c <memcpy>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	6126      	str	r6, [r4, #16]
 800921a:	6165      	str	r5, [r4, #20]
 800921c:	444e      	add	r6, r9
 800921e:	eba5 0509 	sub.w	r5, r5, r9
 8009222:	6026      	str	r6, [r4, #0]
 8009224:	60a5      	str	r5, [r4, #8]
 8009226:	463e      	mov	r6, r7
 8009228:	42be      	cmp	r6, r7
 800922a:	d900      	bls.n	800922e <__ssputs_r+0x72>
 800922c:	463e      	mov	r6, r7
 800922e:	6820      	ldr	r0, [r4, #0]
 8009230:	4632      	mov	r2, r6
 8009232:	4641      	mov	r1, r8
 8009234:	f000 faa6 	bl	8009784 <memmove>
 8009238:	68a3      	ldr	r3, [r4, #8]
 800923a:	1b9b      	subs	r3, r3, r6
 800923c:	60a3      	str	r3, [r4, #8]
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	4433      	add	r3, r6
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	2000      	movs	r0, #0
 8009246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924a:	462a      	mov	r2, r5
 800924c:	f000 fab4 	bl	80097b8 <_realloc_r>
 8009250:	4606      	mov	r6, r0
 8009252:	2800      	cmp	r0, #0
 8009254:	d1e0      	bne.n	8009218 <__ssputs_r+0x5c>
 8009256:	6921      	ldr	r1, [r4, #16]
 8009258:	4650      	mov	r0, sl
 800925a:	f7ff ff65 	bl	8009128 <_free_r>
 800925e:	230c      	movs	r3, #12
 8009260:	f8ca 3000 	str.w	r3, [sl]
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e7e9      	b.n	8009246 <__ssputs_r+0x8a>
	...

08009274 <_svfiprintf_r>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4698      	mov	r8, r3
 800927a:	898b      	ldrh	r3, [r1, #12]
 800927c:	061b      	lsls	r3, r3, #24
 800927e:	b09d      	sub	sp, #116	@ 0x74
 8009280:	4607      	mov	r7, r0
 8009282:	460d      	mov	r5, r1
 8009284:	4614      	mov	r4, r2
 8009286:	d510      	bpl.n	80092aa <_svfiprintf_r+0x36>
 8009288:	690b      	ldr	r3, [r1, #16]
 800928a:	b973      	cbnz	r3, 80092aa <_svfiprintf_r+0x36>
 800928c:	2140      	movs	r1, #64	@ 0x40
 800928e:	f7ff fded 	bl	8008e6c <_malloc_r>
 8009292:	6028      	str	r0, [r5, #0]
 8009294:	6128      	str	r0, [r5, #16]
 8009296:	b930      	cbnz	r0, 80092a6 <_svfiprintf_r+0x32>
 8009298:	230c      	movs	r3, #12
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	b01d      	add	sp, #116	@ 0x74
 80092a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a6:	2340      	movs	r3, #64	@ 0x40
 80092a8:	616b      	str	r3, [r5, #20]
 80092aa:	2300      	movs	r3, #0
 80092ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ae:	2320      	movs	r3, #32
 80092b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b8:	2330      	movs	r3, #48	@ 0x30
 80092ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009458 <_svfiprintf_r+0x1e4>
 80092be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092c2:	f04f 0901 	mov.w	r9, #1
 80092c6:	4623      	mov	r3, r4
 80092c8:	469a      	mov	sl, r3
 80092ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ce:	b10a      	cbz	r2, 80092d4 <_svfiprintf_r+0x60>
 80092d0:	2a25      	cmp	r2, #37	@ 0x25
 80092d2:	d1f9      	bne.n	80092c8 <_svfiprintf_r+0x54>
 80092d4:	ebba 0b04 	subs.w	fp, sl, r4
 80092d8:	d00b      	beq.n	80092f2 <_svfiprintf_r+0x7e>
 80092da:	465b      	mov	r3, fp
 80092dc:	4622      	mov	r2, r4
 80092de:	4629      	mov	r1, r5
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff ff6b 	bl	80091bc <__ssputs_r>
 80092e6:	3001      	adds	r0, #1
 80092e8:	f000 80a7 	beq.w	800943a <_svfiprintf_r+0x1c6>
 80092ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092ee:	445a      	add	r2, fp
 80092f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f2:	f89a 3000 	ldrb.w	r3, [sl]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 809f 	beq.w	800943a <_svfiprintf_r+0x1c6>
 80092fc:	2300      	movs	r3, #0
 80092fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009306:	f10a 0a01 	add.w	sl, sl, #1
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	9307      	str	r3, [sp, #28]
 800930e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009312:	931a      	str	r3, [sp, #104]	@ 0x68
 8009314:	4654      	mov	r4, sl
 8009316:	2205      	movs	r2, #5
 8009318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931c:	484e      	ldr	r0, [pc, #312]	@ (8009458 <_svfiprintf_r+0x1e4>)
 800931e:	f7f6 ff5f 	bl	80001e0 <memchr>
 8009322:	9a04      	ldr	r2, [sp, #16]
 8009324:	b9d8      	cbnz	r0, 800935e <_svfiprintf_r+0xea>
 8009326:	06d0      	lsls	r0, r2, #27
 8009328:	bf44      	itt	mi
 800932a:	2320      	movmi	r3, #32
 800932c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009330:	0711      	lsls	r1, r2, #28
 8009332:	bf44      	itt	mi
 8009334:	232b      	movmi	r3, #43	@ 0x2b
 8009336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800933a:	f89a 3000 	ldrb.w	r3, [sl]
 800933e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009340:	d015      	beq.n	800936e <_svfiprintf_r+0xfa>
 8009342:	9a07      	ldr	r2, [sp, #28]
 8009344:	4654      	mov	r4, sl
 8009346:	2000      	movs	r0, #0
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4621      	mov	r1, r4
 800934e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009352:	3b30      	subs	r3, #48	@ 0x30
 8009354:	2b09      	cmp	r3, #9
 8009356:	d94b      	bls.n	80093f0 <_svfiprintf_r+0x17c>
 8009358:	b1b0      	cbz	r0, 8009388 <_svfiprintf_r+0x114>
 800935a:	9207      	str	r2, [sp, #28]
 800935c:	e014      	b.n	8009388 <_svfiprintf_r+0x114>
 800935e:	eba0 0308 	sub.w	r3, r0, r8
 8009362:	fa09 f303 	lsl.w	r3, r9, r3
 8009366:	4313      	orrs	r3, r2
 8009368:	9304      	str	r3, [sp, #16]
 800936a:	46a2      	mov	sl, r4
 800936c:	e7d2      	b.n	8009314 <_svfiprintf_r+0xa0>
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	1d19      	adds	r1, r3, #4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	9103      	str	r1, [sp, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	bfbb      	ittet	lt
 800937a:	425b      	neglt	r3, r3
 800937c:	f042 0202 	orrlt.w	r2, r2, #2
 8009380:	9307      	strge	r3, [sp, #28]
 8009382:	9307      	strlt	r3, [sp, #28]
 8009384:	bfb8      	it	lt
 8009386:	9204      	strlt	r2, [sp, #16]
 8009388:	7823      	ldrb	r3, [r4, #0]
 800938a:	2b2e      	cmp	r3, #46	@ 0x2e
 800938c:	d10a      	bne.n	80093a4 <_svfiprintf_r+0x130>
 800938e:	7863      	ldrb	r3, [r4, #1]
 8009390:	2b2a      	cmp	r3, #42	@ 0x2a
 8009392:	d132      	bne.n	80093fa <_svfiprintf_r+0x186>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	1d1a      	adds	r2, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	9203      	str	r2, [sp, #12]
 800939c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093a0:	3402      	adds	r4, #2
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009468 <_svfiprintf_r+0x1f4>
 80093a8:	7821      	ldrb	r1, [r4, #0]
 80093aa:	2203      	movs	r2, #3
 80093ac:	4650      	mov	r0, sl
 80093ae:	f7f6 ff17 	bl	80001e0 <memchr>
 80093b2:	b138      	cbz	r0, 80093c4 <_svfiprintf_r+0x150>
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	eba0 000a 	sub.w	r0, r0, sl
 80093ba:	2240      	movs	r2, #64	@ 0x40
 80093bc:	4082      	lsls	r2, r0
 80093be:	4313      	orrs	r3, r2
 80093c0:	3401      	adds	r4, #1
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c8:	4824      	ldr	r0, [pc, #144]	@ (800945c <_svfiprintf_r+0x1e8>)
 80093ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ce:	2206      	movs	r2, #6
 80093d0:	f7f6 ff06 	bl	80001e0 <memchr>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d036      	beq.n	8009446 <_svfiprintf_r+0x1d2>
 80093d8:	4b21      	ldr	r3, [pc, #132]	@ (8009460 <_svfiprintf_r+0x1ec>)
 80093da:	bb1b      	cbnz	r3, 8009424 <_svfiprintf_r+0x1b0>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	3307      	adds	r3, #7
 80093e0:	f023 0307 	bic.w	r3, r3, #7
 80093e4:	3308      	adds	r3, #8
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ea:	4433      	add	r3, r6
 80093ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ee:	e76a      	b.n	80092c6 <_svfiprintf_r+0x52>
 80093f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f4:	460c      	mov	r4, r1
 80093f6:	2001      	movs	r0, #1
 80093f8:	e7a8      	b.n	800934c <_svfiprintf_r+0xd8>
 80093fa:	2300      	movs	r3, #0
 80093fc:	3401      	adds	r4, #1
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	4619      	mov	r1, r3
 8009402:	f04f 0c0a 	mov.w	ip, #10
 8009406:	4620      	mov	r0, r4
 8009408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800940c:	3a30      	subs	r2, #48	@ 0x30
 800940e:	2a09      	cmp	r2, #9
 8009410:	d903      	bls.n	800941a <_svfiprintf_r+0x1a6>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0c6      	beq.n	80093a4 <_svfiprintf_r+0x130>
 8009416:	9105      	str	r1, [sp, #20]
 8009418:	e7c4      	b.n	80093a4 <_svfiprintf_r+0x130>
 800941a:	fb0c 2101 	mla	r1, ip, r1, r2
 800941e:	4604      	mov	r4, r0
 8009420:	2301      	movs	r3, #1
 8009422:	e7f0      	b.n	8009406 <_svfiprintf_r+0x192>
 8009424:	ab03      	add	r3, sp, #12
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	462a      	mov	r2, r5
 800942a:	4b0e      	ldr	r3, [pc, #56]	@ (8009464 <_svfiprintf_r+0x1f0>)
 800942c:	a904      	add	r1, sp, #16
 800942e:	4638      	mov	r0, r7
 8009430:	f3af 8000 	nop.w
 8009434:	1c42      	adds	r2, r0, #1
 8009436:	4606      	mov	r6, r0
 8009438:	d1d6      	bne.n	80093e8 <_svfiprintf_r+0x174>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	065b      	lsls	r3, r3, #25
 800943e:	f53f af2d 	bmi.w	800929c <_svfiprintf_r+0x28>
 8009442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009444:	e72c      	b.n	80092a0 <_svfiprintf_r+0x2c>
 8009446:	ab03      	add	r3, sp, #12
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	462a      	mov	r2, r5
 800944c:	4b05      	ldr	r3, [pc, #20]	@ (8009464 <_svfiprintf_r+0x1f0>)
 800944e:	a904      	add	r1, sp, #16
 8009450:	4638      	mov	r0, r7
 8009452:	f000 f879 	bl	8009548 <_printf_i>
 8009456:	e7ed      	b.n	8009434 <_svfiprintf_r+0x1c0>
 8009458:	0800a1e0 	.word	0x0800a1e0
 800945c:	0800a1ea 	.word	0x0800a1ea
 8009460:	00000000 	.word	0x00000000
 8009464:	080091bd 	.word	0x080091bd
 8009468:	0800a1e6 	.word	0x0800a1e6

0800946c <_printf_common>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	4616      	mov	r6, r2
 8009472:	4698      	mov	r8, r3
 8009474:	688a      	ldr	r2, [r1, #8]
 8009476:	690b      	ldr	r3, [r1, #16]
 8009478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800947c:	4293      	cmp	r3, r2
 800947e:	bfb8      	it	lt
 8009480:	4613      	movlt	r3, r2
 8009482:	6033      	str	r3, [r6, #0]
 8009484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009488:	4607      	mov	r7, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b10a      	cbz	r2, 8009492 <_printf_common+0x26>
 800948e:	3301      	adds	r3, #1
 8009490:	6033      	str	r3, [r6, #0]
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	0699      	lsls	r1, r3, #26
 8009496:	bf42      	ittt	mi
 8009498:	6833      	ldrmi	r3, [r6, #0]
 800949a:	3302      	addmi	r3, #2
 800949c:	6033      	strmi	r3, [r6, #0]
 800949e:	6825      	ldr	r5, [r4, #0]
 80094a0:	f015 0506 	ands.w	r5, r5, #6
 80094a4:	d106      	bne.n	80094b4 <_printf_common+0x48>
 80094a6:	f104 0a19 	add.w	sl, r4, #25
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	6832      	ldr	r2, [r6, #0]
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dc26      	bgt.n	8009502 <_printf_common+0x96>
 80094b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	3b00      	subs	r3, #0
 80094bc:	bf18      	it	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	0692      	lsls	r2, r2, #26
 80094c2:	d42b      	bmi.n	800951c <_printf_common+0xb0>
 80094c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094c8:	4641      	mov	r1, r8
 80094ca:	4638      	mov	r0, r7
 80094cc:	47c8      	blx	r9
 80094ce:	3001      	adds	r0, #1
 80094d0:	d01e      	beq.n	8009510 <_printf_common+0xa4>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	6922      	ldr	r2, [r4, #16]
 80094d6:	f003 0306 	and.w	r3, r3, #6
 80094da:	2b04      	cmp	r3, #4
 80094dc:	bf02      	ittt	eq
 80094de:	68e5      	ldreq	r5, [r4, #12]
 80094e0:	6833      	ldreq	r3, [r6, #0]
 80094e2:	1aed      	subeq	r5, r5, r3
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	bf0c      	ite	eq
 80094e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094ec:	2500      	movne	r5, #0
 80094ee:	4293      	cmp	r3, r2
 80094f0:	bfc4      	itt	gt
 80094f2:	1a9b      	subgt	r3, r3, r2
 80094f4:	18ed      	addgt	r5, r5, r3
 80094f6:	2600      	movs	r6, #0
 80094f8:	341a      	adds	r4, #26
 80094fa:	42b5      	cmp	r5, r6
 80094fc:	d11a      	bne.n	8009534 <_printf_common+0xc8>
 80094fe:	2000      	movs	r0, #0
 8009500:	e008      	b.n	8009514 <_printf_common+0xa8>
 8009502:	2301      	movs	r3, #1
 8009504:	4652      	mov	r2, sl
 8009506:	4641      	mov	r1, r8
 8009508:	4638      	mov	r0, r7
 800950a:	47c8      	blx	r9
 800950c:	3001      	adds	r0, #1
 800950e:	d103      	bne.n	8009518 <_printf_common+0xac>
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009518:	3501      	adds	r5, #1
 800951a:	e7c6      	b.n	80094aa <_printf_common+0x3e>
 800951c:	18e1      	adds	r1, r4, r3
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	2030      	movs	r0, #48	@ 0x30
 8009522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009526:	4422      	add	r2, r4
 8009528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800952c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009530:	3302      	adds	r3, #2
 8009532:	e7c7      	b.n	80094c4 <_printf_common+0x58>
 8009534:	2301      	movs	r3, #1
 8009536:	4622      	mov	r2, r4
 8009538:	4641      	mov	r1, r8
 800953a:	4638      	mov	r0, r7
 800953c:	47c8      	blx	r9
 800953e:	3001      	adds	r0, #1
 8009540:	d0e6      	beq.n	8009510 <_printf_common+0xa4>
 8009542:	3601      	adds	r6, #1
 8009544:	e7d9      	b.n	80094fa <_printf_common+0x8e>
	...

08009548 <_printf_i>:
 8009548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	7e0f      	ldrb	r7, [r1, #24]
 800954e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009550:	2f78      	cmp	r7, #120	@ 0x78
 8009552:	4691      	mov	r9, r2
 8009554:	4680      	mov	r8, r0
 8009556:	460c      	mov	r4, r1
 8009558:	469a      	mov	sl, r3
 800955a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800955e:	d807      	bhi.n	8009570 <_printf_i+0x28>
 8009560:	2f62      	cmp	r7, #98	@ 0x62
 8009562:	d80a      	bhi.n	800957a <_printf_i+0x32>
 8009564:	2f00      	cmp	r7, #0
 8009566:	f000 80d1 	beq.w	800970c <_printf_i+0x1c4>
 800956a:	2f58      	cmp	r7, #88	@ 0x58
 800956c:	f000 80b8 	beq.w	80096e0 <_printf_i+0x198>
 8009570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009578:	e03a      	b.n	80095f0 <_printf_i+0xa8>
 800957a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800957e:	2b15      	cmp	r3, #21
 8009580:	d8f6      	bhi.n	8009570 <_printf_i+0x28>
 8009582:	a101      	add	r1, pc, #4	@ (adr r1, 8009588 <_printf_i+0x40>)
 8009584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009588:	080095e1 	.word	0x080095e1
 800958c:	080095f5 	.word	0x080095f5
 8009590:	08009571 	.word	0x08009571
 8009594:	08009571 	.word	0x08009571
 8009598:	08009571 	.word	0x08009571
 800959c:	08009571 	.word	0x08009571
 80095a0:	080095f5 	.word	0x080095f5
 80095a4:	08009571 	.word	0x08009571
 80095a8:	08009571 	.word	0x08009571
 80095ac:	08009571 	.word	0x08009571
 80095b0:	08009571 	.word	0x08009571
 80095b4:	080096f3 	.word	0x080096f3
 80095b8:	0800961f 	.word	0x0800961f
 80095bc:	080096ad 	.word	0x080096ad
 80095c0:	08009571 	.word	0x08009571
 80095c4:	08009571 	.word	0x08009571
 80095c8:	08009715 	.word	0x08009715
 80095cc:	08009571 	.word	0x08009571
 80095d0:	0800961f 	.word	0x0800961f
 80095d4:	08009571 	.word	0x08009571
 80095d8:	08009571 	.word	0x08009571
 80095dc:	080096b5 	.word	0x080096b5
 80095e0:	6833      	ldr	r3, [r6, #0]
 80095e2:	1d1a      	adds	r2, r3, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6032      	str	r2, [r6, #0]
 80095e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095f0:	2301      	movs	r3, #1
 80095f2:	e09c      	b.n	800972e <_printf_i+0x1e6>
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	1d19      	adds	r1, r3, #4
 80095fa:	6031      	str	r1, [r6, #0]
 80095fc:	0606      	lsls	r6, r0, #24
 80095fe:	d501      	bpl.n	8009604 <_printf_i+0xbc>
 8009600:	681d      	ldr	r5, [r3, #0]
 8009602:	e003      	b.n	800960c <_printf_i+0xc4>
 8009604:	0645      	lsls	r5, r0, #25
 8009606:	d5fb      	bpl.n	8009600 <_printf_i+0xb8>
 8009608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800960c:	2d00      	cmp	r5, #0
 800960e:	da03      	bge.n	8009618 <_printf_i+0xd0>
 8009610:	232d      	movs	r3, #45	@ 0x2d
 8009612:	426d      	negs	r5, r5
 8009614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009618:	4858      	ldr	r0, [pc, #352]	@ (800977c <_printf_i+0x234>)
 800961a:	230a      	movs	r3, #10
 800961c:	e011      	b.n	8009642 <_printf_i+0xfa>
 800961e:	6821      	ldr	r1, [r4, #0]
 8009620:	6833      	ldr	r3, [r6, #0]
 8009622:	0608      	lsls	r0, r1, #24
 8009624:	f853 5b04 	ldr.w	r5, [r3], #4
 8009628:	d402      	bmi.n	8009630 <_printf_i+0xe8>
 800962a:	0649      	lsls	r1, r1, #25
 800962c:	bf48      	it	mi
 800962e:	b2ad      	uxthmi	r5, r5
 8009630:	2f6f      	cmp	r7, #111	@ 0x6f
 8009632:	4852      	ldr	r0, [pc, #328]	@ (800977c <_printf_i+0x234>)
 8009634:	6033      	str	r3, [r6, #0]
 8009636:	bf14      	ite	ne
 8009638:	230a      	movne	r3, #10
 800963a:	2308      	moveq	r3, #8
 800963c:	2100      	movs	r1, #0
 800963e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009642:	6866      	ldr	r6, [r4, #4]
 8009644:	60a6      	str	r6, [r4, #8]
 8009646:	2e00      	cmp	r6, #0
 8009648:	db05      	blt.n	8009656 <_printf_i+0x10e>
 800964a:	6821      	ldr	r1, [r4, #0]
 800964c:	432e      	orrs	r6, r5
 800964e:	f021 0104 	bic.w	r1, r1, #4
 8009652:	6021      	str	r1, [r4, #0]
 8009654:	d04b      	beq.n	80096ee <_printf_i+0x1a6>
 8009656:	4616      	mov	r6, r2
 8009658:	fbb5 f1f3 	udiv	r1, r5, r3
 800965c:	fb03 5711 	mls	r7, r3, r1, r5
 8009660:	5dc7      	ldrb	r7, [r0, r7]
 8009662:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009666:	462f      	mov	r7, r5
 8009668:	42bb      	cmp	r3, r7
 800966a:	460d      	mov	r5, r1
 800966c:	d9f4      	bls.n	8009658 <_printf_i+0x110>
 800966e:	2b08      	cmp	r3, #8
 8009670:	d10b      	bne.n	800968a <_printf_i+0x142>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	07df      	lsls	r7, r3, #31
 8009676:	d508      	bpl.n	800968a <_printf_i+0x142>
 8009678:	6923      	ldr	r3, [r4, #16]
 800967a:	6861      	ldr	r1, [r4, #4]
 800967c:	4299      	cmp	r1, r3
 800967e:	bfde      	ittt	le
 8009680:	2330      	movle	r3, #48	@ 0x30
 8009682:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009686:	f106 36ff 	addle.w	r6, r6, #4294967295
 800968a:	1b92      	subs	r2, r2, r6
 800968c:	6122      	str	r2, [r4, #16]
 800968e:	f8cd a000 	str.w	sl, [sp]
 8009692:	464b      	mov	r3, r9
 8009694:	aa03      	add	r2, sp, #12
 8009696:	4621      	mov	r1, r4
 8009698:	4640      	mov	r0, r8
 800969a:	f7ff fee7 	bl	800946c <_printf_common>
 800969e:	3001      	adds	r0, #1
 80096a0:	d14a      	bne.n	8009738 <_printf_i+0x1f0>
 80096a2:	f04f 30ff 	mov.w	r0, #4294967295
 80096a6:	b004      	add	sp, #16
 80096a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	f043 0320 	orr.w	r3, r3, #32
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	4832      	ldr	r0, [pc, #200]	@ (8009780 <_printf_i+0x238>)
 80096b6:	2778      	movs	r7, #120	@ 0x78
 80096b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	6831      	ldr	r1, [r6, #0]
 80096c0:	061f      	lsls	r7, r3, #24
 80096c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80096c6:	d402      	bmi.n	80096ce <_printf_i+0x186>
 80096c8:	065f      	lsls	r7, r3, #25
 80096ca:	bf48      	it	mi
 80096cc:	b2ad      	uxthmi	r5, r5
 80096ce:	6031      	str	r1, [r6, #0]
 80096d0:	07d9      	lsls	r1, r3, #31
 80096d2:	bf44      	itt	mi
 80096d4:	f043 0320 	orrmi.w	r3, r3, #32
 80096d8:	6023      	strmi	r3, [r4, #0]
 80096da:	b11d      	cbz	r5, 80096e4 <_printf_i+0x19c>
 80096dc:	2310      	movs	r3, #16
 80096de:	e7ad      	b.n	800963c <_printf_i+0xf4>
 80096e0:	4826      	ldr	r0, [pc, #152]	@ (800977c <_printf_i+0x234>)
 80096e2:	e7e9      	b.n	80096b8 <_printf_i+0x170>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	f023 0320 	bic.w	r3, r3, #32
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	e7f6      	b.n	80096dc <_printf_i+0x194>
 80096ee:	4616      	mov	r6, r2
 80096f0:	e7bd      	b.n	800966e <_printf_i+0x126>
 80096f2:	6833      	ldr	r3, [r6, #0]
 80096f4:	6825      	ldr	r5, [r4, #0]
 80096f6:	6961      	ldr	r1, [r4, #20]
 80096f8:	1d18      	adds	r0, r3, #4
 80096fa:	6030      	str	r0, [r6, #0]
 80096fc:	062e      	lsls	r6, r5, #24
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	d501      	bpl.n	8009706 <_printf_i+0x1be>
 8009702:	6019      	str	r1, [r3, #0]
 8009704:	e002      	b.n	800970c <_printf_i+0x1c4>
 8009706:	0668      	lsls	r0, r5, #25
 8009708:	d5fb      	bpl.n	8009702 <_printf_i+0x1ba>
 800970a:	8019      	strh	r1, [r3, #0]
 800970c:	2300      	movs	r3, #0
 800970e:	6123      	str	r3, [r4, #16]
 8009710:	4616      	mov	r6, r2
 8009712:	e7bc      	b.n	800968e <_printf_i+0x146>
 8009714:	6833      	ldr	r3, [r6, #0]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	6032      	str	r2, [r6, #0]
 800971a:	681e      	ldr	r6, [r3, #0]
 800971c:	6862      	ldr	r2, [r4, #4]
 800971e:	2100      	movs	r1, #0
 8009720:	4630      	mov	r0, r6
 8009722:	f7f6 fd5d 	bl	80001e0 <memchr>
 8009726:	b108      	cbz	r0, 800972c <_printf_i+0x1e4>
 8009728:	1b80      	subs	r0, r0, r6
 800972a:	6060      	str	r0, [r4, #4]
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	2300      	movs	r3, #0
 8009732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009736:	e7aa      	b.n	800968e <_printf_i+0x146>
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	4632      	mov	r2, r6
 800973c:	4649      	mov	r1, r9
 800973e:	4640      	mov	r0, r8
 8009740:	47d0      	blx	sl
 8009742:	3001      	adds	r0, #1
 8009744:	d0ad      	beq.n	80096a2 <_printf_i+0x15a>
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	079b      	lsls	r3, r3, #30
 800974a:	d413      	bmi.n	8009774 <_printf_i+0x22c>
 800974c:	68e0      	ldr	r0, [r4, #12]
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	4298      	cmp	r0, r3
 8009752:	bfb8      	it	lt
 8009754:	4618      	movlt	r0, r3
 8009756:	e7a6      	b.n	80096a6 <_printf_i+0x15e>
 8009758:	2301      	movs	r3, #1
 800975a:	4632      	mov	r2, r6
 800975c:	4649      	mov	r1, r9
 800975e:	4640      	mov	r0, r8
 8009760:	47d0      	blx	sl
 8009762:	3001      	adds	r0, #1
 8009764:	d09d      	beq.n	80096a2 <_printf_i+0x15a>
 8009766:	3501      	adds	r5, #1
 8009768:	68e3      	ldr	r3, [r4, #12]
 800976a:	9903      	ldr	r1, [sp, #12]
 800976c:	1a5b      	subs	r3, r3, r1
 800976e:	42ab      	cmp	r3, r5
 8009770:	dcf2      	bgt.n	8009758 <_printf_i+0x210>
 8009772:	e7eb      	b.n	800974c <_printf_i+0x204>
 8009774:	2500      	movs	r5, #0
 8009776:	f104 0619 	add.w	r6, r4, #25
 800977a:	e7f5      	b.n	8009768 <_printf_i+0x220>
 800977c:	0800a1f1 	.word	0x0800a1f1
 8009780:	0800a202 	.word	0x0800a202

08009784 <memmove>:
 8009784:	4288      	cmp	r0, r1
 8009786:	b510      	push	{r4, lr}
 8009788:	eb01 0402 	add.w	r4, r1, r2
 800978c:	d902      	bls.n	8009794 <memmove+0x10>
 800978e:	4284      	cmp	r4, r0
 8009790:	4623      	mov	r3, r4
 8009792:	d807      	bhi.n	80097a4 <memmove+0x20>
 8009794:	1e43      	subs	r3, r0, #1
 8009796:	42a1      	cmp	r1, r4
 8009798:	d008      	beq.n	80097ac <memmove+0x28>
 800979a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800979e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097a2:	e7f8      	b.n	8009796 <memmove+0x12>
 80097a4:	4402      	add	r2, r0
 80097a6:	4601      	mov	r1, r0
 80097a8:	428a      	cmp	r2, r1
 80097aa:	d100      	bne.n	80097ae <memmove+0x2a>
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097b6:	e7f7      	b.n	80097a8 <memmove+0x24>

080097b8 <_realloc_r>:
 80097b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	4607      	mov	r7, r0
 80097be:	4614      	mov	r4, r2
 80097c0:	460d      	mov	r5, r1
 80097c2:	b921      	cbnz	r1, 80097ce <_realloc_r+0x16>
 80097c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	4611      	mov	r1, r2
 80097ca:	f7ff bb4f 	b.w	8008e6c <_malloc_r>
 80097ce:	b92a      	cbnz	r2, 80097dc <_realloc_r+0x24>
 80097d0:	f7ff fcaa 	bl	8009128 <_free_r>
 80097d4:	4625      	mov	r5, r4
 80097d6:	4628      	mov	r0, r5
 80097d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097dc:	f000 f81a 	bl	8009814 <_malloc_usable_size_r>
 80097e0:	4284      	cmp	r4, r0
 80097e2:	4606      	mov	r6, r0
 80097e4:	d802      	bhi.n	80097ec <_realloc_r+0x34>
 80097e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ea:	d8f4      	bhi.n	80097d6 <_realloc_r+0x1e>
 80097ec:	4621      	mov	r1, r4
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7ff fb3c 	bl	8008e6c <_malloc_r>
 80097f4:	4680      	mov	r8, r0
 80097f6:	b908      	cbnz	r0, 80097fc <_realloc_r+0x44>
 80097f8:	4645      	mov	r5, r8
 80097fa:	e7ec      	b.n	80097d6 <_realloc_r+0x1e>
 80097fc:	42b4      	cmp	r4, r6
 80097fe:	4622      	mov	r2, r4
 8009800:	4629      	mov	r1, r5
 8009802:	bf28      	it	cs
 8009804:	4632      	movcs	r2, r6
 8009806:	f7ff fc81 	bl	800910c <memcpy>
 800980a:	4629      	mov	r1, r5
 800980c:	4638      	mov	r0, r7
 800980e:	f7ff fc8b 	bl	8009128 <_free_r>
 8009812:	e7f1      	b.n	80097f8 <_realloc_r+0x40>

08009814 <_malloc_usable_size_r>:
 8009814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009818:	1f18      	subs	r0, r3, #4
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfbc      	itt	lt
 800981e:	580b      	ldrlt	r3, [r1, r0]
 8009820:	18c0      	addlt	r0, r0, r3
 8009822:	4770      	bx	lr

08009824 <_init>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr

08009830 <_fini>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	bf00      	nop
 8009834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009836:	bc08      	pop	{r3}
 8009838:	469e      	mov	lr, r3
 800983a:	4770      	bx	lr
